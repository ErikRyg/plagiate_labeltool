Unnamed: 0,semester,ha,task,prog_lang,surname1,lastname1,code1,code2,label
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void lmpjs (char* czfie)
{
	for(int ixqao = 0; czfie[ixqao] != '\0'; ixqao++)
	{
		if(czfie[ixqao] == 'x' || czfie[ixqao] == 'y' || czfie[ixqao] == 'q' || czfie[ixqao] == 'X' || czfie[ixqao] == 'Y' || czfie[ixqao] == 'Q' )
		{
			for(int wkdms = ixqao; czfie[wkdms] != '\0'; wkdms++)
			{
				czfie[wkdms] = czfie[wkdms+1];
			}
			ixqao = ixqao -1;
		}
	}
}
void shjum (char* czfie)
{
	int eyryf = 0;
	while(czfie[eyryf] != '\0')
	{
	eyryf++;
	}
	char bmysr[eyryf]; 
	for(int mjoia = 0; mjoia < eyryf; mjoia++)
	{
		if(mjoia % 3 == 0)
		{
			bmysr[mjoia] = czfie[mjoia];
		}
		else bmysr[mjoia] = 0;
	}
	int ykvzk =0;
	for(int ixqao = 0; ixqao < eyryf; ixqao++)
	{
		if(bmysr[ixqao] != 0)
		{
			czfie[ykvzk] = bmysr[ixqao];
			ykvzk++;
		}
	}
	czfie[ykvzk] = '\0';
}
int main(int nnskg, char* argv[])
{
	int eyryf = 0;
	for(int wkdms=1; wkdms < nnskg; wkdms++)
	{
		for(int ixqao = 0; argv[wkdms][ixqao] != '\0'; ixqao++)
		{
			eyryf++;		
		}				
	}
	char czfie[eyryf+1];
	czfie[eyryf] = '\0';
	int ykvzk = 0;
	for(int wkdms=1; wkdms < nnskg; wkdms++)
	{
		for(int ixqao = 0; argv[wkdms][ixqao] != '\0'; ixqao++)
		{
			czfie[ykvzk] = argv[wkdms][ixqao];
			ykvzk++;
		}
	}
	lmpjs(czfie);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&czfie[0]);
	shjum(czfie);
	printf(""Der neue String lautet: %s \n"",&czfie[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void lsphm (char* ybbdf)
{
	for(int pwywx = 0; ybbdf[pwywx] != '\0'; pwywx++)
	{
		if(ybbdf[pwywx] == 'x' || ybbdf[pwywx] == 'y' || ybbdf[pwywx] == 'q' || ybbdf[pwywx] == 'X' || ybbdf[pwywx] == 'Y' || ybbdf[pwywx] == 'Q' )
		{
			for(int nuomq = pwywx; ybbdf[nuomq] != '\0'; nuomq++)
			{
				ybbdf[nuomq] = ybbdf[nuomq+1];
			}
			pwywx = pwywx -1;
		}
	}
}
void lugbx (char* ybbdf)
{
	int vpbmd = 0;
	while(ybbdf[vpbmd] != '\0')
	{
	vpbmd++;
	}
	char qjgbs[vpbmd]; 
	for(int mafsu = 0; mafsu < vpbmd; mafsu++)
	{
		if(mafsu % 3 == 0)
		{
			qjgbs[mafsu] = ybbdf[mafsu];
		}
		else qjgbs[mafsu] = 0;
	}
	int yeuvz =0;
	for(int pwywx = 0; pwywx < vpbmd; pwywx++)
	{
		if(qjgbs[pwywx] != 0)
		{
			ybbdf[yeuvz] = qjgbs[pwywx];
			yeuvz++;
		}
	}
	ybbdf[yeuvz] = '\0';
}
int main(int ajqzl, char* argv[])
{
	int vpbmd = 0;
	for(int nuomq=1; nuomq < ajqzl; nuomq++)
	{
		for(int pwywx = 0; argv[nuomq][pwywx] != '\0'; pwywx++)
		{
			vpbmd++;		
		}				
	}
	char ybbdf[vpbmd+1];
	ybbdf[vpbmd] = '\0';
	int yeuvz = 0;
	for(int nuomq=1; nuomq < ajqzl; nuomq++)
	{
		for(int pwywx = 0; argv[nuomq][pwywx] != '\0'; pwywx++)
		{
			ybbdf[yeuvz] = argv[nuomq][pwywx];
			yeuvz++;
		}
	}
	lsphm(ybbdf);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&ybbdf[0]);
	lugbx(ybbdf);
	printf(""Der neue String lautet: %s \n"",&ybbdf[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void folye (char* urkms)
{
	for(int apkdd = 0; urkms[apkdd] != '\0'; apkdd++)
	{
		if(urkms[apkdd] == 'x' || urkms[apkdd] == 'y' || urkms[apkdd] == 'q' || urkms[apkdd] == 'X' || urkms[apkdd] == 'Y' || urkms[apkdd] == 'Q' )
		{
			for(int lawtt = apkdd; urkms[lawtt] != '\0'; lawtt++)
			{
				urkms[lawtt] = urkms[lawtt+1];
			}
			apkdd = apkdd -1;
		}
	}
}
void wrzhx (char* urkms)
{
	int enpmq = 0;
	while(urkms[enpmq] != '\0')
	{
	enpmq++;
	}
	char yckom[enpmq]; 
	for(int ietri = 0; ietri < enpmq; ietri++)
	{
		if(ietri % 3 == 0)
		{
			yckom[ietri] = urkms[ietri];
		}
		else yckom[ietri] = 0;
	}
	int cemph =0;
	for(int apkdd = 0; apkdd < enpmq; apkdd++)
	{
		if(yckom[apkdd] != 0)
		{
			urkms[cemph] = yckom[apkdd];
			cemph++;
		}
	}
	urkms[cemph] = '\0';
}
int main(int qmibq, char* argv[])
{
	int enpmq = 0;
	for(int lawtt=1; lawtt < qmibq; lawtt++)
	{
		for(int apkdd = 0; argv[lawtt][apkdd] != '\0'; apkdd++)
		{
			enpmq++;		
		}				
	}
	char urkms[enpmq+1];
	urkms[enpmq] = '\0';
	int cemph = 0;
	for(int lawtt=1; lawtt < qmibq; lawtt++)
	{
		for(int apkdd = 0; argv[lawtt][apkdd] != '\0'; apkdd++)
		{
			urkms[cemph] = argv[lawtt][apkdd];
			cemph++;
		}
	}
	folye(urkms);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&urkms[0]);
	wrzhx(urkms);
	printf(""Der neue String lautet: %s \n"",&urkms[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void kkeyi (char* ungxd)
{
	for(int pdgwc = 0; ungxd[pdgwc] != '\0'; pdgwc++)
	{
		if(ungxd[pdgwc] == 'x' || ungxd[pdgwc] == 'y' || ungxd[pdgwc] == 'q' || ungxd[pdgwc] == 'X' || ungxd[pdgwc] == 'Y' || ungxd[pdgwc] == 'Q' )
		{
			for(int galvq = pdgwc; ungxd[galvq] != '\0'; galvq++)
			{
				ungxd[galvq] = ungxd[galvq+1];
			}
			pdgwc = pdgwc -1;
		}
	}
}
void schms (char* ungxd)
{
	int oylyf = 0;
	while(ungxd[oylyf] != '\0')
	{
	oylyf++;
	}
	char ixdle[oylyf]; 
	for(int ubzeh = 0; ubzeh < oylyf; ubzeh++)
	{
		if(ubzeh % 3 == 0)
		{
			ixdle[ubzeh] = ungxd[ubzeh];
		}
		else ixdle[ubzeh] = 0;
	}
	int mgxxe =0;
	for(int pdgwc = 0; pdgwc < oylyf; pdgwc++)
	{
		if(ixdle[pdgwc] != 0)
		{
			ungxd[mgxxe] = ixdle[pdgwc];
			mgxxe++;
		}
	}
	ungxd[mgxxe] = '\0';
}
int main(int eznby, char* argv[])
{
	int oylyf = 0;
	for(int galvq=1; galvq < eznby; galvq++)
	{
		for(int pdgwc = 0; argv[galvq][pdgwc] != '\0'; pdgwc++)
		{
			oylyf++;		
		}				
	}
	char ungxd[oylyf+1];
	ungxd[oylyf] = '\0';
	int mgxxe = 0;
	for(int galvq=1; galvq < eznby; galvq++)
	{
		for(int pdgwc = 0; argv[galvq][pdgwc] != '\0'; pdgwc++)
		{
			ungxd[mgxxe] = argv[galvq][pdgwc];
			mgxxe++;
		}
	}
	kkeyi(ungxd);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&ungxd[0]);
	schms(ungxd);
	printf(""Der neue String lautet: %s \n"",&ungxd[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void qgatb (char* olmdb)
{
	for(int jcfjv = 0; olmdb[jcfjv] != '\0'; jcfjv++)
	{
		if(olmdb[jcfjv] == 'x' || olmdb[jcfjv] == 'y' || olmdb[jcfjv] == 'q' || olmdb[jcfjv] == 'X' || olmdb[jcfjv] == 'Y' || olmdb[jcfjv] == 'Q' )
		{
			for(int xkubd = jcfjv; olmdb[xkubd] != '\0'; xkubd++)
			{
				olmdb[xkubd] = olmdb[xkubd+1];
			}
			jcfjv = jcfjv -1;
		}
	}
}
void uddtz (char* olmdb)
{
	int zhnle = 0;
	while(olmdb[zhnle] != '\0')
	{
	zhnle++;
	}
	char xdmbk[zhnle]; 
	for(int aqwht = 0; aqwht < zhnle; aqwht++)
	{
		if(aqwht % 3 == 0)
		{
			xdmbk[aqwht] = olmdb[aqwht];
		}
		else xdmbk[aqwht] = 0;
	}
	int bqujh =0;
	for(int jcfjv = 0; jcfjv < zhnle; jcfjv++)
	{
		if(xdmbk[jcfjv] != 0)
		{
			olmdb[bqujh] = xdmbk[jcfjv];
			bqujh++;
		}
	}
	olmdb[bqujh] = '\0';
}
int main(int nrflq, char* argv[])
{
	int zhnle = 0;
	for(int xkubd=1; xkubd < nrflq; xkubd++)
	{
		for(int jcfjv = 0; argv[xkubd][jcfjv] != '\0'; jcfjv++)
		{
			zhnle++;		
		}				
	}
	char olmdb[zhnle+1];
	olmdb[zhnle] = '\0';
	int bqujh = 0;
	for(int xkubd=1; xkubd < nrflq; xkubd++)
	{
		for(int jcfjv = 0; argv[xkubd][jcfjv] != '\0'; jcfjv++)
		{
			olmdb[bqujh] = argv[xkubd][jcfjv];
			bqujh++;
		}
	}
	qgatb(olmdb);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&olmdb[0]);
	uddtz(olmdb);
	printf(""Der neue String lautet: %s \n"",&olmdb[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void mhqbw (char* rxmoi)
{
	for(int phlda = 0; rxmoi[phlda] != '\0'; phlda++)
	{
		if(rxmoi[phlda] == 'x' || rxmoi[phlda] == 'y' || rxmoi[phlda] == 'q' || rxmoi[phlda] == 'X' || rxmoi[phlda] == 'Y' || rxmoi[phlda] == 'Q' )
		{
			for(int zpguj = phlda; rxmoi[zpguj] != '\0'; zpguj++)
			{
				rxmoi[zpguj] = rxmoi[zpguj+1];
			}
			phlda = phlda -1;
		}
	}
}
void nektp (char* rxmoi)
{
	int ambsn = 0;
	while(rxmoi[ambsn] != '\0')
	{
	ambsn++;
	}
	char ybrcy[ambsn]; 
	for(int gqmni = 0; gqmni < ambsn; gqmni++)
	{
		if(gqmni % 3 == 0)
		{
			ybrcy[gqmni] = rxmoi[gqmni];
		}
		else ybrcy[gqmni] = 0;
	}
	int dznfd =0;
	for(int phlda = 0; phlda < ambsn; phlda++)
	{
		if(ybrcy[phlda] != 0)
		{
			rxmoi[dznfd] = ybrcy[phlda];
			dznfd++;
		}
	}
	rxmoi[dznfd] = '\0';
}
int main(int cxezj, char* argv[])
{
	int ambsn = 0;
	for(int zpguj=1; zpguj < cxezj; zpguj++)
	{
		for(int phlda = 0; argv[zpguj][phlda] != '\0'; phlda++)
		{
			ambsn++;		
		}				
	}
	char rxmoi[ambsn+1];
	rxmoi[ambsn] = '\0';
	int dznfd = 0;
	for(int zpguj=1; zpguj < cxezj; zpguj++)
	{
		for(int phlda = 0; argv[zpguj][phlda] != '\0'; phlda++)
		{
			rxmoi[dznfd] = argv[zpguj][phlda];
			dznfd++;
		}
	}
	mhqbw(rxmoi);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&rxmoi[0]);
	nektp(rxmoi);
	printf(""Der neue String lautet: %s \n"",&rxmoi[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void thyov (char* dqmkp)
{
	for(int soezq = 0; dqmkp[soezq] != '\0'; soezq++)
	{
		if(dqmkp[soezq] == 'x' || dqmkp[soezq] == 'y' || dqmkp[soezq] == 'q' || dqmkp[soezq] == 'X' || dqmkp[soezq] == 'Y' || dqmkp[soezq] == 'Q' )
		{
			for(int joftl = soezq; dqmkp[joftl] != '\0'; joftl++)
			{
				dqmkp[joftl] = dqmkp[joftl+1];
			}
			soezq = soezq -1;
		}
	}
}
void bkqjz (char* dqmkp)
{
	int wlyci = 0;
	while(dqmkp[wlyci] != '\0')
	{
	wlyci++;
	}
	char cvgfi[wlyci]; 
	for(int ggytg = 0; ggytg < wlyci; ggytg++)
	{
		if(ggytg % 3 == 0)
		{
			cvgfi[ggytg] = dqmkp[ggytg];
		}
		else cvgfi[ggytg] = 0;
	}
	int rltxo =0;
	for(int soezq = 0; soezq < wlyci; soezq++)
	{
		if(cvgfi[soezq] != 0)
		{
			dqmkp[rltxo] = cvgfi[soezq];
			rltxo++;
		}
	}
	dqmkp[rltxo] = '\0';
}
int main(int tvktg, char* argv[])
{
	int wlyci = 0;
	for(int joftl=1; joftl < tvktg; joftl++)
	{
		for(int soezq = 0; argv[joftl][soezq] != '\0'; soezq++)
		{
			wlyci++;		
		}				
	}
	char dqmkp[wlyci+1];
	dqmkp[wlyci] = '\0';
	int rltxo = 0;
	for(int joftl=1; joftl < tvktg; joftl++)
	{
		for(int soezq = 0; argv[joftl][soezq] != '\0'; soezq++)
		{
			dqmkp[rltxo] = argv[joftl][soezq];
			rltxo++;
		}
	}
	thyov(dqmkp);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&dqmkp[0]);
	bkqjz(dqmkp);
	printf(""Der neue String lautet: %s \n"",&dqmkp[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void lotyc (char* enyjz)
{
	for(int jxunz = 0; enyjz[jxunz] != '\0'; jxunz++)
	{
		if(enyjz[jxunz] == 'x' || enyjz[jxunz] == 'y' || enyjz[jxunz] == 'q' || enyjz[jxunz] == 'X' || enyjz[jxunz] == 'Y' || enyjz[jxunz] == 'Q' )
		{
			for(int gqkhy = jxunz; enyjz[gqkhy] != '\0'; gqkhy++)
			{
				enyjz[gqkhy] = enyjz[gqkhy+1];
			}
			jxunz = jxunz -1;
		}
	}
}
void uelih (char* enyjz)
{
	int abrlm = 0;
	while(enyjz[abrlm] != '\0')
	{
	abrlm++;
	}
	char prkuu[abrlm]; 
	for(int fusip = 0; fusip < abrlm; fusip++)
	{
		if(fusip % 3 == 0)
		{
			prkuu[fusip] = enyjz[fusip];
		}
		else prkuu[fusip] = 0;
	}
	int pvtzn =0;
	for(int jxunz = 0; jxunz < abrlm; jxunz++)
	{
		if(prkuu[jxunz] != 0)
		{
			enyjz[pvtzn] = prkuu[jxunz];
			pvtzn++;
		}
	}
	enyjz[pvtzn] = '\0';
}
int main(int mjuwn, char* argv[])
{
	int abrlm = 0;
	for(int gqkhy=1; gqkhy < mjuwn; gqkhy++)
	{
		for(int jxunz = 0; argv[gqkhy][jxunz] != '\0'; jxunz++)
		{
			abrlm++;		
		}				
	}
	char enyjz[abrlm+1];
	enyjz[abrlm] = '\0';
	int pvtzn = 0;
	for(int gqkhy=1; gqkhy < mjuwn; gqkhy++)
	{
		for(int jxunz = 0; argv[gqkhy][jxunz] != '\0'; jxunz++)
		{
			enyjz[pvtzn] = argv[gqkhy][jxunz];
			pvtzn++;
		}
	}
	lotyc(enyjz);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&enyjz[0]);
	uelih(enyjz);
	printf(""Der neue String lautet: %s \n"",&enyjz[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void mpfia (char* kjobp)
{
	for(int xjtnc = 0; kjobp[xjtnc] != '\0'; xjtnc++)
	{
		if(kjobp[xjtnc] == 'x' || kjobp[xjtnc] == 'y' || kjobp[xjtnc] == 'q' || kjobp[xjtnc] == 'X' || kjobp[xjtnc] == 'Y' || kjobp[xjtnc] == 'Q' )
		{
			for(int uusdz = xjtnc; kjobp[uusdz] != '\0'; uusdz++)
			{
				kjobp[uusdz] = kjobp[uusdz+1];
			}
			xjtnc = xjtnc -1;
		}
	}
}
void qusgm (char* kjobp)
{
	int oipgz = 0;
	while(kjobp[oipgz] != '\0')
	{
	oipgz++;
	}
	char jqrar[oipgz]; 
	for(int syshp = 0; syshp < oipgz; syshp++)
	{
		if(syshp % 3 == 0)
		{
			jqrar[syshp] = kjobp[syshp];
		}
		else jqrar[syshp] = 0;
	}
	int yqlqw =0;
	for(int xjtnc = 0; xjtnc < oipgz; xjtnc++)
	{
		if(jqrar[xjtnc] != 0)
		{
			kjobp[yqlqw] = jqrar[xjtnc];
			yqlqw++;
		}
	}
	kjobp[yqlqw] = '\0';
}
int main(int brzom, char* argv[])
{
	int oipgz = 0;
	for(int uusdz=1; uusdz < brzom; uusdz++)
	{
		for(int xjtnc = 0; argv[uusdz][xjtnc] != '\0'; xjtnc++)
		{
			oipgz++;		
		}				
	}
	char kjobp[oipgz+1];
	kjobp[oipgz] = '\0';
	int yqlqw = 0;
	for(int uusdz=1; uusdz < brzom; uusdz++)
	{
		for(int xjtnc = 0; argv[uusdz][xjtnc] != '\0'; xjtnc++)
		{
			kjobp[yqlqw] = argv[uusdz][xjtnc];
			yqlqw++;
		}
	}
	mpfia(kjobp);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&kjobp[0]);
	qusgm(kjobp);
	printf(""Der neue String lautet: %s \n"",&kjobp[0]);
}",1
0,WS2021,9,Antwort 10,C,VName_189,Name_189,"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void btpvo (char* izcyo)
{
	for(int hiekx = 0; izcyo[hiekx] != '\0'; hiekx++)
	{
		if(izcyo[hiekx] == 'x' || izcyo[hiekx] == 'y' || izcyo[hiekx] == 'q' || izcyo[hiekx] == 'X' || izcyo[hiekx] == 'Y' || izcyo[hiekx] == 'Q' )
		{
			for(int lefnr = hiekx; izcyo[lefnr] != '\0'; lefnr++)
			{
				izcyo[lefnr] = izcyo[lefnr+1];
			}
			hiekx = hiekx -1;
		}
	}
}
void ubaay (char* izcyo)
{
	int obprh = 0;
	while(izcyo[obprh] != '\0')
	{
	obprh++;
	}
	char qweqz[obprh]; 
	for(int gkkul = 0; gkkul < obprh; gkkul++)
	{
		if(gkkul % 3 == 0)
		{
			qweqz[gkkul] = izcyo[gkkul];
		}
		else qweqz[gkkul] = 0;
	}
	int qsbbu =0;
	for(int hiekx = 0; hiekx < obprh; hiekx++)
	{
		if(qweqz[hiekx] != 0)
		{
			izcyo[qsbbu] = qweqz[hiekx];
			qsbbu++;
		}
	}
	izcyo[qsbbu] = '\0';
}
int main(int wldpv, char* argv[])
{
	int obprh = 0;
	for(int lefnr=1; lefnr < wldpv; lefnr++)
	{
		for(int hiekx = 0; argv[lefnr][hiekx] != '\0'; hiekx++)
		{
			obprh++;		
		}				
	}
	char izcyo[obprh+1];
	izcyo[obprh] = '\0';
	int qsbbu = 0;
	for(int lefnr=1; lefnr < wldpv; lefnr++)
	{
		for(int hiekx = 0; argv[lefnr][hiekx] != '\0'; hiekx++)
		{
			izcyo[qsbbu] = argv[lefnr][hiekx];
			qsbbu++;
		}
	}
	btpvo(izcyo);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&izcyo[0]);
	ubaay(izcyo);
	printf(""Der neue String lautet: %s \n"",&izcyo[0]);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int rvtgp, char** argv)
{
    char hgmvg[100] = ""lasse roland max ivo"";
    char raatt[100];
    char ruyfv[100];
    int etece = 0;
    int chyzn = 0;
    int qdylz = 1;
    int zerhw;
    for ( zerhw = 0; *(argv+zerhw) != '\0'; zerhw++)
    {
        if (*(argv+zerhw) == ' ' || *(argv+zerhw) == 'x' || *(argv+zerhw) == 'y' || *(argv+zerhw) == 'q'|| *(argv+zerhw) == 'X'|| *(argv+zerhw) == 'Y'|| *(argv+zerhw) == 'Q')
            qdylz++;
            continue;
        raatt[etece++] = *(argv+zerhw);
    }
    raatt[etece] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", raatt );
    for ( zerhw = 0; raatt[zerhw] != '\0'; zerhw++)
    {
        if (zerhw == 0 || zerhw % 3 == 0)
        ruyfv[chyzn++] = raatt[zerhw];
        continue;
    }
    ruyfv[chyzn] = 0;
    printf( ""Der neue String lautet: %s \n"", ruyfv);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int dfkxa, char** argv)
{
    char goopd[100] = ""lasse roland max ivo"";
    char qoksc[100];
    char pvhak[100];
    int qtcwq = 0;
    int iirfn = 0;
    int svhsl = 1;
    int jioca;
    for ( jioca = 0; *(argv+jioca) != '\0'; jioca++)
    {
        if (*(argv+jioca) == ' ' || *(argv+jioca) == 'x' || *(argv+jioca) == 'y' || *(argv+jioca) == 'q'|| *(argv+jioca) == 'X'|| *(argv+jioca) == 'Y'|| *(argv+jioca) == 'Q')
            svhsl++;
            continue;
        qoksc[qtcwq++] = *(argv+jioca);
    }
    qoksc[qtcwq] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", qoksc );
    for ( jioca = 0; qoksc[jioca] != '\0'; jioca++)
    {
        if (jioca == 0 || jioca % 3 == 0)
        pvhak[iirfn++] = qoksc[jioca];
        continue;
    }
    pvhak[iirfn] = 0;
    printf( ""Der neue String lautet: %s \n"", pvhak);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int cpixz, char** argv)
{
    char zhjlq[100] = ""lasse roland max ivo"";
    char jmbcr[100];
    char nrjhd[100];
    int ryhpt = 0;
    int qzqpc = 0;
    int kjpse = 1;
    int rtcux;
    for ( rtcux = 0; *(argv+rtcux) != '\0'; rtcux++)
    {
        if (*(argv+rtcux) == ' ' || *(argv+rtcux) == 'x' || *(argv+rtcux) == 'y' || *(argv+rtcux) == 'q'|| *(argv+rtcux) == 'X'|| *(argv+rtcux) == 'Y'|| *(argv+rtcux) == 'Q')
            kjpse++;
            continue;
        jmbcr[ryhpt++] = *(argv+rtcux);
    }
    jmbcr[ryhpt] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", jmbcr );
    for ( rtcux = 0; jmbcr[rtcux] != '\0'; rtcux++)
    {
        if (rtcux == 0 || rtcux % 3 == 0)
        nrjhd[qzqpc++] = jmbcr[rtcux];
        continue;
    }
    nrjhd[qzqpc] = 0;
    printf( ""Der neue String lautet: %s \n"", nrjhd);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int eaeob, char** argv)
{
    char gfpmr[100] = ""lasse roland max ivo"";
    char oezrn[100];
    char cqcgn[100];
    int afphx = 0;
    int sshsz = 0;
    int guzjt = 1;
    int jmmho;
    for ( jmmho = 0; *(argv+jmmho) != '\0'; jmmho++)
    {
        if (*(argv+jmmho) == ' ' || *(argv+jmmho) == 'x' || *(argv+jmmho) == 'y' || *(argv+jmmho) == 'q'|| *(argv+jmmho) == 'X'|| *(argv+jmmho) == 'Y'|| *(argv+jmmho) == 'Q')
            guzjt++;
            continue;
        oezrn[afphx++] = *(argv+jmmho);
    }
    oezrn[afphx] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", oezrn );
    for ( jmmho = 0; oezrn[jmmho] != '\0'; jmmho++)
    {
        if (jmmho == 0 || jmmho % 3 == 0)
        cqcgn[sshsz++] = oezrn[jmmho];
        continue;
    }
    cqcgn[sshsz] = 0;
    printf( ""Der neue String lautet: %s \n"", cqcgn);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int tphku, char** argv)
{
    char alsvp[100] = ""lasse roland max ivo"";
    char dhxgr[100];
    char hypsh[100];
    int wobbc = 0;
    int mkbft = 0;
    int ktniu = 1;
    int xgabd;
    for ( xgabd = 0; *(argv+xgabd) != '\0'; xgabd++)
    {
        if (*(argv+xgabd) == ' ' || *(argv+xgabd) == 'x' || *(argv+xgabd) == 'y' || *(argv+xgabd) == 'q'|| *(argv+xgabd) == 'X'|| *(argv+xgabd) == 'Y'|| *(argv+xgabd) == 'Q')
            ktniu++;
            continue;
        dhxgr[wobbc++] = *(argv+xgabd);
    }
    dhxgr[wobbc] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", dhxgr );
    for ( xgabd = 0; dhxgr[xgabd] != '\0'; xgabd++)
    {
        if (xgabd == 0 || xgabd % 3 == 0)
        hypsh[mkbft++] = dhxgr[xgabd];
        continue;
    }
    hypsh[mkbft] = 0;
    printf( ""Der neue String lautet: %s \n"", hypsh);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int pujyd, char** argv)
{
    char qpgrf[100] = ""lasse roland max ivo"";
    char snpgx[100];
    char bndkk[100];
    int igtoo = 0;
    int bkpmk = 0;
    int mibiq = 1;
    int raodh;
    for ( raodh = 0; *(argv+raodh) != '\0'; raodh++)
    {
        if (*(argv+raodh) == ' ' || *(argv+raodh) == 'x' || *(argv+raodh) == 'y' || *(argv+raodh) == 'q'|| *(argv+raodh) == 'X'|| *(argv+raodh) == 'Y'|| *(argv+raodh) == 'Q')
            mibiq++;
            continue;
        snpgx[igtoo++] = *(argv+raodh);
    }
    snpgx[igtoo] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", snpgx );
    for ( raodh = 0; snpgx[raodh] != '\0'; raodh++)
    {
        if (raodh == 0 || raodh % 3 == 0)
        bndkk[bkpmk++] = snpgx[raodh];
        continue;
    }
    bndkk[bkpmk] = 0;
    printf( ""Der neue String lautet: %s \n"", bndkk);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int ulons, char** argv)
{
    char xhrzg[100] = ""lasse roland max ivo"";
    char jpuxu[100];
    char cbqfr[100];
    int wstml = 0;
    int taknn = 0;
    int lvthu = 1;
    int zydpg;
    for ( zydpg = 0; *(argv+zydpg) != '\0'; zydpg++)
    {
        if (*(argv+zydpg) == ' ' || *(argv+zydpg) == 'x' || *(argv+zydpg) == 'y' || *(argv+zydpg) == 'q'|| *(argv+zydpg) == 'X'|| *(argv+zydpg) == 'Y'|| *(argv+zydpg) == 'Q')
            lvthu++;
            continue;
        jpuxu[wstml++] = *(argv+zydpg);
    }
    jpuxu[wstml] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", jpuxu );
    for ( zydpg = 0; jpuxu[zydpg] != '\0'; zydpg++)
    {
        if (zydpg == 0 || zydpg % 3 == 0)
        cbqfr[taknn++] = jpuxu[zydpg];
        continue;
    }
    cbqfr[taknn] = 0;
    printf( ""Der neue String lautet: %s \n"", cbqfr);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int obkfo, char** argv)
{
    char ptskz[100] = ""lasse roland max ivo"";
    char dqlxy[100];
    char owqyk[100];
    int pizze = 0;
    int vgakz = 0;
    int lkjuj = 1;
    int mzkmr;
    for ( mzkmr = 0; *(argv+mzkmr) != '\0'; mzkmr++)
    {
        if (*(argv+mzkmr) == ' ' || *(argv+mzkmr) == 'x' || *(argv+mzkmr) == 'y' || *(argv+mzkmr) == 'q'|| *(argv+mzkmr) == 'X'|| *(argv+mzkmr) == 'Y'|| *(argv+mzkmr) == 'Q')
            lkjuj++;
            continue;
        dqlxy[pizze++] = *(argv+mzkmr);
    }
    dqlxy[pizze] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", dqlxy );
    for ( mzkmr = 0; dqlxy[mzkmr] != '\0'; mzkmr++)
    {
        if (mzkmr == 0 || mzkmr % 3 == 0)
        owqyk[vgakz++] = dqlxy[mzkmr];
        continue;
    }
    owqyk[vgakz] = 0;
    printf( ""Der neue String lautet: %s \n"", owqyk);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int jyhub, char** argv)
{
    char yidco[100] = ""lasse roland max ivo"";
    char qqxls[100];
    char tddrk[100];
    int aylwj = 0;
    int qcmhy = 0;
    int pxkrj = 1;
    int ahjtu;
    for ( ahjtu = 0; *(argv+ahjtu) != '\0'; ahjtu++)
    {
        if (*(argv+ahjtu) == ' ' || *(argv+ahjtu) == 'x' || *(argv+ahjtu) == 'y' || *(argv+ahjtu) == 'q'|| *(argv+ahjtu) == 'X'|| *(argv+ahjtu) == 'Y'|| *(argv+ahjtu) == 'Q')
            pxkrj++;
            continue;
        qqxls[aylwj++] = *(argv+ahjtu);
    }
    qqxls[aylwj] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", qqxls );
    for ( ahjtu = 0; qqxls[ahjtu] != '\0'; ahjtu++)
    {
        if (ahjtu == 0 || ahjtu % 3 == 0)
        tddrk[qcmhy++] = qqxls[ahjtu];
        continue;
    }
    tddrk[qcmhy] = 0;
    printf( ""Der neue String lautet: %s \n"", tddrk);
}",1
20,WS2021,9,Antwort 10,C,VName_209,Name_209,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int iexnn, char** argv)
{
    char yumbb[100] = ""lasse roland max ivo"";
    char xqhph[100];
    char nkacm[100];
    int qsdhq = 0;
    int btphs = 0;
    int dbklh = 1;
    int zakae;
    for ( zakae = 0; *(argv+zakae) != '\0'; zakae++)
    {
        if (*(argv+zakae) == ' ' || *(argv+zakae) == 'x' || *(argv+zakae) == 'y' || *(argv+zakae) == 'q'|| *(argv+zakae) == 'X'|| *(argv+zakae) == 'Y'|| *(argv+zakae) == 'Q')
            dbklh++;
            continue;
        xqhph[qsdhq++] = *(argv+zakae);
    }
    xqhph[qsdhq] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", xqhph );
    for ( zakae = 0; xqhph[zakae] != '\0'; zakae++)
    {
        if (zakae == 0 || zakae % 3 == 0)
        nkacm[btphs++] = xqhph[zakae];
        continue;
    }
    nkacm[btphs] = 0;
    printf( ""Der neue String lautet: %s \n"", nkacm);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char jlauk (char pxgsz)
{if (pxgsz=='x'||pxgsz=='y'||pxgsz=='q'||
     pxgsz=='X'||pxgsz=='Y'||pxgsz=='Q')
    kgrlz 1;
else kgrlz 0;
}
void gwtjl (char*src)
{char eibtd[100]="""";
 int nacpf=0;
 while (src[nacpf]!='\0')
    {eibtd[nacpf]=src[nacpf];nacpf++;}
    eibtd[nacpf]='\0';
    nacpf=0;
int sqook=0;
while (eibtd[nacpf]!='\0')
    {if (nacpf%3!=0)
        {nacpf++;}
    else 
        {src[sqook]=eibtd[nacpf];
         nacpf++;
         sqook++;}
    }
src[sqook]='\0';
}
int main (int msqbz,char*argv[])
{char kecsh[100]="""";
int edmkx=1;
int xnjhr=0;
int tedqc=0;
while (edmkx!=msqbz)
    {while (argv[edmkx][tedqc]!='\0')
        {if (jlauk(argv[edmkx][tedqc])) 
         tedqc++;
         else
         {kecsh[xnjhr]=argv[edmkx][tedqc];
          xnjhr++;
          tedqc++;}}
    edmkx++;tedqc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",kecsh);
gwtjl(kecsh);
printf (""Der neue String lautet: %s\n"",kecsh);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char yopso (char zuuyz)
{if (zuuyz=='x'||zuuyz=='y'||zuuyz=='q'||
     zuuyz=='X'||zuuyz=='Y'||zuuyz=='Q')
    huhkq 1;
else huhkq 0;
}
void ayuhv (char*src)
{char ggsod[100]="""";
 int itgqy=0;
 while (src[itgqy]!='\0')
    {ggsod[itgqy]=src[itgqy];itgqy++;}
    ggsod[itgqy]='\0';
    itgqy=0;
int jcfam=0;
while (ggsod[itgqy]!='\0')
    {if (itgqy%3!=0)
        {itgqy++;}
    else 
        {src[jcfam]=ggsod[itgqy];
         itgqy++;
         jcfam++;}
    }
src[jcfam]='\0';
}
int main (int niuxs,char*argv[])
{char cdxcj[100]="""";
int zjrni=1;
int lebmz=0;
int pxccc=0;
while (zjrni!=niuxs)
    {while (argv[zjrni][pxccc]!='\0')
        {if (yopso(argv[zjrni][pxccc])) 
         pxccc++;
         else
         {cdxcj[lebmz]=argv[zjrni][pxccc];
          lebmz++;
          pxccc++;}}
    zjrni++;pxccc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",cdxcj);
ayuhv(cdxcj);
printf (""Der neue String lautet: %s\n"",cdxcj);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char dwqyb (char hotbx)
{if (hotbx=='x'||hotbx=='y'||hotbx=='q'||
     hotbx=='X'||hotbx=='Y'||hotbx=='Q')
    wqvsq 1;
else wqvsq 0;
}
void qxkbh (char*src)
{char hppss[100]="""";
 int vvahd=0;
 while (src[vvahd]!='\0')
    {hppss[vvahd]=src[vvahd];vvahd++;}
    hppss[vvahd]='\0';
    vvahd=0;
int scanb=0;
while (hppss[vvahd]!='\0')
    {if (vvahd%3!=0)
        {vvahd++;}
    else 
        {src[scanb]=hppss[vvahd];
         vvahd++;
         scanb++;}
    }
src[scanb]='\0';
}
int main (int sushi,char*argv[])
{char lmnbm[100]="""";
int snhml=1;
int xtpzx=0;
int wpkxt=0;
while (snhml!=sushi)
    {while (argv[snhml][wpkxt]!='\0')
        {if (dwqyb(argv[snhml][wpkxt])) 
         wpkxt++;
         else
         {lmnbm[xtpzx]=argv[snhml][wpkxt];
          xtpzx++;
          wpkxt++;}}
    snhml++;wpkxt=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",lmnbm);
qxkbh(lmnbm);
printf (""Der neue String lautet: %s\n"",lmnbm);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char bshqo (char qreqg)
{if (qreqg=='x'||qreqg=='y'||qreqg=='q'||
     qreqg=='X'||qreqg=='Y'||qreqg=='Q')
    gjahb 1;
else gjahb 0;
}
void qywem (char*src)
{char ddknh[100]="""";
 int ongct=0;
 while (src[ongct]!='\0')
    {ddknh[ongct]=src[ongct];ongct++;}
    ddknh[ongct]='\0';
    ongct=0;
int hckkw=0;
while (ddknh[ongct]!='\0')
    {if (ongct%3!=0)
        {ongct++;}
    else 
        {src[hckkw]=ddknh[ongct];
         ongct++;
         hckkw++;}
    }
src[hckkw]='\0';
}
int main (int pqvlq,char*argv[])
{char ndfit[100]="""";
int ndshi=1;
int zcvpg=0;
int erdzh=0;
while (ndshi!=pqvlq)
    {while (argv[ndshi][erdzh]!='\0')
        {if (bshqo(argv[ndshi][erdzh])) 
         erdzh++;
         else
         {ndfit[zcvpg]=argv[ndshi][erdzh];
          zcvpg++;
          erdzh++;}}
    ndshi++;erdzh=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",ndfit);
qywem(ndfit);
printf (""Der neue String lautet: %s\n"",ndfit);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char jevmf (char xabuz)
{if (xabuz=='x'||xabuz=='y'||xabuz=='q'||
     xabuz=='X'||xabuz=='Y'||xabuz=='Q')
    ezbki 1;
else ezbki 0;
}
void ylajn (char*src)
{char evbxw[100]="""";
 int ejwkv=0;
 while (src[ejwkv]!='\0')
    {evbxw[ejwkv]=src[ejwkv];ejwkv++;}
    evbxw[ejwkv]='\0';
    ejwkv=0;
int nffwf=0;
while (evbxw[ejwkv]!='\0')
    {if (ejwkv%3!=0)
        {ejwkv++;}
    else 
        {src[nffwf]=evbxw[ejwkv];
         ejwkv++;
         nffwf++;}
    }
src[nffwf]='\0';
}
int main (int sdsvn,char*argv[])
{char ppufs[100]="""";
int jbfbn=1;
int qpdnx=0;
int cegyu=0;
while (jbfbn!=sdsvn)
    {while (argv[jbfbn][cegyu]!='\0')
        {if (jevmf(argv[jbfbn][cegyu])) 
         cegyu++;
         else
         {ppufs[qpdnx]=argv[jbfbn][cegyu];
          qpdnx++;
          cegyu++;}}
    jbfbn++;cegyu=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",ppufs);
ylajn(ppufs);
printf (""Der neue String lautet: %s\n"",ppufs);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char yzphe (char klxoy)
{if (klxoy=='x'||klxoy=='y'||klxoy=='q'||
     klxoy=='X'||klxoy=='Y'||klxoy=='Q')
    rufkf 1;
else rufkf 0;
}
void kcqwb (char*src)
{char cucst[100]="""";
 int ejeig=0;
 while (src[ejeig]!='\0')
    {cucst[ejeig]=src[ejeig];ejeig++;}
    cucst[ejeig]='\0';
    ejeig=0;
int vjarh=0;
while (cucst[ejeig]!='\0')
    {if (ejeig%3!=0)
        {ejeig++;}
    else 
        {src[vjarh]=cucst[ejeig];
         ejeig++;
         vjarh++;}
    }
src[vjarh]='\0';
}
int main (int gkvut,char*argv[])
{char evkhd[100]="""";
int rvuxl=1;
int ognuw=0;
int xlnjq=0;
while (rvuxl!=gkvut)
    {while (argv[rvuxl][xlnjq]!='\0')
        {if (yzphe(argv[rvuxl][xlnjq])) 
         xlnjq++;
         else
         {evkhd[ognuw]=argv[rvuxl][xlnjq];
          ognuw++;
          xlnjq++;}}
    rvuxl++;xlnjq=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",evkhd);
kcqwb(evkhd);
printf (""Der neue String lautet: %s\n"",evkhd);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char isbcs (char rnvyr)
{if (rnvyr=='x'||rnvyr=='y'||rnvyr=='q'||
     rnvyr=='X'||rnvyr=='Y'||rnvyr=='Q')
    nksfx 1;
else nksfx 0;
}
void frprv (char*src)
{char mtvnl[100]="""";
 int lnekv=0;
 while (src[lnekv]!='\0')
    {mtvnl[lnekv]=src[lnekv];lnekv++;}
    mtvnl[lnekv]='\0';
    lnekv=0;
int xvjhi=0;
while (mtvnl[lnekv]!='\0')
    {if (lnekv%3!=0)
        {lnekv++;}
    else 
        {src[xvjhi]=mtvnl[lnekv];
         lnekv++;
         xvjhi++;}
    }
src[xvjhi]='\0';
}
int main (int jdihu,char*argv[])
{char lsjlb[100]="""";
int bsicg=1;
int zqcsm=0;
int czgja=0;
while (bsicg!=jdihu)
    {while (argv[bsicg][czgja]!='\0')
        {if (isbcs(argv[bsicg][czgja])) 
         czgja++;
         else
         {lsjlb[zqcsm]=argv[bsicg][czgja];
          zqcsm++;
          czgja++;}}
    bsicg++;czgja=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",lsjlb);
frprv(lsjlb);
printf (""Der neue String lautet: %s\n"",lsjlb);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char akdac (char xtacs)
{if (xtacs=='x'||xtacs=='y'||xtacs=='q'||
     xtacs=='X'||xtacs=='Y'||xtacs=='Q')
    cvpem 1;
else cvpem 0;
}
void qqymm (char*src)
{char eefpt[100]="""";
 int bcaxb=0;
 while (src[bcaxb]!='\0')
    {eefpt[bcaxb]=src[bcaxb];bcaxb++;}
    eefpt[bcaxb]='\0';
    bcaxb=0;
int jjvex=0;
while (eefpt[bcaxb]!='\0')
    {if (bcaxb%3!=0)
        {bcaxb++;}
    else 
        {src[jjvex]=eefpt[bcaxb];
         bcaxb++;
         jjvex++;}
    }
src[jjvex]='\0';
}
int main (int aegvs,char*argv[])
{char zfiyd[100]="""";
int vyjtr=1;
int rggec=0;
int ttiza=0;
while (vyjtr!=aegvs)
    {while (argv[vyjtr][ttiza]!='\0')
        {if (akdac(argv[vyjtr][ttiza])) 
         ttiza++;
         else
         {zfiyd[rggec]=argv[vyjtr][ttiza];
          rggec++;
          ttiza++;}}
    vyjtr++;ttiza=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",zfiyd);
qqymm(zfiyd);
printf (""Der neue String lautet: %s\n"",zfiyd);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char lrdfu (char kqhev)
{if (kqhev=='x'||kqhev=='y'||kqhev=='q'||
     kqhev=='X'||kqhev=='Y'||kqhev=='Q')
    doeir 1;
else doeir 0;
}
void jfvtt (char*src)
{char mcqwr[100]="""";
 int uptaa=0;
 while (src[uptaa]!='\0')
    {mcqwr[uptaa]=src[uptaa];uptaa++;}
    mcqwr[uptaa]='\0';
    uptaa=0;
int axlqf=0;
while (mcqwr[uptaa]!='\0')
    {if (uptaa%3!=0)
        {uptaa++;}
    else 
        {src[axlqf]=mcqwr[uptaa];
         uptaa++;
         axlqf++;}
    }
src[axlqf]='\0';
}
int main (int wcnjz,char*argv[])
{char dedpv[100]="""";
int rcylo=1;
int gfpth=0;
int uawdk=0;
while (rcylo!=wcnjz)
    {while (argv[rcylo][uawdk]!='\0')
        {if (lrdfu(argv[rcylo][uawdk])) 
         uawdk++;
         else
         {dedpv[gfpth]=argv[rcylo][uawdk];
          gfpth++;
          uawdk++;}}
    rcylo++;uawdk=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",dedpv);
jfvtt(dedpv);
printf (""Der neue String lautet: %s\n"",dedpv);
}",1
39,WS2021,9,Antwort 10,C,VName_190,Name_190,"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char bbyic (char kyfmv)
{if (kyfmv=='x'||kyfmv=='y'||kyfmv=='q'||
     kyfmv=='X'||kyfmv=='Y'||kyfmv=='Q')
    cvorz 1;
else cvorz 0;
}
void dkilu (char*src)
{char hzvmc[100]="""";
 int gywou=0;
 while (src[gywou]!='\0')
    {hzvmc[gywou]=src[gywou];gywou++;}
    hzvmc[gywou]='\0';
    gywou=0;
int hauwu=0;
while (hzvmc[gywou]!='\0')
    {if (gywou%3!=0)
        {gywou++;}
    else 
        {src[hauwu]=hzvmc[gywou];
         gywou++;
         hauwu++;}
    }
src[hauwu]='\0';
}
int main (int hejep,char*argv[])
{char cfppo[100]="""";
int hthjx=1;
int gwdln=0;
int thsuz=0;
while (hthjx!=hejep)
    {while (argv[hthjx][thsuz]!='\0')
        {if (bbyic(argv[hthjx][thsuz])) 
         thsuz++;
         else
         {cfppo[gwdln]=argv[hthjx][thsuz];
          gwdln++;
          thsuz++;}}
    hthjx++;thsuz=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",cfppo);
dkilu(cfppo);
printf (""Der neue String lautet: %s\n"",cfppo);
}",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int zkapg(char *wytkk)
 int abuqo = 0; 
    while (wytkk[abuqo] != '\0')
      abuqo++;
  return abuqo; 
{  
  int rdqin = zkapg(src);
  int ncxqo = zkapg(dest);
 /*     char gtvph[rdqin]; 
    for (int abuqo = 0; abuqo <= rdqin-1; abuqo++) 
        gtvph [abuqo] = src[abuqo];
  for (int abuqo = 0; abuqo <= zahl-1; abuqo++)     if (abuqo <= ncxqo && abuqo <= rdqin) {
        
        *dest = gtvph[abuqo]; 
      }*/
  int abuqo = 1;
   while(*src && abuqo <= rdqin && abuqo <= ncxqo && abuqo <= zahl) {
    *dest++ = *src++;
    abuqo++;
 }
void ibkac(char* a, char* b){
    char dmreg = *a;
    *a = *b;
    *b = dmreg;
}
{
    if (!*str) 
        return;
    char* abuqo = str;
    char* j = abuqo + zkapg(str) - 1;
    while (abuqo < j) {
        ibkac(abuqo, j);
        abuqo++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int wechu(char *nzamr)
 int khzsx = 0; 
    while (nzamr[khzsx] != '\0')
      khzsx++;
  return khzsx; 
{  
  int uzfjb = wechu(src);
  int ntgez = wechu(dest);
 /*     char ejyfb[uzfjb]; 
    for (int khzsx = 0; khzsx <= uzfjb-1; khzsx++) 
        ejyfb [khzsx] = src[khzsx];
  for (int khzsx = 0; khzsx <= zahl-1; khzsx++)     if (khzsx <= ntgez && khzsx <= uzfjb) {
        
        *dest = ejyfb[khzsx]; 
      }*/
  int khzsx = 1;
   while(*src && khzsx <= uzfjb && khzsx <= ntgez && khzsx <= zahl) {
    *dest++ = *src++;
    khzsx++;
 }
void ibflt(char* a, char* b){
    char apvvt = *a;
    *a = *b;
    *b = apvvt;
}
{
    if (!*str) 
        return;
    char* khzsx = str;
    char* j = khzsx + wechu(str) - 1;
    while (khzsx < j) {
        ibflt(khzsx, j);
        khzsx++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int pfyim(char *yyeay)
 int hmpsa = 0; 
    while (yyeay[hmpsa] != '\0')
      hmpsa++;
  return hmpsa; 
{  
  int yfqak = pfyim(src);
  int ggdup = pfyim(dest);
 /*     char iaokl[yfqak]; 
    for (int hmpsa = 0; hmpsa <= yfqak-1; hmpsa++) 
        iaokl [hmpsa] = src[hmpsa];
  for (int hmpsa = 0; hmpsa <= zahl-1; hmpsa++)     if (hmpsa <= ggdup && hmpsa <= yfqak) {
        
        *dest = iaokl[hmpsa]; 
      }*/
  int hmpsa = 1;
   while(*src && hmpsa <= yfqak && hmpsa <= ggdup && hmpsa <= zahl) {
    *dest++ = *src++;
    hmpsa++;
 }
void oyhdt(char* a, char* b){
    char kgbhk = *a;
    *a = *b;
    *b = kgbhk;
}
{
    if (!*str) 
        return;
    char* hmpsa = str;
    char* j = hmpsa + pfyim(str) - 1;
    while (hmpsa < j) {
        oyhdt(hmpsa, j);
        hmpsa++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int btvil(char *lxwif)
 int khmku = 0; 
    while (lxwif[khmku] != '\0')
      khmku++;
  return khmku; 
{  
  int epsbo = btvil(src);
  int xekgi = btvil(dest);
 /*     char tflmx[epsbo]; 
    for (int khmku = 0; khmku <= epsbo-1; khmku++) 
        tflmx [khmku] = src[khmku];
  for (int khmku = 0; khmku <= zahl-1; khmku++)     if (khmku <= xekgi && khmku <= epsbo) {
        
        *dest = tflmx[khmku]; 
      }*/
  int khmku = 1;
   while(*src && khmku <= epsbo && khmku <= xekgi && khmku <= zahl) {
    *dest++ = *src++;
    khmku++;
 }
void addtd(char* a, char* b){
    char ttoev = *a;
    *a = *b;
    *b = ttoev;
}
{
    if (!*str) 
        return;
    char* khmku = str;
    char* j = khmku + btvil(str) - 1;
    while (khmku < j) {
        addtd(khmku, j);
        khmku++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int sgypu(char *wcaox)
 int gkwiu = 0; 
    while (wcaox[gkwiu] != '\0')
      gkwiu++;
  return gkwiu; 
{  
  int bjpzo = sgypu(src);
  int qmwpj = sgypu(dest);
 /*     char yhchf[bjpzo]; 
    for (int gkwiu = 0; gkwiu <= bjpzo-1; gkwiu++) 
        yhchf [gkwiu] = src[gkwiu];
  for (int gkwiu = 0; gkwiu <= zahl-1; gkwiu++)     if (gkwiu <= qmwpj && gkwiu <= bjpzo) {
        
        *dest = yhchf[gkwiu]; 
      }*/
  int gkwiu = 1;
   while(*src && gkwiu <= bjpzo && gkwiu <= qmwpj && gkwiu <= zahl) {
    *dest++ = *src++;
    gkwiu++;
 }
void iuujo(char* a, char* b){
    char tmuzd = *a;
    *a = *b;
    *b = tmuzd;
}
{
    if (!*str) 
        return;
    char* gkwiu = str;
    char* j = gkwiu + sgypu(str) - 1;
    while (gkwiu < j) {
        iuujo(gkwiu, j);
        gkwiu++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int ohssp(char *ifzit)
 int ppsyt = 0; 
    while (ifzit[ppsyt] != '\0')
      ppsyt++;
  return ppsyt; 
{  
  int anngp = ohssp(src);
  int ewmdm = ohssp(dest);
 /*     char kwazw[anngp]; 
    for (int ppsyt = 0; ppsyt <= anngp-1; ppsyt++) 
        kwazw [ppsyt] = src[ppsyt];
  for (int ppsyt = 0; ppsyt <= zahl-1; ppsyt++)     if (ppsyt <= ewmdm && ppsyt <= anngp) {
        
        *dest = kwazw[ppsyt]; 
      }*/
  int ppsyt = 1;
   while(*src && ppsyt <= anngp && ppsyt <= ewmdm && ppsyt <= zahl) {
    *dest++ = *src++;
    ppsyt++;
 }
void rjlgs(char* a, char* b){
    char recjx = *a;
    *a = *b;
    *b = recjx;
}
{
    if (!*str) 
        return;
    char* ppsyt = str;
    char* j = ppsyt + ohssp(str) - 1;
    while (ppsyt < j) {
        rjlgs(ppsyt, j);
        ppsyt++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int jfilh(char *oljxb)
 int fjwyr = 0; 
    while (oljxb[fjwyr] != '\0')
      fjwyr++;
  return fjwyr; 
{  
  int gxznw = jfilh(src);
  int tfssc = jfilh(dest);
 /*     char lgsrm[gxznw]; 
    for (int fjwyr = 0; fjwyr <= gxznw-1; fjwyr++) 
        lgsrm [fjwyr] = src[fjwyr];
  for (int fjwyr = 0; fjwyr <= zahl-1; fjwyr++)     if (fjwyr <= tfssc && fjwyr <= gxznw) {
        
        *dest = lgsrm[fjwyr]; 
      }*/
  int fjwyr = 1;
   while(*src && fjwyr <= gxznw && fjwyr <= tfssc && fjwyr <= zahl) {
    *dest++ = *src++;
    fjwyr++;
 }
void pdrhc(char* a, char* b){
    char jtbkg = *a;
    *a = *b;
    *b = jtbkg;
}
{
    if (!*str) 
        return;
    char* fjwyr = str;
    char* j = fjwyr + jfilh(str) - 1;
    while (fjwyr < j) {
        pdrhc(fjwyr, j);
        fjwyr++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int pqchb(char *xqbqp)
 int tihje = 0; 
    while (xqbqp[tihje] != '\0')
      tihje++;
  return tihje; 
{  
  int hxqta = pqchb(src);
  int pzmad = pqchb(dest);
 /*     char wboco[hxqta]; 
    for (int tihje = 0; tihje <= hxqta-1; tihje++) 
        wboco [tihje] = src[tihje];
  for (int tihje = 0; tihje <= zahl-1; tihje++)     if (tihje <= pzmad && tihje <= hxqta) {
        
        *dest = wboco[tihje]; 
      }*/
  int tihje = 1;
   while(*src && tihje <= hxqta && tihje <= pzmad && tihje <= zahl) {
    *dest++ = *src++;
    tihje++;
 }
void dpwlf(char* a, char* b){
    char vpohf = *a;
    *a = *b;
    *b = vpohf;
}
{
    if (!*str) 
        return;
    char* tihje = str;
    char* j = tihje + pqchb(str) - 1;
    while (tihje < j) {
        dpwlf(tihje, j);
        tihje++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int jainh(char *mgfes)
 int nlohy = 0; 
    while (mgfes[nlohy] != '\0')
      nlohy++;
  return nlohy; 
{  
  int wxqru = jainh(src);
  int vmbyl = jainh(dest);
 /*     char vgzkn[wxqru]; 
    for (int nlohy = 0; nlohy <= wxqru-1; nlohy++) 
        vgzkn [nlohy] = src[nlohy];
  for (int nlohy = 0; nlohy <= zahl-1; nlohy++)     if (nlohy <= vmbyl && nlohy <= wxqru) {
        
        *dest = vgzkn[nlohy]; 
      }*/
  int nlohy = 1;
   while(*src && nlohy <= wxqru && nlohy <= vmbyl && nlohy <= zahl) {
    *dest++ = *src++;
    nlohy++;
 }
void ysfmm(char* a, char* b){
    char qhdpw = *a;
    *a = *b;
    *b = qhdpw;
}
{
    if (!*str) 
        return;
    char* nlohy = str;
    char* j = nlohy + jainh(str) - 1;
    while (nlohy < j) {
        ysfmm(nlohy, j);
        nlohy++;
        j--;
    }
}
{  
      }",1
57,WS2021,9,Antwort 10,C,VName_198,Name_198,"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int pnyky(char *yufht)
 int osfkx = 0; 
    while (yufht[osfkx] != '\0')
      osfkx++;
  return osfkx; 
{  
  int hukie = pnyky(src);
  int dabbu = pnyky(dest);
 /*     char mneey[hukie]; 
    for (int osfkx = 0; osfkx <= hukie-1; osfkx++) 
        mneey [osfkx] = src[osfkx];
  for (int osfkx = 0; osfkx <= zahl-1; osfkx++)     if (osfkx <= dabbu && osfkx <= hukie) {
        
        *dest = mneey[osfkx]; 
      }*/
  int osfkx = 1;
   while(*src && osfkx <= hukie && osfkx <= dabbu && osfkx <= zahl) {
    *dest++ = *src++;
    osfkx++;
 }
void tztgq(char* a, char* b){
    char ksamp = *a;
    *a = *b;
    *b = ksamp;
}
{
    if (!*str) 
        return;
    char* osfkx = str;
    char* j = osfkx + pnyky(str) - 1;
    while (osfkx < j) {
        tztgq(osfkx, j);
        osfkx++;
        j--;
    }
}
{  
      }",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void fuwyt(char* str1){
	int fcraj;
	int txujz;
	for ( fcraj = 0,  txujz = 0;txujz<100; ++txujz){
	if ((str1[txujz] != 'x')&&(str1[txujz] != 'X')&&(str1[txujz] != 'y')&&(str1[txujz] != 'Y')&&(str1[txujz] != 'q')&&(str1[txujz] != 'Q'))
	str1[fcraj++] = str1[txujz];
	}
}
void tchxe(char* str1, char* str2){
	int txujz=0;
	for(;(str2[txujz])!=('\0');txujz++){}
	for (int fcraj=0;str1[fcraj]!='\0';fcraj++){
		str2[txujz+fcraj]=str1[fcraj];
	}	
;}
void upqam(char* str1,char* str2){
	for (int fcraj=0;str1[fcraj]!='\0';fcraj++){
		if((fcraj+3)%3==0)str2[((fcraj+3)/3)-1]=str1[fcraj];
	}
}
int main(int ehaqp,char** argv){
	if (ehaqp<2) return 0;
	char zusrn[100]="""";
	char qsuej[100]="""";
	for(int fcraj=1;fcraj<ehaqp;fcraj++) {
		tchxe(argv[fcraj],zusrn);}
		fuwyt(zusrn);
	upqam(zusrn,qsuej);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zusrn);
	printf(""Der neue String lautet: %s"",qsuej);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void ysggc(char* str1){
	int vjimh;
	int ouuoy;
	for ( vjimh = 0,  ouuoy = 0;ouuoy<100; ++ouuoy){
	if ((str1[ouuoy] != 'x')&&(str1[ouuoy] != 'X')&&(str1[ouuoy] != 'y')&&(str1[ouuoy] != 'Y')&&(str1[ouuoy] != 'q')&&(str1[ouuoy] != 'Q'))
	str1[vjimh++] = str1[ouuoy];
	}
}
void binit(char* str1, char* str2){
	int ouuoy=0;
	for(;(str2[ouuoy])!=('\0');ouuoy++){}
	for (int vjimh=0;str1[vjimh]!='\0';vjimh++){
		str2[ouuoy+vjimh]=str1[vjimh];
	}	
;}
void rlabl(char* str1,char* str2){
	for (int vjimh=0;str1[vjimh]!='\0';vjimh++){
		if((vjimh+3)%3==0)str2[((vjimh+3)/3)-1]=str1[vjimh];
	}
}
int main(int rgwwp,char** argv){
	if (rgwwp<2) return 0;
	char psuyt[100]="""";
	char svgjb[100]="""";
	for(int vjimh=1;vjimh<rgwwp;vjimh++) {
		binit(argv[vjimh],psuyt);}
		ysggc(psuyt);
	rlabl(psuyt,svgjb);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",psuyt);
	printf(""Der neue String lautet: %s"",svgjb);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void soxcx(char* str1){
	int gygrh;
	int uvbaw;
	for ( gygrh = 0,  uvbaw = 0;uvbaw<100; ++uvbaw){
	if ((str1[uvbaw] != 'x')&&(str1[uvbaw] != 'X')&&(str1[uvbaw] != 'y')&&(str1[uvbaw] != 'Y')&&(str1[uvbaw] != 'q')&&(str1[uvbaw] != 'Q'))
	str1[gygrh++] = str1[uvbaw];
	}
}
void rqouc(char* str1, char* str2){
	int uvbaw=0;
	for(;(str2[uvbaw])!=('\0');uvbaw++){}
	for (int gygrh=0;str1[gygrh]!='\0';gygrh++){
		str2[uvbaw+gygrh]=str1[gygrh];
	}	
;}
void kgldj(char* str1,char* str2){
	for (int gygrh=0;str1[gygrh]!='\0';gygrh++){
		if((gygrh+3)%3==0)str2[((gygrh+3)/3)-1]=str1[gygrh];
	}
}
int main(int ahyqm,char** argv){
	if (ahyqm<2) return 0;
	char bpojy[100]="""";
	char hpsmq[100]="""";
	for(int gygrh=1;gygrh<ahyqm;gygrh++) {
		rqouc(argv[gygrh],bpojy);}
		soxcx(bpojy);
	kgldj(bpojy,hpsmq);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",bpojy);
	printf(""Der neue String lautet: %s"",hpsmq);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void oabmj(char* str1){
	int zufrv;
	int arsmq;
	for ( zufrv = 0,  arsmq = 0;arsmq<100; ++arsmq){
	if ((str1[arsmq] != 'x')&&(str1[arsmq] != 'X')&&(str1[arsmq] != 'y')&&(str1[arsmq] != 'Y')&&(str1[arsmq] != 'q')&&(str1[arsmq] != 'Q'))
	str1[zufrv++] = str1[arsmq];
	}
}
void vknap(char* str1, char* str2){
	int arsmq=0;
	for(;(str2[arsmq])!=('\0');arsmq++){}
	for (int zufrv=0;str1[zufrv]!='\0';zufrv++){
		str2[arsmq+zufrv]=str1[zufrv];
	}	
;}
void vabgy(char* str1,char* str2){
	for (int zufrv=0;str1[zufrv]!='\0';zufrv++){
		if((zufrv+3)%3==0)str2[((zufrv+3)/3)-1]=str1[zufrv];
	}
}
int main(int zsrfh,char** argv){
	if (zsrfh<2) return 0;
	char fnivo[100]="""";
	char bioct[100]="""";
	for(int zufrv=1;zufrv<zsrfh;zufrv++) {
		vknap(argv[zufrv],fnivo);}
		oabmj(fnivo);
	vabgy(fnivo,bioct);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",fnivo);
	printf(""Der neue String lautet: %s"",bioct);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void bqsvs(char* str1){
	int ihmmy;
	int vgamd;
	for ( ihmmy = 0,  vgamd = 0;vgamd<100; ++vgamd){
	if ((str1[vgamd] != 'x')&&(str1[vgamd] != 'X')&&(str1[vgamd] != 'y')&&(str1[vgamd] != 'Y')&&(str1[vgamd] != 'q')&&(str1[vgamd] != 'Q'))
	str1[ihmmy++] = str1[vgamd];
	}
}
void dpely(char* str1, char* str2){
	int vgamd=0;
	for(;(str2[vgamd])!=('\0');vgamd++){}
	for (int ihmmy=0;str1[ihmmy]!='\0';ihmmy++){
		str2[vgamd+ihmmy]=str1[ihmmy];
	}	
;}
void dmlrt(char* str1,char* str2){
	for (int ihmmy=0;str1[ihmmy]!='\0';ihmmy++){
		if((ihmmy+3)%3==0)str2[((ihmmy+3)/3)-1]=str1[ihmmy];
	}
}
int main(int xrqoc,char** argv){
	if (xrqoc<2) return 0;
	char mgryu[100]="""";
	char kextd[100]="""";
	for(int ihmmy=1;ihmmy<xrqoc;ihmmy++) {
		dpely(argv[ihmmy],mgryu);}
		bqsvs(mgryu);
	dmlrt(mgryu,kextd);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",mgryu);
	printf(""Der neue String lautet: %s"",kextd);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void lwprg(char* str1){
	int aurmq;
	int xgdyn;
	for ( aurmq = 0,  xgdyn = 0;xgdyn<100; ++xgdyn){
	if ((str1[xgdyn] != 'x')&&(str1[xgdyn] != 'X')&&(str1[xgdyn] != 'y')&&(str1[xgdyn] != 'Y')&&(str1[xgdyn] != 'q')&&(str1[xgdyn] != 'Q'))
	str1[aurmq++] = str1[xgdyn];
	}
}
void hjplw(char* str1, char* str2){
	int xgdyn=0;
	for(;(str2[xgdyn])!=('\0');xgdyn++){}
	for (int aurmq=0;str1[aurmq]!='\0';aurmq++){
		str2[xgdyn+aurmq]=str1[aurmq];
	}	
;}
void lwtxj(char* str1,char* str2){
	for (int aurmq=0;str1[aurmq]!='\0';aurmq++){
		if((aurmq+3)%3==0)str2[((aurmq+3)/3)-1]=str1[aurmq];
	}
}
int main(int bsbda,char** argv){
	if (bsbda<2) return 0;
	char fppku[100]="""";
	char inktv[100]="""";
	for(int aurmq=1;aurmq<bsbda;aurmq++) {
		hjplw(argv[aurmq],fppku);}
		lwprg(fppku);
	lwtxj(fppku,inktv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",fppku);
	printf(""Der neue String lautet: %s"",inktv);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void rzxfy(char* str1){
	int akyvk;
	int njbkb;
	for ( akyvk = 0,  njbkb = 0;njbkb<100; ++njbkb){
	if ((str1[njbkb] != 'x')&&(str1[njbkb] != 'X')&&(str1[njbkb] != 'y')&&(str1[njbkb] != 'Y')&&(str1[njbkb] != 'q')&&(str1[njbkb] != 'Q'))
	str1[akyvk++] = str1[njbkb];
	}
}
void gavwx(char* str1, char* str2){
	int njbkb=0;
	for(;(str2[njbkb])!=('\0');njbkb++){}
	for (int akyvk=0;str1[akyvk]!='\0';akyvk++){
		str2[njbkb+akyvk]=str1[akyvk];
	}	
;}
void satwy(char* str1,char* str2){
	for (int akyvk=0;str1[akyvk]!='\0';akyvk++){
		if((akyvk+3)%3==0)str2[((akyvk+3)/3)-1]=str1[akyvk];
	}
}
int main(int kpyuw,char** argv){
	if (kpyuw<2) return 0;
	char mxcpp[100]="""";
	char dflsc[100]="""";
	for(int akyvk=1;akyvk<kpyuw;akyvk++) {
		gavwx(argv[akyvk],mxcpp);}
		rzxfy(mxcpp);
	satwy(mxcpp,dflsc);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",mxcpp);
	printf(""Der neue String lautet: %s"",dflsc);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void dzymu(char* str1){
	int xzhii;
	int urzur;
	for ( xzhii = 0,  urzur = 0;urzur<100; ++urzur){
	if ((str1[urzur] != 'x')&&(str1[urzur] != 'X')&&(str1[urzur] != 'y')&&(str1[urzur] != 'Y')&&(str1[urzur] != 'q')&&(str1[urzur] != 'Q'))
	str1[xzhii++] = str1[urzur];
	}
}
void aibsi(char* str1, char* str2){
	int urzur=0;
	for(;(str2[urzur])!=('\0');urzur++){}
	for (int xzhii=0;str1[xzhii]!='\0';xzhii++){
		str2[urzur+xzhii]=str1[xzhii];
	}	
;}
void ldynm(char* str1,char* str2){
	for (int xzhii=0;str1[xzhii]!='\0';xzhii++){
		if((xzhii+3)%3==0)str2[((xzhii+3)/3)-1]=str1[xzhii];
	}
}
int main(int inclj,char** argv){
	if (inclj<2) return 0;
	char lfads[100]="""";
	char ryrgk[100]="""";
	for(int xzhii=1;xzhii<inclj;xzhii++) {
		aibsi(argv[xzhii],lfads);}
		dzymu(lfads);
	ldynm(lfads,ryrgk);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",lfads);
	printf(""Der neue String lautet: %s"",ryrgk);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void etscd(char* str1){
	int gleqi;
	int uxbbi;
	for ( gleqi = 0,  uxbbi = 0;uxbbi<100; ++uxbbi){
	if ((str1[uxbbi] != 'x')&&(str1[uxbbi] != 'X')&&(str1[uxbbi] != 'y')&&(str1[uxbbi] != 'Y')&&(str1[uxbbi] != 'q')&&(str1[uxbbi] != 'Q'))
	str1[gleqi++] = str1[uxbbi];
	}
}
void prxez(char* str1, char* str2){
	int uxbbi=0;
	for(;(str2[uxbbi])!=('\0');uxbbi++){}
	for (int gleqi=0;str1[gleqi]!='\0';gleqi++){
		str2[uxbbi+gleqi]=str1[gleqi];
	}	
;}
void qemew(char* str1,char* str2){
	for (int gleqi=0;str1[gleqi]!='\0';gleqi++){
		if((gleqi+3)%3==0)str2[((gleqi+3)/3)-1]=str1[gleqi];
	}
}
int main(int okduj,char** argv){
	if (okduj<2) return 0;
	char qdqyw[100]="""";
	char tzocq[100]="""";
	for(int gleqi=1;gleqi<okduj;gleqi++) {
		prxez(argv[gleqi],qdqyw);}
		etscd(qdqyw);
	qemew(qdqyw,tzocq);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",qdqyw);
	printf(""Der neue String lautet: %s"",tzocq);
}",1
74,WS2021,9,Antwort 10,C,VName_212,Name_212,"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void dntdg(char* str1){
	int lbbhj;
	int gfkrt;
	for ( lbbhj = 0,  gfkrt = 0;gfkrt<100; ++gfkrt){
	if ((str1[gfkrt] != 'x')&&(str1[gfkrt] != 'X')&&(str1[gfkrt] != 'y')&&(str1[gfkrt] != 'Y')&&(str1[gfkrt] != 'q')&&(str1[gfkrt] != 'Q'))
	str1[lbbhj++] = str1[gfkrt];
	}
}
void gpjsv(char* str1, char* str2){
	int gfkrt=0;
	for(;(str2[gfkrt])!=('\0');gfkrt++){}
	for (int lbbhj=0;str1[lbbhj]!='\0';lbbhj++){
		str2[gfkrt+lbbhj]=str1[lbbhj];
	}	
;}
void conws(char* str1,char* str2){
	for (int lbbhj=0;str1[lbbhj]!='\0';lbbhj++){
		if((lbbhj+3)%3==0)str2[((lbbhj+3)/3)-1]=str1[lbbhj];
	}
}
int main(int qomyj,char** argv){
	if (qomyj<2) return 0;
	char xgery[100]="""";
	char fqscl[100]="""";
	for(int lbbhj=1;lbbhj<qomyj;lbbhj++) {
		gpjsv(argv[lbbhj],xgery);}
		dntdg(xgery);
	conws(xgery,fqscl);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",xgery);
	printf(""Der neue String lautet: %s"",fqscl);
}",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int hfvso=0; hfvso<zahl && *src!='\0' && *dest!='\0'; hfvso++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char jwymr[100] = """";
    char* ptemp = jwymr;
    for(int hfvso=0; str[hfvso]!=0; hfvso++)
        jwymr[hfvso] = str[hfvso]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int nvfgs=0; nvfgs<zahl && *src!='\0' && *dest!='\0'; nvfgs++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char oyftu[100] = """";
    char* ptemp = oyftu;
    for(int nvfgs=0; str[nvfgs]!=0; nvfgs++)
        oyftu[nvfgs] = str[nvfgs]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int ykrmo=0; ykrmo<zahl && *src!='\0' && *dest!='\0'; ykrmo++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char yidkm[100] = """";
    char* ptemp = yidkm;
    for(int ykrmo=0; str[ykrmo]!=0; ykrmo++)
        yidkm[ykrmo] = str[ykrmo]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int ltrep=0; ltrep<zahl && *src!='\0' && *dest!='\0'; ltrep++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char isoez[100] = """";
    char* ptemp = isoez;
    for(int ltrep=0; str[ltrep]!=0; ltrep++)
        isoez[ltrep] = str[ltrep]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int wcjvl=0; wcjvl<zahl && *src!='\0' && *dest!='\0'; wcjvl++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char ijdny[100] = """";
    char* ptemp = ijdny;
    for(int wcjvl=0; str[wcjvl]!=0; wcjvl++)
        ijdny[wcjvl] = str[wcjvl]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int zkoev=0; zkoev<zahl && *src!='\0' && *dest!='\0'; zkoev++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char gdxxs[100] = """";
    char* ptemp = gdxxs;
    for(int zkoev=0; str[zkoev]!=0; zkoev++)
        gdxxs[zkoev] = str[zkoev]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int jhxbi=0; jhxbi<zahl && *src!='\0' && *dest!='\0'; jhxbi++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char lvrea[100] = """";
    char* ptemp = lvrea;
    for(int jhxbi=0; str[jhxbi]!=0; jhxbi++)
        lvrea[jhxbi] = str[jhxbi]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int spedw=0; spedw<zahl && *src!='\0' && *dest!='\0'; spedw++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char myujt[100] = """";
    char* ptemp = myujt;
    for(int spedw=0; str[spedw]!=0; spedw++)
        myujt[spedw] = str[spedw]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int pfidl=0; pfidl<zahl && *src!='\0' && *dest!='\0'; pfidl++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char zlpwd[100] = """";
    char* ptemp = zlpwd;
    for(int pfidl=0; str[pfidl]!=0; pfidl++)
        zlpwd[pfidl] = str[pfidl]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
90,WS2021,9,Antwort 10,C,VName_211,Name_211,"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int jjzbz=0; jjzbz<zahl && *src!='\0' && *dest!='\0'; jjzbz++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char sljyf[100] = """";
    char* ptemp = sljyf;
    for(int jjzbz=0; str[jjzbz]!=0; jjzbz++)
        sljyf[jjzbz] = str[jjzbz]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int srnij = 0;
	while(srnij < zahl && dest[srnij] != '\0' && src[srnij] != '\0')		dest[srnij] = src[srnij];
		srnij ++;
{
	int jomju = 0;
	while(str[jomju] != '\0') jomju++;
	char xencb[jomju];
	for(int vtogw = 0; vtogw < jomju; vtogw++) xencb[vtogw] = str[vtogw];
	for(int vtogw = 0; vtogw < jomju; vtogw++){
		str[vtogw] = xencb[jomju - 1 - vtogw];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int eadav = 0;
	while(eadav < zahl && dest[eadav] != '\0' && src[eadav] != '\0')		dest[eadav] = src[eadav];
		eadav ++;
{
	int dxqgq = 0;
	while(str[dxqgq] != '\0') dxqgq++;
	char pprqj[dxqgq];
	for(int nlamy = 0; nlamy < dxqgq; nlamy++) pprqj[nlamy] = str[nlamy];
	for(int nlamy = 0; nlamy < dxqgq; nlamy++){
		str[nlamy] = pprqj[dxqgq - 1 - nlamy];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int kimsx = 0;
	while(kimsx < zahl && dest[kimsx] != '\0' && src[kimsx] != '\0')		dest[kimsx] = src[kimsx];
		kimsx ++;
{
	int ipkrx = 0;
	while(str[ipkrx] != '\0') ipkrx++;
	char afybs[ipkrx];
	for(int plwbz = 0; plwbz < ipkrx; plwbz++) afybs[plwbz] = str[plwbz];
	for(int plwbz = 0; plwbz < ipkrx; plwbz++){
		str[plwbz] = afybs[ipkrx - 1 - plwbz];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int avqot = 0;
	while(avqot < zahl && dest[avqot] != '\0' && src[avqot] != '\0')		dest[avqot] = src[avqot];
		avqot ++;
{
	int ddppq = 0;
	while(str[ddppq] != '\0') ddppq++;
	char grtcy[ddppq];
	for(int wubfb = 0; wubfb < ddppq; wubfb++) grtcy[wubfb] = str[wubfb];
	for(int wubfb = 0; wubfb < ddppq; wubfb++){
		str[wubfb] = grtcy[ddppq - 1 - wubfb];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int fuomb = 0;
	while(fuomb < zahl && dest[fuomb] != '\0' && src[fuomb] != '\0')		dest[fuomb] = src[fuomb];
		fuomb ++;
{
	int ulbvw = 0;
	while(str[ulbvw] != '\0') ulbvw++;
	char xgitl[ulbvw];
	for(int pitwj = 0; pitwj < ulbvw; pitwj++) xgitl[pitwj] = str[pitwj];
	for(int pitwj = 0; pitwj < ulbvw; pitwj++){
		str[pitwj] = xgitl[ulbvw - 1 - pitwj];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int talyb = 0;
	while(talyb < zahl && dest[talyb] != '\0' && src[talyb] != '\0')		dest[talyb] = src[talyb];
		talyb ++;
{
	int ylbzb = 0;
	while(str[ylbzb] != '\0') ylbzb++;
	char kkoxm[ylbzb];
	for(int cgmgf = 0; cgmgf < ylbzb; cgmgf++) kkoxm[cgmgf] = str[cgmgf];
	for(int cgmgf = 0; cgmgf < ylbzb; cgmgf++){
		str[cgmgf] = kkoxm[ylbzb - 1 - cgmgf];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int jtiiu = 0;
	while(jtiiu < zahl && dest[jtiiu] != '\0' && src[jtiiu] != '\0')		dest[jtiiu] = src[jtiiu];
		jtiiu ++;
{
	int jeaoa = 0;
	while(str[jeaoa] != '\0') jeaoa++;
	char padbm[jeaoa];
	for(int ifuue = 0; ifuue < jeaoa; ifuue++) padbm[ifuue] = str[ifuue];
	for(int ifuue = 0; ifuue < jeaoa; ifuue++){
		str[ifuue] = padbm[jeaoa - 1 - ifuue];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int lncun = 0;
	while(lncun < zahl && dest[lncun] != '\0' && src[lncun] != '\0')		dest[lncun] = src[lncun];
		lncun ++;
{
	int mwpte = 0;
	while(str[mwpte] != '\0') mwpte++;
	char cobfq[mwpte];
	for(int cxzcw = 0; cxzcw < mwpte; cxzcw++) cobfq[cxzcw] = str[cxzcw];
	for(int cxzcw = 0; cxzcw < mwpte; cxzcw++){
		str[cxzcw] = cobfq[mwpte - 1 - cxzcw];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int srpft = 0;
	while(srpft < zahl && dest[srpft] != '\0' && src[srpft] != '\0')		dest[srpft] = src[srpft];
		srpft ++;
{
	int mqkzq = 0;
	while(str[mqkzq] != '\0') mqkzq++;
	char rwwby[mqkzq];
	for(int wmbee = 0; wmbee < mqkzq; wmbee++) rwwby[wmbee] = str[wmbee];
	for(int wmbee = 0; wmbee < mqkzq; wmbee++){
		str[wmbee] = rwwby[mqkzq - 1 - wmbee];
}
{  
      }",1
105,WS2021,9,Antwort 10,C,VName_218,Name_218,"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int dduee = 0;
	while(dduee < zahl && dest[dduee] != '\0' && src[dduee] != '\0')		dest[dduee] = src[dduee];
		dduee ++;
{
	int nckyw = 0;
	while(str[nckyw] != '\0') nckyw++;
	char tktak[nckyw];
	for(int tgvtu = 0; tgvtu < nckyw; tgvtu++) tktak[tgvtu] = str[tgvtu];
	for(int tgvtu = 0; tgvtu < nckyw; tgvtu++){
		str[tgvtu] = tktak[nckyw - 1 - tgvtu];
}
{  
      }",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int dmeml, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int kuucy = 0;
for(int wltba=1; wltba < dmeml; wltba++){
	int hpgrw = 0;
while(*(argv[wltba]+hpgrw) != '\0'){
if((*(argv[wltba]+hpgrw) != 'kuucy') && (*(argv[wltba]+hpgrw)!= 'enfdq') && (*(argv[wltba]+hpgrw) != 'q')&& (*(argv[wltba]+hpgrw) != 'X')&& (*(argv[wltba]+hpgrw) != 'Y')&& (*(argv[wltba]+hpgrw) != 'Q')){
			*(compactstring+kuucy) = *(argv[wltba]+hpgrw);
			kuucy++;
	}
	hpgrw++;
}
}
compactstring = (char*) realloc(compactstring,kuucy+sizeof(char));
int sqgdl=(kuucy+1)/3;
char* shortend = (char*) malloc(sqgdl * sizeof(char));
int enfdq = 0;
for (int wltba=0;wltba<kuucy+1;wltba++){
if((wltba%3)==0){
	*(shortend+enfdq) = *(compactstring+wltba);
	enfdq++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int hpaih, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int dyhzd = 0;
for(int gajwx=1; gajwx < hpaih; gajwx++){
	int cblhi = 0;
while(*(argv[gajwx]+cblhi) != '\0'){
if((*(argv[gajwx]+cblhi) != 'dyhzd') && (*(argv[gajwx]+cblhi)!= 'iypzh') && (*(argv[gajwx]+cblhi) != 'q')&& (*(argv[gajwx]+cblhi) != 'X')&& (*(argv[gajwx]+cblhi) != 'Y')&& (*(argv[gajwx]+cblhi) != 'Q')){
			*(compactstring+dyhzd) = *(argv[gajwx]+cblhi);
			dyhzd++;
	}
	cblhi++;
}
}
compactstring = (char*) realloc(compactstring,dyhzd+sizeof(char));
int gqdgp=(dyhzd+1)/3;
char* shortend = (char*) malloc(gqdgp * sizeof(char));
int iypzh = 0;
for (int gajwx=0;gajwx<dyhzd+1;gajwx++){
if((gajwx%3)==0){
	*(shortend+iypzh) = *(compactstring+gajwx);
	iypzh++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int kfvpd, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int dlohj = 0;
for(int tzeuj=1; tzeuj < kfvpd; tzeuj++){
	int zsxpq = 0;
while(*(argv[tzeuj]+zsxpq) != '\0'){
if((*(argv[tzeuj]+zsxpq) != 'dlohj') && (*(argv[tzeuj]+zsxpq)!= 'wzrqe') && (*(argv[tzeuj]+zsxpq) != 'q')&& (*(argv[tzeuj]+zsxpq) != 'X')&& (*(argv[tzeuj]+zsxpq) != 'Y')&& (*(argv[tzeuj]+zsxpq) != 'Q')){
			*(compactstring+dlohj) = *(argv[tzeuj]+zsxpq);
			dlohj++;
	}
	zsxpq++;
}
}
compactstring = (char*) realloc(compactstring,dlohj+sizeof(char));
int xrijq=(dlohj+1)/3;
char* shortend = (char*) malloc(xrijq * sizeof(char));
int wzrqe = 0;
for (int tzeuj=0;tzeuj<dlohj+1;tzeuj++){
if((tzeuj%3)==0){
	*(shortend+wzrqe) = *(compactstring+tzeuj);
	wzrqe++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int xlrcu, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int fmnfv = 0;
for(int wkrik=1; wkrik < xlrcu; wkrik++){
	int fjxub = 0;
while(*(argv[wkrik]+fjxub) != '\0'){
if((*(argv[wkrik]+fjxub) != 'fmnfv') && (*(argv[wkrik]+fjxub)!= 'avvyt') && (*(argv[wkrik]+fjxub) != 'q')&& (*(argv[wkrik]+fjxub) != 'X')&& (*(argv[wkrik]+fjxub) != 'Y')&& (*(argv[wkrik]+fjxub) != 'Q')){
			*(compactstring+fmnfv) = *(argv[wkrik]+fjxub);
			fmnfv++;
	}
	fjxub++;
}
}
compactstring = (char*) realloc(compactstring,fmnfv+sizeof(char));
int iebjb=(fmnfv+1)/3;
char* shortend = (char*) malloc(iebjb * sizeof(char));
int avvyt = 0;
for (int wkrik=0;wkrik<fmnfv+1;wkrik++){
if((wkrik%3)==0){
	*(shortend+avvyt) = *(compactstring+wkrik);
	avvyt++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int rchbt, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int nqpgx = 0;
for(int lkebm=1; lkebm < rchbt; lkebm++){
	int irpyq = 0;
while(*(argv[lkebm]+irpyq) != '\0'){
if((*(argv[lkebm]+irpyq) != 'nqpgx') && (*(argv[lkebm]+irpyq)!= 'xkoji') && (*(argv[lkebm]+irpyq) != 'q')&& (*(argv[lkebm]+irpyq) != 'X')&& (*(argv[lkebm]+irpyq) != 'Y')&& (*(argv[lkebm]+irpyq) != 'Q')){
			*(compactstring+nqpgx) = *(argv[lkebm]+irpyq);
			nqpgx++;
	}
	irpyq++;
}
}
compactstring = (char*) realloc(compactstring,nqpgx+sizeof(char));
int nrkvw=(nqpgx+1)/3;
char* shortend = (char*) malloc(nrkvw * sizeof(char));
int xkoji = 0;
for (int lkebm=0;lkebm<nqpgx+1;lkebm++){
if((lkebm%3)==0){
	*(shortend+xkoji) = *(compactstring+lkebm);
	xkoji++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int ikfrp, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int qllgw = 0;
for(int abhta=1; abhta < ikfrp; abhta++){
	int dohlr = 0;
while(*(argv[abhta]+dohlr) != '\0'){
if((*(argv[abhta]+dohlr) != 'qllgw') && (*(argv[abhta]+dohlr)!= 'zmklf') && (*(argv[abhta]+dohlr) != 'q')&& (*(argv[abhta]+dohlr) != 'X')&& (*(argv[abhta]+dohlr) != 'Y')&& (*(argv[abhta]+dohlr) != 'Q')){
			*(compactstring+qllgw) = *(argv[abhta]+dohlr);
			qllgw++;
	}
	dohlr++;
}
}
compactstring = (char*) realloc(compactstring,qllgw+sizeof(char));
int cvrwi=(qllgw+1)/3;
char* shortend = (char*) malloc(cvrwi * sizeof(char));
int zmklf = 0;
for (int abhta=0;abhta<qllgw+1;abhta++){
if((abhta%3)==0){
	*(shortend+zmklf) = *(compactstring+abhta);
	zmklf++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int gkdpt, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int ydaae = 0;
for(int ztuno=1; ztuno < gkdpt; ztuno++){
	int jbhlf = 0;
while(*(argv[ztuno]+jbhlf) != '\0'){
if((*(argv[ztuno]+jbhlf) != 'ydaae') && (*(argv[ztuno]+jbhlf)!= 'tfyug') && (*(argv[ztuno]+jbhlf) != 'q')&& (*(argv[ztuno]+jbhlf) != 'X')&& (*(argv[ztuno]+jbhlf) != 'Y')&& (*(argv[ztuno]+jbhlf) != 'Q')){
			*(compactstring+ydaae) = *(argv[ztuno]+jbhlf);
			ydaae++;
	}
	jbhlf++;
}
}
compactstring = (char*) realloc(compactstring,ydaae+sizeof(char));
int jdrlp=(ydaae+1)/3;
char* shortend = (char*) malloc(jdrlp * sizeof(char));
int tfyug = 0;
for (int ztuno=0;ztuno<ydaae+1;ztuno++){
if((ztuno%3)==0){
	*(shortend+tfyug) = *(compactstring+ztuno);
	tfyug++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int lddrj, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int trmrg = 0;
for(int osihy=1; osihy < lddrj; osihy++){
	int bgxgr = 0;
while(*(argv[osihy]+bgxgr) != '\0'){
if((*(argv[osihy]+bgxgr) != 'trmrg') && (*(argv[osihy]+bgxgr)!= 'jrgag') && (*(argv[osihy]+bgxgr) != 'q')&& (*(argv[osihy]+bgxgr) != 'X')&& (*(argv[osihy]+bgxgr) != 'Y')&& (*(argv[osihy]+bgxgr) != 'Q')){
			*(compactstring+trmrg) = *(argv[osihy]+bgxgr);
			trmrg++;
	}
	bgxgr++;
}
}
compactstring = (char*) realloc(compactstring,trmrg+sizeof(char));
int rmawo=(trmrg+1)/3;
char* shortend = (char*) malloc(rmawo * sizeof(char));
int jrgag = 0;
for (int osihy=0;osihy<trmrg+1;osihy++){
if((osihy%3)==0){
	*(shortend+jrgag) = *(compactstring+osihy);
	jrgag++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int mgrsj, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int czrdo = 0;
for(int oviuj=1; oviuj < mgrsj; oviuj++){
	int fsslr = 0;
while(*(argv[oviuj]+fsslr) != '\0'){
if((*(argv[oviuj]+fsslr) != 'czrdo') && (*(argv[oviuj]+fsslr)!= 'xvbwt') && (*(argv[oviuj]+fsslr) != 'q')&& (*(argv[oviuj]+fsslr) != 'X')&& (*(argv[oviuj]+fsslr) != 'Y')&& (*(argv[oviuj]+fsslr) != 'Q')){
			*(compactstring+czrdo) = *(argv[oviuj]+fsslr);
			czrdo++;
	}
	fsslr++;
}
}
compactstring = (char*) realloc(compactstring,czrdo+sizeof(char));
int qlpze=(czrdo+1)/3;
char* shortend = (char*) malloc(qlpze * sizeof(char));
int xvbwt = 0;
for (int oviuj=0;oviuj<czrdo+1;oviuj++){
if((oviuj%3)==0){
	*(shortend+xvbwt) = *(compactstring+oviuj);
	xvbwt++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
119,WS2021,9,Antwort 10,C,VName_196,Name_196,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int pdxyg, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int jusef = 0;
for(int evoim=1; evoim < pdxyg; evoim++){
	int qvnam = 0;
while(*(argv[evoim]+qvnam) != '\0'){
if((*(argv[evoim]+qvnam) != 'jusef') && (*(argv[evoim]+qvnam)!= 'aptfm') && (*(argv[evoim]+qvnam) != 'q')&& (*(argv[evoim]+qvnam) != 'X')&& (*(argv[evoim]+qvnam) != 'Y')&& (*(argv[evoim]+qvnam) != 'Q')){
			*(compactstring+jusef) = *(argv[evoim]+qvnam);
			jusef++;
	}
	qvnam++;
}
}
compactstring = (char*) realloc(compactstring,jusef+sizeof(char));
int arkgz=(jusef+1)/3;
char* shortend = (char*) malloc(arkgz * sizeof(char));
int aptfm = 0;
for (int evoim=0;evoim<jusef+1;evoim++){
if((evoim%3)==0){
	*(shortend+aptfm) = *(compactstring+evoim);
	aptfm++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int olypd, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int phnsj = 0;
	for(int ogisg = 1; ogisg < olypd; ogisg++){
		int wikef = 0;
		while(*(argv[ogisg]+wikef) != '\0'){
			if((*(argv[ogisg]+wikef) != 'x') && (*(argv[ogisg]+wikef) != 'y') && (*(argv[ogisg]+wikef) != 'q') && (*(argv[ogisg]+wikef) != 'X') && (*(argv[ogisg]+wikef) != 'Y') && (*(argv[ogisg]+wikef) != 'Q')){
			*(text_str+phnsj) = *(argv[ogisg]+wikef);
			phnsj++;
			}
			wikef++;
		}
	}
	text_str = realloc(text_str,phnsj+1 * sizeof(char));
	int ahcox = (phnsj+1) / 3;
	char* solution = malloc(ahcox * sizeof(char));
	int gbnuw = 0;
	for(int ogisg = 0; ogisg < phnsj+1; ogisg++){
		if((ogisg % 3) == 0){
			*(solution+gbnuw) = *(text_str+ogisg);
			gbnuw++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int osolm, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int tgzut = 0;
	for(int xrnfj = 1; xrnfj < osolm; xrnfj++){
		int wrdaj = 0;
		while(*(argv[xrnfj]+wrdaj) != '\0'){
			if((*(argv[xrnfj]+wrdaj) != 'x') && (*(argv[xrnfj]+wrdaj) != 'y') && (*(argv[xrnfj]+wrdaj) != 'q') && (*(argv[xrnfj]+wrdaj) != 'X') && (*(argv[xrnfj]+wrdaj) != 'Y') && (*(argv[xrnfj]+wrdaj) != 'Q')){
			*(text_str+tgzut) = *(argv[xrnfj]+wrdaj);
			tgzut++;
			}
			wrdaj++;
		}
	}
	text_str = realloc(text_str,tgzut+1 * sizeof(char));
	int ldbio = (tgzut+1) / 3;
	char* solution = malloc(ldbio * sizeof(char));
	int gytkx = 0;
	for(int xrnfj = 0; xrnfj < tgzut+1; xrnfj++){
		if((xrnfj % 3) == 0){
			*(solution+gytkx) = *(text_str+xrnfj);
			gytkx++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int pyvkd, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int wdwas = 0;
	for(int uaaqh = 1; uaaqh < pyvkd; uaaqh++){
		int wedtz = 0;
		while(*(argv[uaaqh]+wedtz) != '\0'){
			if((*(argv[uaaqh]+wedtz) != 'x') && (*(argv[uaaqh]+wedtz) != 'y') && (*(argv[uaaqh]+wedtz) != 'q') && (*(argv[uaaqh]+wedtz) != 'X') && (*(argv[uaaqh]+wedtz) != 'Y') && (*(argv[uaaqh]+wedtz) != 'Q')){
			*(text_str+wdwas) = *(argv[uaaqh]+wedtz);
			wdwas++;
			}
			wedtz++;
		}
	}
	text_str = realloc(text_str,wdwas+1 * sizeof(char));
	int scpjb = (wdwas+1) / 3;
	char* solution = malloc(scpjb * sizeof(char));
	int pxqkr = 0;
	for(int uaaqh = 0; uaaqh < wdwas+1; uaaqh++){
		if((uaaqh % 3) == 0){
			*(solution+pxqkr) = *(text_str+uaaqh);
			pxqkr++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int ilzwe, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int gzjvh = 0;
	for(int clacd = 1; clacd < ilzwe; clacd++){
		int ofbok = 0;
		while(*(argv[clacd]+ofbok) != '\0'){
			if((*(argv[clacd]+ofbok) != 'x') && (*(argv[clacd]+ofbok) != 'y') && (*(argv[clacd]+ofbok) != 'q') && (*(argv[clacd]+ofbok) != 'X') && (*(argv[clacd]+ofbok) != 'Y') && (*(argv[clacd]+ofbok) != 'Q')){
			*(text_str+gzjvh) = *(argv[clacd]+ofbok);
			gzjvh++;
			}
			ofbok++;
		}
	}
	text_str = realloc(text_str,gzjvh+1 * sizeof(char));
	int xxhea = (gzjvh+1) / 3;
	char* solution = malloc(xxhea * sizeof(char));
	int qiosl = 0;
	for(int clacd = 0; clacd < gzjvh+1; clacd++){
		if((clacd % 3) == 0){
			*(solution+qiosl) = *(text_str+clacd);
			qiosl++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int pngfz, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int eiwbl = 0;
	for(int uzdvl = 1; uzdvl < pngfz; uzdvl++){
		int fkcld = 0;
		while(*(argv[uzdvl]+fkcld) != '\0'){
			if((*(argv[uzdvl]+fkcld) != 'x') && (*(argv[uzdvl]+fkcld) != 'y') && (*(argv[uzdvl]+fkcld) != 'q') && (*(argv[uzdvl]+fkcld) != 'X') && (*(argv[uzdvl]+fkcld) != 'Y') && (*(argv[uzdvl]+fkcld) != 'Q')){
			*(text_str+eiwbl) = *(argv[uzdvl]+fkcld);
			eiwbl++;
			}
			fkcld++;
		}
	}
	text_str = realloc(text_str,eiwbl+1 * sizeof(char));
	int hbbtp = (eiwbl+1) / 3;
	char* solution = malloc(hbbtp * sizeof(char));
	int ipfps = 0;
	for(int uzdvl = 0; uzdvl < eiwbl+1; uzdvl++){
		if((uzdvl % 3) == 0){
			*(solution+ipfps) = *(text_str+uzdvl);
			ipfps++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int pmbqo, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int kuaef = 0;
	for(int wjkci = 1; wjkci < pmbqo; wjkci++){
		int hpwvj = 0;
		while(*(argv[wjkci]+hpwvj) != '\0'){
			if((*(argv[wjkci]+hpwvj) != 'x') && (*(argv[wjkci]+hpwvj) != 'y') && (*(argv[wjkci]+hpwvj) != 'q') && (*(argv[wjkci]+hpwvj) != 'X') && (*(argv[wjkci]+hpwvj) != 'Y') && (*(argv[wjkci]+hpwvj) != 'Q')){
			*(text_str+kuaef) = *(argv[wjkci]+hpwvj);
			kuaef++;
			}
			hpwvj++;
		}
	}
	text_str = realloc(text_str,kuaef+1 * sizeof(char));
	int nuevp = (kuaef+1) / 3;
	char* solution = malloc(nuevp * sizeof(char));
	int zrtcj = 0;
	for(int wjkci = 0; wjkci < kuaef+1; wjkci++){
		if((wjkci % 3) == 0){
			*(solution+zrtcj) = *(text_str+wjkci);
			zrtcj++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int usrqc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int verao = 0;
	for(int uipcn = 1; uipcn < usrqc; uipcn++){
		int huyrk = 0;
		while(*(argv[uipcn]+huyrk) != '\0'){
			if((*(argv[uipcn]+huyrk) != 'x') && (*(argv[uipcn]+huyrk) != 'y') && (*(argv[uipcn]+huyrk) != 'q') && (*(argv[uipcn]+huyrk) != 'X') && (*(argv[uipcn]+huyrk) != 'Y') && (*(argv[uipcn]+huyrk) != 'Q')){
			*(text_str+verao) = *(argv[uipcn]+huyrk);
			verao++;
			}
			huyrk++;
		}
	}
	text_str = realloc(text_str,verao+1 * sizeof(char));
	int xyddl = (verao+1) / 3;
	char* solution = malloc(xyddl * sizeof(char));
	int vlblf = 0;
	for(int uipcn = 0; uipcn < verao+1; uipcn++){
		if((uipcn % 3) == 0){
			*(solution+vlblf) = *(text_str+uipcn);
			vlblf++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int svgva, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int henbi = 0;
	for(int pogba = 1; pogba < svgva; pogba++){
		int fsqzo = 0;
		while(*(argv[pogba]+fsqzo) != '\0'){
			if((*(argv[pogba]+fsqzo) != 'x') && (*(argv[pogba]+fsqzo) != 'y') && (*(argv[pogba]+fsqzo) != 'q') && (*(argv[pogba]+fsqzo) != 'X') && (*(argv[pogba]+fsqzo) != 'Y') && (*(argv[pogba]+fsqzo) != 'Q')){
			*(text_str+henbi) = *(argv[pogba]+fsqzo);
			henbi++;
			}
			fsqzo++;
		}
	}
	text_str = realloc(text_str,henbi+1 * sizeof(char));
	int xapnq = (henbi+1) / 3;
	char* solution = malloc(xapnq * sizeof(char));
	int qbmbc = 0;
	for(int pogba = 0; pogba < henbi+1; pogba++){
		if((pogba % 3) == 0){
			*(solution+qbmbc) = *(text_str+pogba);
			qbmbc++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int iccth, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int bfswk = 0;
	for(int fmarx = 1; fmarx < iccth; fmarx++){
		int iqsvv = 0;
		while(*(argv[fmarx]+iqsvv) != '\0'){
			if((*(argv[fmarx]+iqsvv) != 'x') && (*(argv[fmarx]+iqsvv) != 'y') && (*(argv[fmarx]+iqsvv) != 'q') && (*(argv[fmarx]+iqsvv) != 'X') && (*(argv[fmarx]+iqsvv) != 'Y') && (*(argv[fmarx]+iqsvv) != 'Q')){
			*(text_str+bfswk) = *(argv[fmarx]+iqsvv);
			bfswk++;
			}
			iqsvv++;
		}
	}
	text_str = realloc(text_str,bfswk+1 * sizeof(char));
	int fhpwk = (bfswk+1) / 3;
	char* solution = malloc(fhpwk * sizeof(char));
	int wesll = 0;
	for(int fmarx = 0; fmarx < bfswk+1; fmarx++){
		if((fmarx % 3) == 0){
			*(solution+wesll) = *(text_str+fmarx);
			wesll++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
132,WS2021,9,Antwort 10,C,VName_195,Name_195,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int jtdis, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int zuufk = 0;
	for(int ouypa = 1; ouypa < jtdis; ouypa++){
		int fcmpd = 0;
		while(*(argv[ouypa]+fcmpd) != '\0'){
			if((*(argv[ouypa]+fcmpd) != 'x') && (*(argv[ouypa]+fcmpd) != 'y') && (*(argv[ouypa]+fcmpd) != 'q') && (*(argv[ouypa]+fcmpd) != 'X') && (*(argv[ouypa]+fcmpd) != 'Y') && (*(argv[ouypa]+fcmpd) != 'Q')){
			*(text_str+zuufk) = *(argv[ouypa]+fcmpd);
			zuufk++;
			}
			fcmpd++;
		}
	}
	text_str = realloc(text_str,zuufk+1 * sizeof(char));
	int dlitf = (zuufk+1) / 3;
	char* solution = malloc(dlitf * sizeof(char));
	int pnyos = 0;
	for(int ouypa = 0; ouypa < zuufk+1; ouypa++){
		if((ouypa % 3) == 0){
			*(solution+pnyos) = *(text_str+ouypa);
			pnyos++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int moyou;
    for(moyou = 0; moyou < zahl && *dest != '\0' && *src != '\0'; moyou++)
           *dest = *src;
       src++;
       dest++;
    {
    int rtoqg = 0;
    int oqjej = 0;
    int rijuh = 0;
    for(oqjej=0; str[oqjej] != 0; oqjej++);
    for(rtoqg = 0; rtoqg <oqjej/2; rtoqg++)
    {
        rijuh = str[rtoqg];
        str[rtoqg]=str[oqjej - 1 - rtoqg];
        str[oqjej - 1 - rtoqg] = rijuh;
        for(rtoqg = 0; rtoqg < oqjej; rtoqg++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int ovzvi;
    for(ovzvi = 0; ovzvi < zahl && *dest != '\0' && *src != '\0'; ovzvi++)
           *dest = *src;
       src++;
       dest++;
    {
    int ubvbd = 0;
    int cmzxf = 0;
    int ucudx = 0;
    for(cmzxf=0; str[cmzxf] != 0; cmzxf++);
    for(ubvbd = 0; ubvbd <cmzxf/2; ubvbd++)
    {
        ucudx = str[ubvbd];
        str[ubvbd]=str[cmzxf - 1 - ubvbd];
        str[cmzxf - 1 - ubvbd] = ucudx;
        for(ubvbd = 0; ubvbd < cmzxf; ubvbd++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int xsxza;
    for(xsxza = 0; xsxza < zahl && *dest != '\0' && *src != '\0'; xsxza++)
           *dest = *src;
       src++;
       dest++;
    {
    int arnjz = 0;
    int mzowr = 0;
    int utfra = 0;
    for(mzowr=0; str[mzowr] != 0; mzowr++);
    for(arnjz = 0; arnjz <mzowr/2; arnjz++)
    {
        utfra = str[arnjz];
        str[arnjz]=str[mzowr - 1 - arnjz];
        str[mzowr - 1 - arnjz] = utfra;
        for(arnjz = 0; arnjz < mzowr; arnjz++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int sdubp;
    for(sdubp = 0; sdubp < zahl && *dest != '\0' && *src != '\0'; sdubp++)
           *dest = *src;
       src++;
       dest++;
    {
    int djttj = 0;
    int wdapx = 0;
    int jxbvk = 0;
    for(wdapx=0; str[wdapx] != 0; wdapx++);
    for(djttj = 0; djttj <wdapx/2; djttj++)
    {
        jxbvk = str[djttj];
        str[djttj]=str[wdapx - 1 - djttj];
        str[wdapx - 1 - djttj] = jxbvk;
        for(djttj = 0; djttj < wdapx; djttj++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int wdehb;
    for(wdehb = 0; wdehb < zahl && *dest != '\0' && *src != '\0'; wdehb++)
           *dest = *src;
       src++;
       dest++;
    {
    int aobrd = 0;
    int cyngy = 0;
    int iqtqa = 0;
    for(cyngy=0; str[cyngy] != 0; cyngy++);
    for(aobrd = 0; aobrd <cyngy/2; aobrd++)
    {
        iqtqa = str[aobrd];
        str[aobrd]=str[cyngy - 1 - aobrd];
        str[cyngy - 1 - aobrd] = iqtqa;
        for(aobrd = 0; aobrd < cyngy; aobrd++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int etykx;
    for(etykx = 0; etykx < zahl && *dest != '\0' && *src != '\0'; etykx++)
           *dest = *src;
       src++;
       dest++;
    {
    int iuyta = 0;
    int anytq = 0;
    int cfgpm = 0;
    for(anytq=0; str[anytq] != 0; anytq++);
    for(iuyta = 0; iuyta <anytq/2; iuyta++)
    {
        cfgpm = str[iuyta];
        str[iuyta]=str[anytq - 1 - iuyta];
        str[anytq - 1 - iuyta] = cfgpm;
        for(iuyta = 0; iuyta < anytq; iuyta++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int gntzv;
    for(gntzv = 0; gntzv < zahl && *dest != '\0' && *src != '\0'; gntzv++)
           *dest = *src;
       src++;
       dest++;
    {
    int sffzk = 0;
    int jgtto = 0;
    int folkg = 0;
    for(jgtto=0; str[jgtto] != 0; jgtto++);
    for(sffzk = 0; sffzk <jgtto/2; sffzk++)
    {
        folkg = str[sffzk];
        str[sffzk]=str[jgtto - 1 - sffzk];
        str[jgtto - 1 - sffzk] = folkg;
        for(sffzk = 0; sffzk < jgtto; sffzk++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int dhvfu;
    for(dhvfu = 0; dhvfu < zahl && *dest != '\0' && *src != '\0'; dhvfu++)
           *dest = *src;
       src++;
       dest++;
    {
    int ccgsf = 0;
    int iifqp = 0;
    int nrsuo = 0;
    for(iifqp=0; str[iifqp] != 0; iifqp++);
    for(ccgsf = 0; ccgsf <iifqp/2; ccgsf++)
    {
        nrsuo = str[ccgsf];
        str[ccgsf]=str[iifqp - 1 - ccgsf];
        str[iifqp - 1 - ccgsf] = nrsuo;
        for(ccgsf = 0; ccgsf < iifqp; ccgsf++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int wgxvh;
    for(wgxvh = 0; wgxvh < zahl && *dest != '\0' && *src != '\0'; wgxvh++)
           *dest = *src;
       src++;
       dest++;
    {
    int glukk = 0;
    int fzswx = 0;
    int kygqb = 0;
    for(fzswx=0; str[fzswx] != 0; fzswx++);
    for(glukk = 0; glukk <fzswx/2; glukk++)
    {
        kygqb = str[glukk];
        str[glukk]=str[fzswx - 1 - glukk];
        str[fzswx - 1 - glukk] = kygqb;
        for(glukk = 0; glukk < fzswx; glukk++);
}
{  
      }",1
144,WS2021,9,Antwort 10,C,VName_192,Name_192,"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int hzyys;
    for(hzyys = 0; hzyys < zahl && *dest != '\0' && *src != '\0'; hzyys++)
           *dest = *src;
       src++;
       dest++;
    {
    int lloor = 0;
    int yvzrl = 0;
    int ckild = 0;
    for(yvzrl=0; str[yvzrl] != 0; yvzrl++);
    for(lloor = 0; lloor <yvzrl/2; lloor++)
    {
        ckild = str[lloor];
        str[lloor]=str[yvzrl - 1 - lloor];
        str[yvzrl - 1 - lloor] = ckild;
        for(lloor = 0; lloor < yvzrl; lloor++);
}
{  
      }",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int daqof, char* argv[] )
{  
	char wpgux[100];
	char gxhyg[100];
	int dnmog = 0;
	for (int xhdkc = 0; xhdkc < daqof -1; xhdkc++)
	{
		int wxjaw = 0;
		for (wxjaw; *(*(argv+1+xhdkc)+wxjaw) != '\0'; wxjaw++)
		{
			wpgux[dnmog] = *(*(argv+1+xhdkc)+wxjaw);
			dnmog++;
		}
	}
	wpgux[dnmog] = '\0';
	for (int xhdkc = 0; xhdkc < dnmog+1; xhdkc++)
	{
		if ((wpgux[xhdkc] == 'x') || (wpgux[xhdkc] == 'y') || (wpgux[xhdkc] == 'q') || (wpgux[xhdkc] == 'X') || (wpgux[xhdkc] == 'Y') || (wpgux[xhdkc] == 'Q'))
		{
			while (1)
			{
				wpgux[xhdkc] = wpgux[xhdkc+1];
				xhdkc++;
				if (wpgux[xhdkc] == '\0')
				{	
					break;
				}
			}
			dnmog--;
			xhdkc = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",wpgux);
	for (int xhdkc = 0, z = 0; xhdkc < ((dnmog/2)-2); xhdkc++, z += 3)
	{
		gxhyg[xhdkc] = wpgux[z];
	}
	int wxjaw = 0;
	for (wxjaw; wpgux[wxjaw] != '\0'; wxjaw++)
		;
	gxhyg[wxjaw] = '\0';
	printf(""Der neue String lautet: %s"",gxhyg);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int didlf, char* argv[] )
{  
	char zvivc[100];
	char aiyhl[100];
	int ocmtu = 0;
	for (int wbhut = 0; wbhut < didlf -1; wbhut++)
	{
		int tlrpx = 0;
		for (tlrpx; *(*(argv+1+wbhut)+tlrpx) != '\0'; tlrpx++)
		{
			zvivc[ocmtu] = *(*(argv+1+wbhut)+tlrpx);
			ocmtu++;
		}
	}
	zvivc[ocmtu] = '\0';
	for (int wbhut = 0; wbhut < ocmtu+1; wbhut++)
	{
		if ((zvivc[wbhut] == 'x') || (zvivc[wbhut] == 'y') || (zvivc[wbhut] == 'q') || (zvivc[wbhut] == 'X') || (zvivc[wbhut] == 'Y') || (zvivc[wbhut] == 'Q'))
		{
			while (1)
			{
				zvivc[wbhut] = zvivc[wbhut+1];
				wbhut++;
				if (zvivc[wbhut] == '\0')
				{	
					break;
				}
			}
			ocmtu--;
			wbhut = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zvivc);
	for (int wbhut = 0, z = 0; wbhut < ((ocmtu/2)-2); wbhut++, z += 3)
	{
		aiyhl[wbhut] = zvivc[z];
	}
	int tlrpx = 0;
	for (tlrpx; zvivc[tlrpx] != '\0'; tlrpx++)
		;
	aiyhl[tlrpx] = '\0';
	printf(""Der neue String lautet: %s"",aiyhl);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int bjmpv, char* argv[] )
{  
	char zauhp[100];
	char ugity[100];
	int ecxrz = 0;
	for (int kashr = 0; kashr < bjmpv -1; kashr++)
	{
		int zyeet = 0;
		for (zyeet; *(*(argv+1+kashr)+zyeet) != '\0'; zyeet++)
		{
			zauhp[ecxrz] = *(*(argv+1+kashr)+zyeet);
			ecxrz++;
		}
	}
	zauhp[ecxrz] = '\0';
	for (int kashr = 0; kashr < ecxrz+1; kashr++)
	{
		if ((zauhp[kashr] == 'x') || (zauhp[kashr] == 'y') || (zauhp[kashr] == 'q') || (zauhp[kashr] == 'X') || (zauhp[kashr] == 'Y') || (zauhp[kashr] == 'Q'))
		{
			while (1)
			{
				zauhp[kashr] = zauhp[kashr+1];
				kashr++;
				if (zauhp[kashr] == '\0')
				{	
					break;
				}
			}
			ecxrz--;
			kashr = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zauhp);
	for (int kashr = 0, z = 0; kashr < ((ecxrz/2)-2); kashr++, z += 3)
	{
		ugity[kashr] = zauhp[z];
	}
	int zyeet = 0;
	for (zyeet; zauhp[zyeet] != '\0'; zyeet++)
		;
	ugity[zyeet] = '\0';
	printf(""Der neue String lautet: %s"",ugity);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int onpbg, char* argv[] )
{  
	char gbfmk[100];
	char yttng[100];
	int tmgrm = 0;
	for (int jfsmr = 0; jfsmr < onpbg -1; jfsmr++)
	{
		int ozskf = 0;
		for (ozskf; *(*(argv+1+jfsmr)+ozskf) != '\0'; ozskf++)
		{
			gbfmk[tmgrm] = *(*(argv+1+jfsmr)+ozskf);
			tmgrm++;
		}
	}
	gbfmk[tmgrm] = '\0';
	for (int jfsmr = 0; jfsmr < tmgrm+1; jfsmr++)
	{
		if ((gbfmk[jfsmr] == 'x') || (gbfmk[jfsmr] == 'y') || (gbfmk[jfsmr] == 'q') || (gbfmk[jfsmr] == 'X') || (gbfmk[jfsmr] == 'Y') || (gbfmk[jfsmr] == 'Q'))
		{
			while (1)
			{
				gbfmk[jfsmr] = gbfmk[jfsmr+1];
				jfsmr++;
				if (gbfmk[jfsmr] == '\0')
				{	
					break;
				}
			}
			tmgrm--;
			jfsmr = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",gbfmk);
	for (int jfsmr = 0, z = 0; jfsmr < ((tmgrm/2)-2); jfsmr++, z += 3)
	{
		yttng[jfsmr] = gbfmk[z];
	}
	int ozskf = 0;
	for (ozskf; gbfmk[ozskf] != '\0'; ozskf++)
		;
	yttng[ozskf] = '\0';
	printf(""Der neue String lautet: %s"",yttng);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int rjxan, char* argv[] )
{  
	char ymwlt[100];
	char cthgk[100];
	int nzqkx = 0;
	for (int ecxex = 0; ecxex < rjxan -1; ecxex++)
	{
		int pphjz = 0;
		for (pphjz; *(*(argv+1+ecxex)+pphjz) != '\0'; pphjz++)
		{
			ymwlt[nzqkx] = *(*(argv+1+ecxex)+pphjz);
			nzqkx++;
		}
	}
	ymwlt[nzqkx] = '\0';
	for (int ecxex = 0; ecxex < nzqkx+1; ecxex++)
	{
		if ((ymwlt[ecxex] == 'x') || (ymwlt[ecxex] == 'y') || (ymwlt[ecxex] == 'q') || (ymwlt[ecxex] == 'X') || (ymwlt[ecxex] == 'Y') || (ymwlt[ecxex] == 'Q'))
		{
			while (1)
			{
				ymwlt[ecxex] = ymwlt[ecxex+1];
				ecxex++;
				if (ymwlt[ecxex] == '\0')
				{	
					break;
				}
			}
			nzqkx--;
			ecxex = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",ymwlt);
	for (int ecxex = 0, z = 0; ecxex < ((nzqkx/2)-2); ecxex++, z += 3)
	{
		cthgk[ecxex] = ymwlt[z];
	}
	int pphjz = 0;
	for (pphjz; ymwlt[pphjz] != '\0'; pphjz++)
		;
	cthgk[pphjz] = '\0';
	printf(""Der neue String lautet: %s"",cthgk);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int ftzuj, char* argv[] )
{  
	char exsyn[100];
	char mhdvh[100];
	int ygzxi = 0;
	for (int waxsw = 0; waxsw < ftzuj -1; waxsw++)
	{
		int vxffh = 0;
		for (vxffh; *(*(argv+1+waxsw)+vxffh) != '\0'; vxffh++)
		{
			exsyn[ygzxi] = *(*(argv+1+waxsw)+vxffh);
			ygzxi++;
		}
	}
	exsyn[ygzxi] = '\0';
	for (int waxsw = 0; waxsw < ygzxi+1; waxsw++)
	{
		if ((exsyn[waxsw] == 'x') || (exsyn[waxsw] == 'y') || (exsyn[waxsw] == 'q') || (exsyn[waxsw] == 'X') || (exsyn[waxsw] == 'Y') || (exsyn[waxsw] == 'Q'))
		{
			while (1)
			{
				exsyn[waxsw] = exsyn[waxsw+1];
				waxsw++;
				if (exsyn[waxsw] == '\0')
				{	
					break;
				}
			}
			ygzxi--;
			waxsw = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",exsyn);
	for (int waxsw = 0, z = 0; waxsw < ((ygzxi/2)-2); waxsw++, z += 3)
	{
		mhdvh[waxsw] = exsyn[z];
	}
	int vxffh = 0;
	for (vxffh; exsyn[vxffh] != '\0'; vxffh++)
		;
	mhdvh[vxffh] = '\0';
	printf(""Der neue String lautet: %s"",mhdvh);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int ilvyq, char* argv[] )
{  
	char kfvyb[100];
	char cpzmf[100];
	int rehty = 0;
	for (int zcfoh = 0; zcfoh < ilvyq -1; zcfoh++)
	{
		int kskxl = 0;
		for (kskxl; *(*(argv+1+zcfoh)+kskxl) != '\0'; kskxl++)
		{
			kfvyb[rehty] = *(*(argv+1+zcfoh)+kskxl);
			rehty++;
		}
	}
	kfvyb[rehty] = '\0';
	for (int zcfoh = 0; zcfoh < rehty+1; zcfoh++)
	{
		if ((kfvyb[zcfoh] == 'x') || (kfvyb[zcfoh] == 'y') || (kfvyb[zcfoh] == 'q') || (kfvyb[zcfoh] == 'X') || (kfvyb[zcfoh] == 'Y') || (kfvyb[zcfoh] == 'Q'))
		{
			while (1)
			{
				kfvyb[zcfoh] = kfvyb[zcfoh+1];
				zcfoh++;
				if (kfvyb[zcfoh] == '\0')
				{	
					break;
				}
			}
			rehty--;
			zcfoh = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",kfvyb);
	for (int zcfoh = 0, z = 0; zcfoh < ((rehty/2)-2); zcfoh++, z += 3)
	{
		cpzmf[zcfoh] = kfvyb[z];
	}
	int kskxl = 0;
	for (kskxl; kfvyb[kskxl] != '\0'; kskxl++)
		;
	cpzmf[kskxl] = '\0';
	printf(""Der neue String lautet: %s"",cpzmf);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int grske, char* argv[] )
{  
	char twpff[100];
	char enmwg[100];
	int rhqjk = 0;
	for (int dmbnq = 0; dmbnq < grske -1; dmbnq++)
	{
		int pjveo = 0;
		for (pjveo; *(*(argv+1+dmbnq)+pjveo) != '\0'; pjveo++)
		{
			twpff[rhqjk] = *(*(argv+1+dmbnq)+pjveo);
			rhqjk++;
		}
	}
	twpff[rhqjk] = '\0';
	for (int dmbnq = 0; dmbnq < rhqjk+1; dmbnq++)
	{
		if ((twpff[dmbnq] == 'x') || (twpff[dmbnq] == 'y') || (twpff[dmbnq] == 'q') || (twpff[dmbnq] == 'X') || (twpff[dmbnq] == 'Y') || (twpff[dmbnq] == 'Q'))
		{
			while (1)
			{
				twpff[dmbnq] = twpff[dmbnq+1];
				dmbnq++;
				if (twpff[dmbnq] == '\0')
				{	
					break;
				}
			}
			rhqjk--;
			dmbnq = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",twpff);
	for (int dmbnq = 0, z = 0; dmbnq < ((rhqjk/2)-2); dmbnq++, z += 3)
	{
		enmwg[dmbnq] = twpff[z];
	}
	int pjveo = 0;
	for (pjveo; twpff[pjveo] != '\0'; pjveo++)
		;
	enmwg[pjveo] = '\0';
	printf(""Der neue String lautet: %s"",enmwg);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int yhwfr, char* argv[] )
{  
	char qoong[100];
	char cjpqn[100];
	int lnaai = 0;
	for (int vrhho = 0; vrhho < yhwfr -1; vrhho++)
	{
		int faqgl = 0;
		for (faqgl; *(*(argv+1+vrhho)+faqgl) != '\0'; faqgl++)
		{
			qoong[lnaai] = *(*(argv+1+vrhho)+faqgl);
			lnaai++;
		}
	}
	qoong[lnaai] = '\0';
	for (int vrhho = 0; vrhho < lnaai+1; vrhho++)
	{
		if ((qoong[vrhho] == 'x') || (qoong[vrhho] == 'y') || (qoong[vrhho] == 'q') || (qoong[vrhho] == 'X') || (qoong[vrhho] == 'Y') || (qoong[vrhho] == 'Q'))
		{
			while (1)
			{
				qoong[vrhho] = qoong[vrhho+1];
				vrhho++;
				if (qoong[vrhho] == '\0')
				{	
					break;
				}
			}
			lnaai--;
			vrhho = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",qoong);
	for (int vrhho = 0, z = 0; vrhho < ((lnaai/2)-2); vrhho++, z += 3)
	{
		cjpqn[vrhho] = qoong[z];
	}
	int faqgl = 0;
	for (faqgl; qoong[faqgl] != '\0'; faqgl++)
		;
	cjpqn[faqgl] = '\0';
	printf(""Der neue String lautet: %s"",cjpqn);
}",1
155,WS2021,9,Antwort 10,C,VName_204,Name_204,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int aosbs, char* argv[] )
{  
	char gybtl[100];
	char wvtdi[100];
	int ipyeh = 0;
	for (int sqpay = 0; sqpay < aosbs -1; sqpay++)
	{
		int zipxt = 0;
		for (zipxt; *(*(argv+1+sqpay)+zipxt) != '\0'; zipxt++)
		{
			gybtl[ipyeh] = *(*(argv+1+sqpay)+zipxt);
			ipyeh++;
		}
	}
	gybtl[ipyeh] = '\0';
	for (int sqpay = 0; sqpay < ipyeh+1; sqpay++)
	{
		if ((gybtl[sqpay] == 'x') || (gybtl[sqpay] == 'y') || (gybtl[sqpay] == 'q') || (gybtl[sqpay] == 'X') || (gybtl[sqpay] == 'Y') || (gybtl[sqpay] == 'Q'))
		{
			while (1)
			{
				gybtl[sqpay] = gybtl[sqpay+1];
				sqpay++;
				if (gybtl[sqpay] == '\0')
				{	
					break;
				}
			}
			ipyeh--;
			sqpay = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",gybtl);
	for (int sqpay = 0, z = 0; sqpay < ((ipyeh/2)-2); sqpay++, z += 3)
	{
		wvtdi[sqpay] = gybtl[z];
	}
	int zipxt = 0;
	for (zipxt; gybtl[zipxt] != '\0'; zipxt++)
		;
	wvtdi[zipxt] = '\0';
	printf(""Der neue String lautet: %s"",wvtdi);
}",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int vzyqk = 0; src[vzyqk] != '\0' && dest[vzyqk] != '\0' && vzyqk < zahl; vzyqk++)		dest[vzyqk] = src[vzyqk];
{
	int nzegk = 0;
	for( int vzyqk = 0; str[vzyqk] != '\0'; vzyqk++)
		nzegk = vzyqk;
	char soooh[nzegk];
	for( int vzyqk = 0; vzyqk <= nzegk; vzyqk++)
		soooh[vzyqk] = str[nzegk-vzyqk];
	for( int vzyqk = 0; vzyqk <= nzegk; vzyqk++)
		str[vzyqk] = soooh[vzyqk];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int bqyld = 0; src[bqyld] != '\0' && dest[bqyld] != '\0' && bqyld < zahl; bqyld++)		dest[bqyld] = src[bqyld];
{
	int odgoi = 0;
	for( int bqyld = 0; str[bqyld] != '\0'; bqyld++)
		odgoi = bqyld;
	char rhvjj[odgoi];
	for( int bqyld = 0; bqyld <= odgoi; bqyld++)
		rhvjj[bqyld] = str[odgoi-bqyld];
	for( int bqyld = 0; bqyld <= odgoi; bqyld++)
		str[bqyld] = rhvjj[bqyld];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int jkjwe = 0; src[jkjwe] != '\0' && dest[jkjwe] != '\0' && jkjwe < zahl; jkjwe++)		dest[jkjwe] = src[jkjwe];
{
	int rimah = 0;
	for( int jkjwe = 0; str[jkjwe] != '\0'; jkjwe++)
		rimah = jkjwe;
	char lpauv[rimah];
	for( int jkjwe = 0; jkjwe <= rimah; jkjwe++)
		lpauv[jkjwe] = str[rimah-jkjwe];
	for( int jkjwe = 0; jkjwe <= rimah; jkjwe++)
		str[jkjwe] = lpauv[jkjwe];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int jiugg = 0; src[jiugg] != '\0' && dest[jiugg] != '\0' && jiugg < zahl; jiugg++)		dest[jiugg] = src[jiugg];
{
	int fesno = 0;
	for( int jiugg = 0; str[jiugg] != '\0'; jiugg++)
		fesno = jiugg;
	char ofbxf[fesno];
	for( int jiugg = 0; jiugg <= fesno; jiugg++)
		ofbxf[jiugg] = str[fesno-jiugg];
	for( int jiugg = 0; jiugg <= fesno; jiugg++)
		str[jiugg] = ofbxf[jiugg];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int ozybu = 0; src[ozybu] != '\0' && dest[ozybu] != '\0' && ozybu < zahl; ozybu++)		dest[ozybu] = src[ozybu];
{
	int hzahu = 0;
	for( int ozybu = 0; str[ozybu] != '\0'; ozybu++)
		hzahu = ozybu;
	char pedoi[hzahu];
	for( int ozybu = 0; ozybu <= hzahu; ozybu++)
		pedoi[ozybu] = str[hzahu-ozybu];
	for( int ozybu = 0; ozybu <= hzahu; ozybu++)
		str[ozybu] = pedoi[ozybu];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int jawrm = 0; src[jawrm] != '\0' && dest[jawrm] != '\0' && jawrm < zahl; jawrm++)		dest[jawrm] = src[jawrm];
{
	int ewydm = 0;
	for( int jawrm = 0; str[jawrm] != '\0'; jawrm++)
		ewydm = jawrm;
	char jusxj[ewydm];
	for( int jawrm = 0; jawrm <= ewydm; jawrm++)
		jusxj[jawrm] = str[ewydm-jawrm];
	for( int jawrm = 0; jawrm <= ewydm; jawrm++)
		str[jawrm] = jusxj[jawrm];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int quoef = 0; src[quoef] != '\0' && dest[quoef] != '\0' && quoef < zahl; quoef++)		dest[quoef] = src[quoef];
{
	int xnzke = 0;
	for( int quoef = 0; str[quoef] != '\0'; quoef++)
		xnzke = quoef;
	char hlnox[xnzke];
	for( int quoef = 0; quoef <= xnzke; quoef++)
		hlnox[quoef] = str[xnzke-quoef];
	for( int quoef = 0; quoef <= xnzke; quoef++)
		str[quoef] = hlnox[quoef];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int ynvvg = 0; src[ynvvg] != '\0' && dest[ynvvg] != '\0' && ynvvg < zahl; ynvvg++)		dest[ynvvg] = src[ynvvg];
{
	int tgpib = 0;
	for( int ynvvg = 0; str[ynvvg] != '\0'; ynvvg++)
		tgpib = ynvvg;
	char yjmja[tgpib];
	for( int ynvvg = 0; ynvvg <= tgpib; ynvvg++)
		yjmja[ynvvg] = str[tgpib-ynvvg];
	for( int ynvvg = 0; ynvvg <= tgpib; ynvvg++)
		str[ynvvg] = yjmja[ynvvg];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int iiclv = 0; src[iiclv] != '\0' && dest[iiclv] != '\0' && iiclv < zahl; iiclv++)		dest[iiclv] = src[iiclv];
{
	int gywjz = 0;
	for( int iiclv = 0; str[iiclv] != '\0'; iiclv++)
		gywjz = iiclv;
	char ttkun[gywjz];
	for( int iiclv = 0; iiclv <= gywjz; iiclv++)
		ttkun[iiclv] = str[gywjz-iiclv];
	for( int iiclv = 0; iiclv <= gywjz; iiclv++)
		str[iiclv] = ttkun[iiclv];
{  
      }",1
165,WS2021,9,Antwort 10,C,VName_215,Name_215,"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int ynmdx = 0; src[ynmdx] != '\0' && dest[ynmdx] != '\0' && ynmdx < zahl; ynmdx++)		dest[ynmdx] = src[ynmdx];
{
	int fhtrv = 0;
	for( int ynmdx = 0; str[ynmdx] != '\0'; ynmdx++)
		fhtrv = ynmdx;
	char vjigz[fhtrv];
	for( int ynmdx = 0; ynmdx <= fhtrv; ynmdx++)
		vjigz[ynmdx] = str[fhtrv-ynmdx];
	for( int ynmdx = 0; ynmdx <= fhtrv; ynmdx++)
		str[ynmdx] = vjigz[ynmdx];
{  
      }",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int oeewb, char *ezvyo[])
{
    int likap;
    int nseox = 0;
    char vxequ[20];
    char jtjza[15];
    int yeweg = 0;
    for (int ltqum = 1; ltqum < oeewb; ltqum++)
    {
        likap = 0;
        while ((ezvyo[ltqum][likap]) != '\0')
        {
            if (ezvyo[ltqum][likap] != 'yeweg' && ezvyo[ltqum][likap] != 'y' && ezvyo[ltqum][likap] != 'q' && ezvyo[ltqum][likap] != 'X' && ezvyo[ltqum][likap] != 'Y' && ezvyo[ltqum][likap] != 'Q')
            {
                vxequ[nseox] = ezvyo[ltqum][likap];
                nseox++;
            }
            likap++;
        }
    }
    for (int ltqum = 0; ltqum <= nseox; ltqum++)
    {
        if (yeweg > (ltqum / 3) || ltqum == 0)
        {
            if (ltqum == 0)
            {
                jtjza[yeweg] = vxequ[ltqum];
                yeweg++;
            }
            if (((ltqum) % 3) == 0)
            {
                jtjza[yeweg] = vxequ[ltqum];
                yeweg++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int ltqum = 0; ltqum < nseox; ltqum++)
        if (vxequ[ltqum] != '\0')
        {
            printf(""%c"", vxequ[ltqum]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int ltqum = 1; ltqum < (nseox / 2)-1; ltqum++)
            printf(""%c"", jtjza[ltqum]);
    if (vxequ[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int xhhps, char *byfwh[])
{
    int nitpn;
    int gbuzm = 0;
    char xvidp[20];
    char ypasm[15];
    int xobjp = 0;
    for (int etlgt = 1; etlgt < xhhps; etlgt++)
    {
        nitpn = 0;
        while ((byfwh[etlgt][nitpn]) != '\0')
        {
            if (byfwh[etlgt][nitpn] != 'xobjp' && byfwh[etlgt][nitpn] != 'y' && byfwh[etlgt][nitpn] != 'q' && byfwh[etlgt][nitpn] != 'X' && byfwh[etlgt][nitpn] != 'Y' && byfwh[etlgt][nitpn] != 'Q')
            {
                xvidp[gbuzm] = byfwh[etlgt][nitpn];
                gbuzm++;
            }
            nitpn++;
        }
    }
    for (int etlgt = 0; etlgt <= gbuzm; etlgt++)
    {
        if (xobjp > (etlgt / 3) || etlgt == 0)
        {
            if (etlgt == 0)
            {
                ypasm[xobjp] = xvidp[etlgt];
                xobjp++;
            }
            if (((etlgt) % 3) == 0)
            {
                ypasm[xobjp] = xvidp[etlgt];
                xobjp++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int etlgt = 0; etlgt < gbuzm; etlgt++)
        if (xvidp[etlgt] != '\0')
        {
            printf(""%c"", xvidp[etlgt]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int etlgt = 1; etlgt < (gbuzm / 2)-1; etlgt++)
            printf(""%c"", ypasm[etlgt]);
    if (xvidp[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int wnsay, char *wzbtx[])
{
    int vlxme;
    int iausb = 0;
    char wjvpw[20];
    char sqmvu[15];
    int rnskb = 0;
    for (int axorl = 1; axorl < wnsay; axorl++)
    {
        vlxme = 0;
        while ((wzbtx[axorl][vlxme]) != '\0')
        {
            if (wzbtx[axorl][vlxme] != 'rnskb' && wzbtx[axorl][vlxme] != 'y' && wzbtx[axorl][vlxme] != 'q' && wzbtx[axorl][vlxme] != 'X' && wzbtx[axorl][vlxme] != 'Y' && wzbtx[axorl][vlxme] != 'Q')
            {
                wjvpw[iausb] = wzbtx[axorl][vlxme];
                iausb++;
            }
            vlxme++;
        }
    }
    for (int axorl = 0; axorl <= iausb; axorl++)
    {
        if (rnskb > (axorl / 3) || axorl == 0)
        {
            if (axorl == 0)
            {
                sqmvu[rnskb] = wjvpw[axorl];
                rnskb++;
            }
            if (((axorl) % 3) == 0)
            {
                sqmvu[rnskb] = wjvpw[axorl];
                rnskb++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int axorl = 0; axorl < iausb; axorl++)
        if (wjvpw[axorl] != '\0')
        {
            printf(""%c"", wjvpw[axorl]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int axorl = 1; axorl < (iausb / 2)-1; axorl++)
            printf(""%c"", sqmvu[axorl]);
    if (wjvpw[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int uacyo, char *pfzsh[])
{
    int kvtui;
    int swxlm = 0;
    char ddlpc[20];
    char ncuzf[15];
    int dwvon = 0;
    for (int iezdn = 1; iezdn < uacyo; iezdn++)
    {
        kvtui = 0;
        while ((pfzsh[iezdn][kvtui]) != '\0')
        {
            if (pfzsh[iezdn][kvtui] != 'dwvon' && pfzsh[iezdn][kvtui] != 'y' && pfzsh[iezdn][kvtui] != 'q' && pfzsh[iezdn][kvtui] != 'X' && pfzsh[iezdn][kvtui] != 'Y' && pfzsh[iezdn][kvtui] != 'Q')
            {
                ddlpc[swxlm] = pfzsh[iezdn][kvtui];
                swxlm++;
            }
            kvtui++;
        }
    }
    for (int iezdn = 0; iezdn <= swxlm; iezdn++)
    {
        if (dwvon > (iezdn / 3) || iezdn == 0)
        {
            if (iezdn == 0)
            {
                ncuzf[dwvon] = ddlpc[iezdn];
                dwvon++;
            }
            if (((iezdn) % 3) == 0)
            {
                ncuzf[dwvon] = ddlpc[iezdn];
                dwvon++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int iezdn = 0; iezdn < swxlm; iezdn++)
        if (ddlpc[iezdn] != '\0')
        {
            printf(""%c"", ddlpc[iezdn]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int iezdn = 1; iezdn < (swxlm / 2)-1; iezdn++)
            printf(""%c"", ncuzf[iezdn]);
    if (ddlpc[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int tgrvn, char *threy[])
{
    int irlos;
    int tgrrv = 0;
    char mbfug[20];
    char bucrl[15];
    int uuzew = 0;
    for (int udbmq = 1; udbmq < tgrvn; udbmq++)
    {
        irlos = 0;
        while ((threy[udbmq][irlos]) != '\0')
        {
            if (threy[udbmq][irlos] != 'uuzew' && threy[udbmq][irlos] != 'y' && threy[udbmq][irlos] != 'q' && threy[udbmq][irlos] != 'X' && threy[udbmq][irlos] != 'Y' && threy[udbmq][irlos] != 'Q')
            {
                mbfug[tgrrv] = threy[udbmq][irlos];
                tgrrv++;
            }
            irlos++;
        }
    }
    for (int udbmq = 0; udbmq <= tgrrv; udbmq++)
    {
        if (uuzew > (udbmq / 3) || udbmq == 0)
        {
            if (udbmq == 0)
            {
                bucrl[uuzew] = mbfug[udbmq];
                uuzew++;
            }
            if (((udbmq) % 3) == 0)
            {
                bucrl[uuzew] = mbfug[udbmq];
                uuzew++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int udbmq = 0; udbmq < tgrrv; udbmq++)
        if (mbfug[udbmq] != '\0')
        {
            printf(""%c"", mbfug[udbmq]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int udbmq = 1; udbmq < (tgrrv / 2)-1; udbmq++)
            printf(""%c"", bucrl[udbmq]);
    if (mbfug[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int ymhdl, char *mcujb[])
{
    int xuslk;
    int ckain = 0;
    char yopev[20];
    char ouyph[15];
    int gctzk = 0;
    for (int hsmdc = 1; hsmdc < ymhdl; hsmdc++)
    {
        xuslk = 0;
        while ((mcujb[hsmdc][xuslk]) != '\0')
        {
            if (mcujb[hsmdc][xuslk] != 'gctzk' && mcujb[hsmdc][xuslk] != 'y' && mcujb[hsmdc][xuslk] != 'q' && mcujb[hsmdc][xuslk] != 'X' && mcujb[hsmdc][xuslk] != 'Y' && mcujb[hsmdc][xuslk] != 'Q')
            {
                yopev[ckain] = mcujb[hsmdc][xuslk];
                ckain++;
            }
            xuslk++;
        }
    }
    for (int hsmdc = 0; hsmdc <= ckain; hsmdc++)
    {
        if (gctzk > (hsmdc / 3) || hsmdc == 0)
        {
            if (hsmdc == 0)
            {
                ouyph[gctzk] = yopev[hsmdc];
                gctzk++;
            }
            if (((hsmdc) % 3) == 0)
            {
                ouyph[gctzk] = yopev[hsmdc];
                gctzk++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int hsmdc = 0; hsmdc < ckain; hsmdc++)
        if (yopev[hsmdc] != '\0')
        {
            printf(""%c"", yopev[hsmdc]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int hsmdc = 1; hsmdc < (ckain / 2)-1; hsmdc++)
            printf(""%c"", ouyph[hsmdc]);
    if (yopev[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int pbopa, char *eqdao[])
{
    int hhdxo;
    int omvct = 0;
    char ywbcu[20];
    char xouum[15];
    int nobhe = 0;
    for (int ufsem = 1; ufsem < pbopa; ufsem++)
    {
        hhdxo = 0;
        while ((eqdao[ufsem][hhdxo]) != '\0')
        {
            if (eqdao[ufsem][hhdxo] != 'nobhe' && eqdao[ufsem][hhdxo] != 'y' && eqdao[ufsem][hhdxo] != 'q' && eqdao[ufsem][hhdxo] != 'X' && eqdao[ufsem][hhdxo] != 'Y' && eqdao[ufsem][hhdxo] != 'Q')
            {
                ywbcu[omvct] = eqdao[ufsem][hhdxo];
                omvct++;
            }
            hhdxo++;
        }
    }
    for (int ufsem = 0; ufsem <= omvct; ufsem++)
    {
        if (nobhe > (ufsem / 3) || ufsem == 0)
        {
            if (ufsem == 0)
            {
                xouum[nobhe] = ywbcu[ufsem];
                nobhe++;
            }
            if (((ufsem) % 3) == 0)
            {
                xouum[nobhe] = ywbcu[ufsem];
                nobhe++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int ufsem = 0; ufsem < omvct; ufsem++)
        if (ywbcu[ufsem] != '\0')
        {
            printf(""%c"", ywbcu[ufsem]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int ufsem = 1; ufsem < (omvct / 2)-1; ufsem++)
            printf(""%c"", xouum[ufsem]);
    if (ywbcu[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int bzgeq, char *xbtjx[])
{
    int wpgxl;
    int tikfk = 0;
    char chstw[20];
    char pvvxu[15];
    int hecyn = 0;
    for (int lzgip = 1; lzgip < bzgeq; lzgip++)
    {
        wpgxl = 0;
        while ((xbtjx[lzgip][wpgxl]) != '\0')
        {
            if (xbtjx[lzgip][wpgxl] != 'hecyn' && xbtjx[lzgip][wpgxl] != 'y' && xbtjx[lzgip][wpgxl] != 'q' && xbtjx[lzgip][wpgxl] != 'X' && xbtjx[lzgip][wpgxl] != 'Y' && xbtjx[lzgip][wpgxl] != 'Q')
            {
                chstw[tikfk] = xbtjx[lzgip][wpgxl];
                tikfk++;
            }
            wpgxl++;
        }
    }
    for (int lzgip = 0; lzgip <= tikfk; lzgip++)
    {
        if (hecyn > (lzgip / 3) || lzgip == 0)
        {
            if (lzgip == 0)
            {
                pvvxu[hecyn] = chstw[lzgip];
                hecyn++;
            }
            if (((lzgip) % 3) == 0)
            {
                pvvxu[hecyn] = chstw[lzgip];
                hecyn++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int lzgip = 0; lzgip < tikfk; lzgip++)
        if (chstw[lzgip] != '\0')
        {
            printf(""%c"", chstw[lzgip]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int lzgip = 1; lzgip < (tikfk / 2)-1; lzgip++)
            printf(""%c"", pvvxu[lzgip]);
    if (chstw[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int bhmwd, char *qrmym[])
{
    int jxiog;
    int isfqj = 0;
    char gfjqn[20];
    char rtdlk[15];
    int hdadp = 0;
    for (int xwwhi = 1; xwwhi < bhmwd; xwwhi++)
    {
        jxiog = 0;
        while ((qrmym[xwwhi][jxiog]) != '\0')
        {
            if (qrmym[xwwhi][jxiog] != 'hdadp' && qrmym[xwwhi][jxiog] != 'y' && qrmym[xwwhi][jxiog] != 'q' && qrmym[xwwhi][jxiog] != 'X' && qrmym[xwwhi][jxiog] != 'Y' && qrmym[xwwhi][jxiog] != 'Q')
            {
                gfjqn[isfqj] = qrmym[xwwhi][jxiog];
                isfqj++;
            }
            jxiog++;
        }
    }
    for (int xwwhi = 0; xwwhi <= isfqj; xwwhi++)
    {
        if (hdadp > (xwwhi / 3) || xwwhi == 0)
        {
            if (xwwhi == 0)
            {
                rtdlk[hdadp] = gfjqn[xwwhi];
                hdadp++;
            }
            if (((xwwhi) % 3) == 0)
            {
                rtdlk[hdadp] = gfjqn[xwwhi];
                hdadp++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int xwwhi = 0; xwwhi < isfqj; xwwhi++)
        if (gfjqn[xwwhi] != '\0')
        {
            printf(""%c"", gfjqn[xwwhi]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int xwwhi = 1; xwwhi < (isfqj / 2)-1; xwwhi++)
            printf(""%c"", rtdlk[xwwhi]);
    if (gfjqn[0] == 'z')
        printf(""z"");
}",1
174,WS2021,9,Antwort 10,C,VName_193,Name_193,"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int jcwsz, char *jlrpe[])
{
    int rjteo;
    int mrumx = 0;
    char tnvff[20];
    char neatn[15];
    int lpryz = 0;
    for (int gfeho = 1; gfeho < jcwsz; gfeho++)
    {
        rjteo = 0;
        while ((jlrpe[gfeho][rjteo]) != '\0')
        {
            if (jlrpe[gfeho][rjteo] != 'lpryz' && jlrpe[gfeho][rjteo] != 'y' && jlrpe[gfeho][rjteo] != 'q' && jlrpe[gfeho][rjteo] != 'X' && jlrpe[gfeho][rjteo] != 'Y' && jlrpe[gfeho][rjteo] != 'Q')
            {
                tnvff[mrumx] = jlrpe[gfeho][rjteo];
                mrumx++;
            }
            rjteo++;
        }
    }
    for (int gfeho = 0; gfeho <= mrumx; gfeho++)
    {
        if (lpryz > (gfeho / 3) || gfeho == 0)
        {
            if (gfeho == 0)
            {
                neatn[lpryz] = tnvff[gfeho];
                lpryz++;
            }
            if (((gfeho) % 3) == 0)
            {
                neatn[lpryz] = tnvff[gfeho];
                lpryz++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int gfeho = 0; gfeho < mrumx; gfeho++)
        if (tnvff[gfeho] != '\0')
        {
            printf(""%c"", tnvff[gfeho]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int gfeho = 1; gfeho < (mrumx / 2)-1; gfeho++)
            printf(""%c"", neatn[gfeho]);
    if (tnvff[0] == 'z')
        printf(""z"");
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int fkaoj, char *cgiyk[])
{   
     
    
    
    for (int qlgjg = 1; qlgjg < fkaoj; qlgjg++){
        char * CurrentCommandString = cgiyk[qlgjg];  
        
        
        
        int vthez = 0;
        while (CurrentCommandString[vthez] != '\0' && CurrentCommandString[vthez] != ' ') {
            if (CurrentCommandString[vthez] == 'x' 
             || CurrentCommandString[vthez] == 'y' 
             || CurrentCommandString[vthez] == 'q'
             || CurrentCommandString[vthez] == 'X'
             || CurrentCommandString[vthez] == 'Y' 
             || CurrentCommandString[vthez] == 'Q')
             {   
                 int idqve = vthez;
                 while (CurrentCommandString[vthez] != '\0' && CurrentCommandString[vthez] != ' ') {
                    CurrentCommandString[idqve] = CurrentCommandString[idqve + 1]; 
                    ++idqve; 
                 }
             }
            ++vthez;
         }
        
    }
    char agkwr[5000];
    int hnsra = 0;
    char zcfea[5000];
    int aqwlg = 0;
    for (int qlgjg = 1; qlgjg < fkaoj; qlgjg++){
        char * CurrentCommandString = cgiyk[qlgjg];  
        
        int plfqz, idqve;
          
          plfqz = 0;
          while (agkwr[plfqz] != '\0' && agkwr[plfqz] != ' ') {
            ++plfqz;
          }
          
          for (idqve = 0; CurrentCommandString[idqve] != '\0' && CurrentCommandString[plfqz] != ' '; ++idqve, ++plfqz) {
            agkwr[plfqz] = CurrentCommandString[idqve];
          }
          
          agkwr[plfqz] = '\0';       
    }
        
        int plfqz, idqve;
        
        plfqz = 0;
        while (zcfea[plfqz] != '\0' && zcfea[plfqz] != ' ') {
        ++plfqz;
        }
        
        for (idqve = 0; agkwr[idqve] != '\0' && agkwr[plfqz] != ' '; ++plfqz) {
         zcfea[plfqz] = agkwr[idqve];
         
         idqve+=3;
        }
        
        zcfea[plfqz] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", agkwr);
    printf(""Der neue String lautet: %s"", zcfea);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int phekf, char *bvsfe[])
{   
     
    
    
    for (int uqxyl = 1; uqxyl < phekf; uqxyl++){
        char * CurrentCommandString = bvsfe[uqxyl];  
        
        
        
        int lgcfw = 0;
        while (CurrentCommandString[lgcfw] != '\0' && CurrentCommandString[lgcfw] != ' ') {
            if (CurrentCommandString[lgcfw] == 'x' 
             || CurrentCommandString[lgcfw] == 'y' 
             || CurrentCommandString[lgcfw] == 'q'
             || CurrentCommandString[lgcfw] == 'X'
             || CurrentCommandString[lgcfw] == 'Y' 
             || CurrentCommandString[lgcfw] == 'Q')
             {   
                 int fgtwl = lgcfw;
                 while (CurrentCommandString[lgcfw] != '\0' && CurrentCommandString[lgcfw] != ' ') {
                    CurrentCommandString[fgtwl] = CurrentCommandString[fgtwl + 1]; 
                    ++fgtwl; 
                 }
             }
            ++lgcfw;
         }
        
    }
    char bupul[5000];
    int epfxq = 0;
    char pjzls[5000];
    int kjopk = 0;
    for (int uqxyl = 1; uqxyl < phekf; uqxyl++){
        char * CurrentCommandString = bvsfe[uqxyl];  
        
        int xagmd, fgtwl;
          
          xagmd = 0;
          while (bupul[xagmd] != '\0' && bupul[xagmd] != ' ') {
            ++xagmd;
          }
          
          for (fgtwl = 0; CurrentCommandString[fgtwl] != '\0' && CurrentCommandString[xagmd] != ' '; ++fgtwl, ++xagmd) {
            bupul[xagmd] = CurrentCommandString[fgtwl];
          }
          
          bupul[xagmd] = '\0';       
    }
        
        int xagmd, fgtwl;
        
        xagmd = 0;
        while (pjzls[xagmd] != '\0' && pjzls[xagmd] != ' ') {
        ++xagmd;
        }
        
        for (fgtwl = 0; bupul[fgtwl] != '\0' && bupul[xagmd] != ' '; ++xagmd) {
         pjzls[xagmd] = bupul[fgtwl];
         
         fgtwl+=3;
        }
        
        pjzls[xagmd] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", bupul);
    printf(""Der neue String lautet: %s"", pjzls);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int xpsaw, char *fzfjb[])
{   
     
    
    
    for (int ejarc = 1; ejarc < xpsaw; ejarc++){
        char * CurrentCommandString = fzfjb[ejarc];  
        
        
        
        int mvarl = 0;
        while (CurrentCommandString[mvarl] != '\0' && CurrentCommandString[mvarl] != ' ') {
            if (CurrentCommandString[mvarl] == 'x' 
             || CurrentCommandString[mvarl] == 'y' 
             || CurrentCommandString[mvarl] == 'q'
             || CurrentCommandString[mvarl] == 'X'
             || CurrentCommandString[mvarl] == 'Y' 
             || CurrentCommandString[mvarl] == 'Q')
             {   
                 int jutty = mvarl;
                 while (CurrentCommandString[mvarl] != '\0' && CurrentCommandString[mvarl] != ' ') {
                    CurrentCommandString[jutty] = CurrentCommandString[jutty + 1]; 
                    ++jutty; 
                 }
             }
            ++mvarl;
         }
        
    }
    char isgpc[5000];
    int sbfwp = 0;
    char unwog[5000];
    int glizn = 0;
    for (int ejarc = 1; ejarc < xpsaw; ejarc++){
        char * CurrentCommandString = fzfjb[ejarc];  
        
        int ifelh, jutty;
          
          ifelh = 0;
          while (isgpc[ifelh] != '\0' && isgpc[ifelh] != ' ') {
            ++ifelh;
          }
          
          for (jutty = 0; CurrentCommandString[jutty] != '\0' && CurrentCommandString[ifelh] != ' '; ++jutty, ++ifelh) {
            isgpc[ifelh] = CurrentCommandString[jutty];
          }
          
          isgpc[ifelh] = '\0';       
    }
        
        int ifelh, jutty;
        
        ifelh = 0;
        while (unwog[ifelh] != '\0' && unwog[ifelh] != ' ') {
        ++ifelh;
        }
        
        for (jutty = 0; isgpc[jutty] != '\0' && isgpc[ifelh] != ' '; ++ifelh) {
         unwog[ifelh] = isgpc[jutty];
         
         jutty+=3;
        }
        
        unwog[ifelh] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", isgpc);
    printf(""Der neue String lautet: %s"", unwog);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int lbxgh, char *voxfz[])
{   
     
    
    
    for (int rabzg = 1; rabzg < lbxgh; rabzg++){
        char * CurrentCommandString = voxfz[rabzg];  
        
        
        
        int pzcuy = 0;
        while (CurrentCommandString[pzcuy] != '\0' && CurrentCommandString[pzcuy] != ' ') {
            if (CurrentCommandString[pzcuy] == 'x' 
             || CurrentCommandString[pzcuy] == 'y' 
             || CurrentCommandString[pzcuy] == 'q'
             || CurrentCommandString[pzcuy] == 'X'
             || CurrentCommandString[pzcuy] == 'Y' 
             || CurrentCommandString[pzcuy] == 'Q')
             {   
                 int mtfzq = pzcuy;
                 while (CurrentCommandString[pzcuy] != '\0' && CurrentCommandString[pzcuy] != ' ') {
                    CurrentCommandString[mtfzq] = CurrentCommandString[mtfzq + 1]; 
                    ++mtfzq; 
                 }
             }
            ++pzcuy;
         }
        
    }
    char alrpc[5000];
    int cyziz = 0;
    char tglmy[5000];
    int eqxdb = 0;
    for (int rabzg = 1; rabzg < lbxgh; rabzg++){
        char * CurrentCommandString = voxfz[rabzg];  
        
        int gfltu, mtfzq;
          
          gfltu = 0;
          while (alrpc[gfltu] != '\0' && alrpc[gfltu] != ' ') {
            ++gfltu;
          }
          
          for (mtfzq = 0; CurrentCommandString[mtfzq] != '\0' && CurrentCommandString[gfltu] != ' '; ++mtfzq, ++gfltu) {
            alrpc[gfltu] = CurrentCommandString[mtfzq];
          }
          
          alrpc[gfltu] = '\0';       
    }
        
        int gfltu, mtfzq;
        
        gfltu = 0;
        while (tglmy[gfltu] != '\0' && tglmy[gfltu] != ' ') {
        ++gfltu;
        }
        
        for (mtfzq = 0; alrpc[mtfzq] != '\0' && alrpc[gfltu] != ' '; ++gfltu) {
         tglmy[gfltu] = alrpc[mtfzq];
         
         mtfzq+=3;
        }
        
        tglmy[gfltu] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", alrpc);
    printf(""Der neue String lautet: %s"", tglmy);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int cavml, char *oenrk[])
{   
     
    
    
    for (int dxacm = 1; dxacm < cavml; dxacm++){
        char * CurrentCommandString = oenrk[dxacm];  
        
        
        
        int mewgf = 0;
        while (CurrentCommandString[mewgf] != '\0' && CurrentCommandString[mewgf] != ' ') {
            if (CurrentCommandString[mewgf] == 'x' 
             || CurrentCommandString[mewgf] == 'y' 
             || CurrentCommandString[mewgf] == 'q'
             || CurrentCommandString[mewgf] == 'X'
             || CurrentCommandString[mewgf] == 'Y' 
             || CurrentCommandString[mewgf] == 'Q')
             {   
                 int dpmew = mewgf;
                 while (CurrentCommandString[mewgf] != '\0' && CurrentCommandString[mewgf] != ' ') {
                    CurrentCommandString[dpmew] = CurrentCommandString[dpmew + 1]; 
                    ++dpmew; 
                 }
             }
            ++mewgf;
         }
        
    }
    char ihnjq[5000];
    int lfbxt = 0;
    char ijdda[5000];
    int qrhkb = 0;
    for (int dxacm = 1; dxacm < cavml; dxacm++){
        char * CurrentCommandString = oenrk[dxacm];  
        
        int tyafl, dpmew;
          
          tyafl = 0;
          while (ihnjq[tyafl] != '\0' && ihnjq[tyafl] != ' ') {
            ++tyafl;
          }
          
          for (dpmew = 0; CurrentCommandString[dpmew] != '\0' && CurrentCommandString[tyafl] != ' '; ++dpmew, ++tyafl) {
            ihnjq[tyafl] = CurrentCommandString[dpmew];
          }
          
          ihnjq[tyafl] = '\0';       
    }
        
        int tyafl, dpmew;
        
        tyafl = 0;
        while (ijdda[tyafl] != '\0' && ijdda[tyafl] != ' ') {
        ++tyafl;
        }
        
        for (dpmew = 0; ihnjq[dpmew] != '\0' && ihnjq[tyafl] != ' '; ++tyafl) {
         ijdda[tyafl] = ihnjq[dpmew];
         
         dpmew+=3;
        }
        
        ijdda[tyafl] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", ihnjq);
    printf(""Der neue String lautet: %s"", ijdda);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int lepmd, char *kbiuy[])
{   
     
    
    
    for (int wadpk = 1; wadpk < lepmd; wadpk++){
        char * CurrentCommandString = kbiuy[wadpk];  
        
        
        
        int zuixt = 0;
        while (CurrentCommandString[zuixt] != '\0' && CurrentCommandString[zuixt] != ' ') {
            if (CurrentCommandString[zuixt] == 'x' 
             || CurrentCommandString[zuixt] == 'y' 
             || CurrentCommandString[zuixt] == 'q'
             || CurrentCommandString[zuixt] == 'X'
             || CurrentCommandString[zuixt] == 'Y' 
             || CurrentCommandString[zuixt] == 'Q')
             {   
                 int qcxrm = zuixt;
                 while (CurrentCommandString[zuixt] != '\0' && CurrentCommandString[zuixt] != ' ') {
                    CurrentCommandString[qcxrm] = CurrentCommandString[qcxrm + 1]; 
                    ++qcxrm; 
                 }
             }
            ++zuixt;
         }
        
    }
    char cethv[5000];
    int ofgua = 0;
    char sjhar[5000];
    int hyyrr = 0;
    for (int wadpk = 1; wadpk < lepmd; wadpk++){
        char * CurrentCommandString = kbiuy[wadpk];  
        
        int syhby, qcxrm;
          
          syhby = 0;
          while (cethv[syhby] != '\0' && cethv[syhby] != ' ') {
            ++syhby;
          }
          
          for (qcxrm = 0; CurrentCommandString[qcxrm] != '\0' && CurrentCommandString[syhby] != ' '; ++qcxrm, ++syhby) {
            cethv[syhby] = CurrentCommandString[qcxrm];
          }
          
          cethv[syhby] = '\0';       
    }
        
        int syhby, qcxrm;
        
        syhby = 0;
        while (sjhar[syhby] != '\0' && sjhar[syhby] != ' ') {
        ++syhby;
        }
        
        for (qcxrm = 0; cethv[qcxrm] != '\0' && cethv[syhby] != ' '; ++syhby) {
         sjhar[syhby] = cethv[qcxrm];
         
         qcxrm+=3;
        }
        
        sjhar[syhby] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", cethv);
    printf(""Der neue String lautet: %s"", sjhar);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int ohbqx, char *ysvzi[])
{   
     
    
    
    for (int uaqrm = 1; uaqrm < ohbqx; uaqrm++){
        char * CurrentCommandString = ysvzi[uaqrm];  
        
        
        
        int injze = 0;
        while (CurrentCommandString[injze] != '\0' && CurrentCommandString[injze] != ' ') {
            if (CurrentCommandString[injze] == 'x' 
             || CurrentCommandString[injze] == 'y' 
             || CurrentCommandString[injze] == 'q'
             || CurrentCommandString[injze] == 'X'
             || CurrentCommandString[injze] == 'Y' 
             || CurrentCommandString[injze] == 'Q')
             {   
                 int lhfjv = injze;
                 while (CurrentCommandString[injze] != '\0' && CurrentCommandString[injze] != ' ') {
                    CurrentCommandString[lhfjv] = CurrentCommandString[lhfjv + 1]; 
                    ++lhfjv; 
                 }
             }
            ++injze;
         }
        
    }
    char ybmay[5000];
    int yvoag = 0;
    char gtycn[5000];
    int qjiqt = 0;
    for (int uaqrm = 1; uaqrm < ohbqx; uaqrm++){
        char * CurrentCommandString = ysvzi[uaqrm];  
        
        int xhjvg, lhfjv;
          
          xhjvg = 0;
          while (ybmay[xhjvg] != '\0' && ybmay[xhjvg] != ' ') {
            ++xhjvg;
          }
          
          for (lhfjv = 0; CurrentCommandString[lhfjv] != '\0' && CurrentCommandString[xhjvg] != ' '; ++lhfjv, ++xhjvg) {
            ybmay[xhjvg] = CurrentCommandString[lhfjv];
          }
          
          ybmay[xhjvg] = '\0';       
    }
        
        int xhjvg, lhfjv;
        
        xhjvg = 0;
        while (gtycn[xhjvg] != '\0' && gtycn[xhjvg] != ' ') {
        ++xhjvg;
        }
        
        for (lhfjv = 0; ybmay[lhfjv] != '\0' && ybmay[xhjvg] != ' '; ++xhjvg) {
         gtycn[xhjvg] = ybmay[lhfjv];
         
         lhfjv+=3;
        }
        
        gtycn[xhjvg] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", ybmay);
    printf(""Der neue String lautet: %s"", gtycn);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int adlwr, char *fxghx[])
{   
     
    
    
    for (int apnvk = 1; apnvk < adlwr; apnvk++){
        char * CurrentCommandString = fxghx[apnvk];  
        
        
        
        int tsyip = 0;
        while (CurrentCommandString[tsyip] != '\0' && CurrentCommandString[tsyip] != ' ') {
            if (CurrentCommandString[tsyip] == 'x' 
             || CurrentCommandString[tsyip] == 'y' 
             || CurrentCommandString[tsyip] == 'q'
             || CurrentCommandString[tsyip] == 'X'
             || CurrentCommandString[tsyip] == 'Y' 
             || CurrentCommandString[tsyip] == 'Q')
             {   
                 int pulha = tsyip;
                 while (CurrentCommandString[tsyip] != '\0' && CurrentCommandString[tsyip] != ' ') {
                    CurrentCommandString[pulha] = CurrentCommandString[pulha + 1]; 
                    ++pulha; 
                 }
             }
            ++tsyip;
         }
        
    }
    char apqut[5000];
    int lmwod = 0;
    char ucsmy[5000];
    int dgvcc = 0;
    for (int apnvk = 1; apnvk < adlwr; apnvk++){
        char * CurrentCommandString = fxghx[apnvk];  
        
        int fpboh, pulha;
          
          fpboh = 0;
          while (apqut[fpboh] != '\0' && apqut[fpboh] != ' ') {
            ++fpboh;
          }
          
          for (pulha = 0; CurrentCommandString[pulha] != '\0' && CurrentCommandString[fpboh] != ' '; ++pulha, ++fpboh) {
            apqut[fpboh] = CurrentCommandString[pulha];
          }
          
          apqut[fpboh] = '\0';       
    }
        
        int fpboh, pulha;
        
        fpboh = 0;
        while (ucsmy[fpboh] != '\0' && ucsmy[fpboh] != ' ') {
        ++fpboh;
        }
        
        for (pulha = 0; apqut[pulha] != '\0' && apqut[fpboh] != ' '; ++fpboh) {
         ucsmy[fpboh] = apqut[pulha];
         
         pulha+=3;
        }
        
        ucsmy[fpboh] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", apqut);
    printf(""Der neue String lautet: %s"", ucsmy);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int opoji, char *xqnua[])
{   
     
    
    
    for (int msoye = 1; msoye < opoji; msoye++){
        char * CurrentCommandString = xqnua[msoye];  
        
        
        
        int biadp = 0;
        while (CurrentCommandString[biadp] != '\0' && CurrentCommandString[biadp] != ' ') {
            if (CurrentCommandString[biadp] == 'x' 
             || CurrentCommandString[biadp] == 'y' 
             || CurrentCommandString[biadp] == 'q'
             || CurrentCommandString[biadp] == 'X'
             || CurrentCommandString[biadp] == 'Y' 
             || CurrentCommandString[biadp] == 'Q')
             {   
                 int hbtzl = biadp;
                 while (CurrentCommandString[biadp] != '\0' && CurrentCommandString[biadp] != ' ') {
                    CurrentCommandString[hbtzl] = CurrentCommandString[hbtzl + 1]; 
                    ++hbtzl; 
                 }
             }
            ++biadp;
         }
        
    }
    char hrubl[5000];
    int wtdrm = 0;
    char hdosn[5000];
    int piakz = 0;
    for (int msoye = 1; msoye < opoji; msoye++){
        char * CurrentCommandString = xqnua[msoye];  
        
        int ehhet, hbtzl;
          
          ehhet = 0;
          while (hrubl[ehhet] != '\0' && hrubl[ehhet] != ' ') {
            ++ehhet;
          }
          
          for (hbtzl = 0; CurrentCommandString[hbtzl] != '\0' && CurrentCommandString[ehhet] != ' '; ++hbtzl, ++ehhet) {
            hrubl[ehhet] = CurrentCommandString[hbtzl];
          }
          
          hrubl[ehhet] = '\0';       
    }
        
        int ehhet, hbtzl;
        
        ehhet = 0;
        while (hdosn[ehhet] != '\0' && hdosn[ehhet] != ' ') {
        ++ehhet;
        }
        
        for (hbtzl = 0; hrubl[hbtzl] != '\0' && hrubl[ehhet] != ' '; ++ehhet) {
         hdosn[ehhet] = hrubl[hbtzl];
         
         hbtzl+=3;
        }
        
        hdosn[ehhet] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", hrubl);
    printf(""Der neue String lautet: %s"", hdosn);
}",1
182,WS2021,9,Antwort 10,C,VName_199,Name_199,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int qzzrf, char *ndtqk[])
{   
     
    
    
    for (int hzghl = 1; hzghl < qzzrf; hzghl++){
        char * CurrentCommandString = ndtqk[hzghl];  
        
        
        
        int dszxu = 0;
        while (CurrentCommandString[dszxu] != '\0' && CurrentCommandString[dszxu] != ' ') {
            if (CurrentCommandString[dszxu] == 'x' 
             || CurrentCommandString[dszxu] == 'y' 
             || CurrentCommandString[dszxu] == 'q'
             || CurrentCommandString[dszxu] == 'X'
             || CurrentCommandString[dszxu] == 'Y' 
             || CurrentCommandString[dszxu] == 'Q')
             {   
                 int vfysq = dszxu;
                 while (CurrentCommandString[dszxu] != '\0' && CurrentCommandString[dszxu] != ' ') {
                    CurrentCommandString[vfysq] = CurrentCommandString[vfysq + 1]; 
                    ++vfysq; 
                 }
             }
            ++dszxu;
         }
        
    }
    char qupvu[5000];
    int oalvc = 0;
    char jeteg[5000];
    int rqbff = 0;
    for (int hzghl = 1; hzghl < qzzrf; hzghl++){
        char * CurrentCommandString = ndtqk[hzghl];  
        
        int ijkph, vfysq;
          
          ijkph = 0;
          while (qupvu[ijkph] != '\0' && qupvu[ijkph] != ' ') {
            ++ijkph;
          }
          
          for (vfysq = 0; CurrentCommandString[vfysq] != '\0' && CurrentCommandString[ijkph] != ' '; ++vfysq, ++ijkph) {
            qupvu[ijkph] = CurrentCommandString[vfysq];
          }
          
          qupvu[ijkph] = '\0';       
    }
        
        int ijkph, vfysq;
        
        ijkph = 0;
        while (jeteg[ijkph] != '\0' && jeteg[ijkph] != ' ') {
        ++ijkph;
        }
        
        for (vfysq = 0; qupvu[vfysq] != '\0' && qupvu[ijkph] != ' '; ++ijkph) {
         jeteg[ijkph] = qupvu[vfysq];
         
         vfysq+=3;
        }
        
        jeteg[ijkph] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", qupvu);
    printf(""Der neue String lautet: %s"", jeteg);
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int mpcvr=0;((mpcvr<zahl)&&((dest[mpcvr])!=('\0')))&&((src[mpcvr])!=('\0'));mpcvr++)
dest[mpcvr]=src[mpcvr];
{	char ebbvb[30]="""";
	int mpcvr=0;
	for(;(str[mpcvr+1])!=('\0');mpcvr++){	for(int sxitb=0;(str[sxitb])!=('\0');sxitb++) {ebbvb[sxitb]=str[mpcvr-sxitb];	for(int sxitb=0;(str[sxitb])!=('\0');sxitb++) {str[sxitb]=ebbvb[(sxitb)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int aqohp=0;((aqohp<zahl)&&((dest[aqohp])!=('\0')))&&((src[aqohp])!=('\0'));aqohp++)
dest[aqohp]=src[aqohp];
{	char nzema[30]="""";
	int aqohp=0;
	for(;(str[aqohp+1])!=('\0');aqohp++){	for(int eicjr=0;(str[eicjr])!=('\0');eicjr++) {nzema[eicjr]=str[aqohp-eicjr];	for(int eicjr=0;(str[eicjr])!=('\0');eicjr++) {str[eicjr]=nzema[(eicjr)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int fkfzj=0;((fkfzj<zahl)&&((dest[fkfzj])!=('\0')))&&((src[fkfzj])!=('\0'));fkfzj++)
dest[fkfzj]=src[fkfzj];
{	char vnxlh[30]="""";
	int fkfzj=0;
	for(;(str[fkfzj+1])!=('\0');fkfzj++){	for(int yshmo=0;(str[yshmo])!=('\0');yshmo++) {vnxlh[yshmo]=str[fkfzj-yshmo];	for(int yshmo=0;(str[yshmo])!=('\0');yshmo++) {str[yshmo]=vnxlh[(yshmo)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int vpjar=0;((vpjar<zahl)&&((dest[vpjar])!=('\0')))&&((src[vpjar])!=('\0'));vpjar++)
dest[vpjar]=src[vpjar];
{	char wdbbp[30]="""";
	int vpjar=0;
	for(;(str[vpjar+1])!=('\0');vpjar++){	for(int bxhhh=0;(str[bxhhh])!=('\0');bxhhh++) {wdbbp[bxhhh]=str[vpjar-bxhhh];	for(int bxhhh=0;(str[bxhhh])!=('\0');bxhhh++) {str[bxhhh]=wdbbp[(bxhhh)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int jtabs=0;((jtabs<zahl)&&((dest[jtabs])!=('\0')))&&((src[jtabs])!=('\0'));jtabs++)
dest[jtabs]=src[jtabs];
{	char bpikz[30]="""";
	int jtabs=0;
	for(;(str[jtabs+1])!=('\0');jtabs++){	for(int pfllr=0;(str[pfllr])!=('\0');pfllr++) {bpikz[pfllr]=str[jtabs-pfllr];	for(int pfllr=0;(str[pfllr])!=('\0');pfllr++) {str[pfllr]=bpikz[(pfllr)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int yumyl=0;((yumyl<zahl)&&((dest[yumyl])!=('\0')))&&((src[yumyl])!=('\0'));yumyl++)
dest[yumyl]=src[yumyl];
{	char biijc[30]="""";
	int yumyl=0;
	for(;(str[yumyl+1])!=('\0');yumyl++){	for(int vuevp=0;(str[vuevp])!=('\0');vuevp++) {biijc[vuevp]=str[yumyl-vuevp];	for(int vuevp=0;(str[vuevp])!=('\0');vuevp++) {str[vuevp]=biijc[(vuevp)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int pydke=0;((pydke<zahl)&&((dest[pydke])!=('\0')))&&((src[pydke])!=('\0'));pydke++)
dest[pydke]=src[pydke];
{	char hrphc[30]="""";
	int pydke=0;
	for(;(str[pydke+1])!=('\0');pydke++){	for(int pgcpx=0;(str[pgcpx])!=('\0');pgcpx++) {hrphc[pgcpx]=str[pydke-pgcpx];	for(int pgcpx=0;(str[pgcpx])!=('\0');pgcpx++) {str[pgcpx]=hrphc[(pgcpx)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int pzlut=0;((pzlut<zahl)&&((dest[pzlut])!=('\0')))&&((src[pzlut])!=('\0'));pzlut++)
dest[pzlut]=src[pzlut];
{	char myfby[30]="""";
	int pzlut=0;
	for(;(str[pzlut+1])!=('\0');pzlut++){	for(int ozoaq=0;(str[ozoaq])!=('\0');ozoaq++) {myfby[ozoaq]=str[pzlut-ozoaq];	for(int ozoaq=0;(str[ozoaq])!=('\0');ozoaq++) {str[ozoaq]=myfby[(ozoaq)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int ulfcz=0;((ulfcz<zahl)&&((dest[ulfcz])!=('\0')))&&((src[ulfcz])!=('\0'));ulfcz++)
dest[ulfcz]=src[ulfcz];
{	char ydwmm[30]="""";
	int ulfcz=0;
	for(;(str[ulfcz+1])!=('\0');ulfcz++){	for(int izony=0;(str[izony])!=('\0');izony++) {ydwmm[izony]=str[ulfcz-izony];	for(int izony=0;(str[izony])!=('\0');izony++) {str[izony]=ydwmm[(izony)];}
}
}",1
189,WS2021,9,Antwort 10,C,VName_208,Name_208,"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int ydnah=0;((ydnah<zahl)&&((dest[ydnah])!=('\0')))&&((src[ydnah])!=('\0'));ydnah++)
dest[ydnah]=src[ydnah];
{	char gfjxg[30]="""";
	int ydnah=0;
	for(;(str[ydnah+1])!=('\0');ydnah++){	for(int bvqod=0;(str[bvqod])!=('\0');bvqod++) {gfjxg[bvqod]=str[ydnah-bvqod];	for(int bvqod=0;(str[bvqod])!=('\0');bvqod++) {str[bvqod]=gfjxg[(bvqod)];}
}
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int hfhzb(char *llsvg)
{
    int abezb = 0;
    for (int ddayh = 0; llsvg[ddayh] != '\0'; ddayh++)
    {
        abezb += 1;
    }
    return abezb;
}
int xaikv(char *fkkve, char *ugdyt)
{
    int qdwoh = 0;
    int ddayh = 0;
    while (ugdyt[qdwoh] != '\0')
    {
        if (ugdyt[qdwoh] != 'q' && ugdyt[qdwoh] != 'x' && ugdyt[qdwoh] != 'y' && ugdyt[qdwoh] != 'Q' && ugdyt[qdwoh] != 'X' && ugdyt[qdwoh] != 'Y')
        {
            fkkve[ddayh++] = ugdyt[qdwoh++];
        }
        else
        {
            qdwoh++;
        }
    }
    return ddayh;
}
int pmhkc(char *xhoot)
{
    int qdwoh = 0;
    int ddayh = 0;
    while (xhoot[qdwoh] != '\0')
    {
        if (qdwoh % 3 == 0)
        {
            xhoot[ddayh++] = xhoot[qdwoh++];
        }
        else
        {
            qdwoh++;
        }
    }
    return ddayh;
}
int main(int hnnjh, char *ebdvn[])
{
    int ccusp = 0;
    for (int qdwoh = 1; qdwoh < hnnjh; qdwoh++)
    {
        ccusp += hfhzb(ebdvn[qdwoh]);
    }
    char ndmun[ccusp + 1];
    char *shzfc = ndmun;
    for (int qdwoh = 1; qdwoh < hnnjh; qdwoh++)
    {
        shzfc += xaikv(shzfc, ebdvn[qdwoh]);
    }
    *shzfc = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", ndmun);
    ndmun[pmhkc(ndmun)] = '\0';
    printf(""Der neue String lautet: %s\n"", ndmun);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int odrjt(char *lgaqf)
{
    int pdcmt = 0;
    for (int rbqtf = 0; lgaqf[rbqtf] != '\0'; rbqtf++)
    {
        pdcmt += 1;
    }
    return pdcmt;
}
int kvzxf(char *oqxuc, char *xtsfo)
{
    int onkok = 0;
    int rbqtf = 0;
    while (xtsfo[onkok] != '\0')
    {
        if (xtsfo[onkok] != 'q' && xtsfo[onkok] != 'x' && xtsfo[onkok] != 'y' && xtsfo[onkok] != 'Q' && xtsfo[onkok] != 'X' && xtsfo[onkok] != 'Y')
        {
            oqxuc[rbqtf++] = xtsfo[onkok++];
        }
        else
        {
            onkok++;
        }
    }
    return rbqtf;
}
int jbnkn(char *dzuez)
{
    int onkok = 0;
    int rbqtf = 0;
    while (dzuez[onkok] != '\0')
    {
        if (onkok % 3 == 0)
        {
            dzuez[rbqtf++] = dzuez[onkok++];
        }
        else
        {
            onkok++;
        }
    }
    return rbqtf;
}
int main(int zxcat, char *qgucf[])
{
    int dfxyy = 0;
    for (int onkok = 1; onkok < zxcat; onkok++)
    {
        dfxyy += odrjt(qgucf[onkok]);
    }
    char izujg[dfxyy + 1];
    char *flwqv = izujg;
    for (int onkok = 1; onkok < zxcat; onkok++)
    {
        flwqv += kvzxf(flwqv, qgucf[onkok]);
    }
    *flwqv = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", izujg);
    izujg[jbnkn(izujg)] = '\0';
    printf(""Der neue String lautet: %s\n"", izujg);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int sfgni(char *ikolt)
{
    int qscmn = 0;
    for (int rjrkh = 0; ikolt[rjrkh] != '\0'; rjrkh++)
    {
        qscmn += 1;
    }
    return qscmn;
}
int cmynk(char *tuurd, char *nswsk)
{
    int btkfy = 0;
    int rjrkh = 0;
    while (nswsk[btkfy] != '\0')
    {
        if (nswsk[btkfy] != 'q' && nswsk[btkfy] != 'x' && nswsk[btkfy] != 'y' && nswsk[btkfy] != 'Q' && nswsk[btkfy] != 'X' && nswsk[btkfy] != 'Y')
        {
            tuurd[rjrkh++] = nswsk[btkfy++];
        }
        else
        {
            btkfy++;
        }
    }
    return rjrkh;
}
int uqzao(char *ajdbb)
{
    int btkfy = 0;
    int rjrkh = 0;
    while (ajdbb[btkfy] != '\0')
    {
        if (btkfy % 3 == 0)
        {
            ajdbb[rjrkh++] = ajdbb[btkfy++];
        }
        else
        {
            btkfy++;
        }
    }
    return rjrkh;
}
int main(int vayzb, char *uqtqd[])
{
    int euhff = 0;
    for (int btkfy = 1; btkfy < vayzb; btkfy++)
    {
        euhff += sfgni(uqtqd[btkfy]);
    }
    char fzlcv[euhff + 1];
    char *gvjxt = fzlcv;
    for (int btkfy = 1; btkfy < vayzb; btkfy++)
    {
        gvjxt += cmynk(gvjxt, uqtqd[btkfy]);
    }
    *gvjxt = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", fzlcv);
    fzlcv[uqzao(fzlcv)] = '\0';
    printf(""Der neue String lautet: %s\n"", fzlcv);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int bcfmq(char *bbeni)
{
    int ywuah = 0;
    for (int owrqg = 0; bbeni[owrqg] != '\0'; owrqg++)
    {
        ywuah += 1;
    }
    return ywuah;
}
int weqjr(char *xtkpt, char *skbyn)
{
    int yykev = 0;
    int owrqg = 0;
    while (skbyn[yykev] != '\0')
    {
        if (skbyn[yykev] != 'q' && skbyn[yykev] != 'x' && skbyn[yykev] != 'y' && skbyn[yykev] != 'Q' && skbyn[yykev] != 'X' && skbyn[yykev] != 'Y')
        {
            xtkpt[owrqg++] = skbyn[yykev++];
        }
        else
        {
            yykev++;
        }
    }
    return owrqg;
}
int osrec(char *abqai)
{
    int yykev = 0;
    int owrqg = 0;
    while (abqai[yykev] != '\0')
    {
        if (yykev % 3 == 0)
        {
            abqai[owrqg++] = abqai[yykev++];
        }
        else
        {
            yykev++;
        }
    }
    return owrqg;
}
int main(int wjkal, char *ggybc[])
{
    int ozxly = 0;
    for (int yykev = 1; yykev < wjkal; yykev++)
    {
        ozxly += bcfmq(ggybc[yykev]);
    }
    char aauev[ozxly + 1];
    char *neitk = aauev;
    for (int yykev = 1; yykev < wjkal; yykev++)
    {
        neitk += weqjr(neitk, ggybc[yykev]);
    }
    *neitk = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", aauev);
    aauev[osrec(aauev)] = '\0';
    printf(""Der neue String lautet: %s\n"", aauev);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int vxcan(char *tzkww)
{
    int quvfb = 0;
    for (int lantc = 0; tzkww[lantc] != '\0'; lantc++)
    {
        quvfb += 1;
    }
    return quvfb;
}
int hsgch(char *emzvi, char *gbhry)
{
    int ltnba = 0;
    int lantc = 0;
    while (gbhry[ltnba] != '\0')
    {
        if (gbhry[ltnba] != 'q' && gbhry[ltnba] != 'x' && gbhry[ltnba] != 'y' && gbhry[ltnba] != 'Q' && gbhry[ltnba] != 'X' && gbhry[ltnba] != 'Y')
        {
            emzvi[lantc++] = gbhry[ltnba++];
        }
        else
        {
            ltnba++;
        }
    }
    return lantc;
}
int xqyjc(char *gpkqu)
{
    int ltnba = 0;
    int lantc = 0;
    while (gpkqu[ltnba] != '\0')
    {
        if (ltnba % 3 == 0)
        {
            gpkqu[lantc++] = gpkqu[ltnba++];
        }
        else
        {
            ltnba++;
        }
    }
    return lantc;
}
int main(int frljp, char *nkzex[])
{
    int tqycz = 0;
    for (int ltnba = 1; ltnba < frljp; ltnba++)
    {
        tqycz += vxcan(nkzex[ltnba]);
    }
    char rosca[tqycz + 1];
    char *yibor = rosca;
    for (int ltnba = 1; ltnba < frljp; ltnba++)
    {
        yibor += hsgch(yibor, nkzex[ltnba]);
    }
    *yibor = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", rosca);
    rosca[xqyjc(rosca)] = '\0';
    printf(""Der neue String lautet: %s\n"", rosca);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int izsxq(char *tzcyg)
{
    int uvqzp = 0;
    for (int gmpbz = 0; tzcyg[gmpbz] != '\0'; gmpbz++)
    {
        uvqzp += 1;
    }
    return uvqzp;
}
int dgzqt(char *mjhec, char *oxzyx)
{
    int acvza = 0;
    int gmpbz = 0;
    while (oxzyx[acvza] != '\0')
    {
        if (oxzyx[acvza] != 'q' && oxzyx[acvza] != 'x' && oxzyx[acvza] != 'y' && oxzyx[acvza] != 'Q' && oxzyx[acvza] != 'X' && oxzyx[acvza] != 'Y')
        {
            mjhec[gmpbz++] = oxzyx[acvza++];
        }
        else
        {
            acvza++;
        }
    }
    return gmpbz;
}
int gnfbt(char *julpa)
{
    int acvza = 0;
    int gmpbz = 0;
    while (julpa[acvza] != '\0')
    {
        if (acvza % 3 == 0)
        {
            julpa[gmpbz++] = julpa[acvza++];
        }
        else
        {
            acvza++;
        }
    }
    return gmpbz;
}
int main(int idams, char *nound[])
{
    int bnlfj = 0;
    for (int acvza = 1; acvza < idams; acvza++)
    {
        bnlfj += izsxq(nound[acvza]);
    }
    char bpgna[bnlfj + 1];
    char *jxsxr = bpgna;
    for (int acvza = 1; acvza < idams; acvza++)
    {
        jxsxr += dgzqt(jxsxr, nound[acvza]);
    }
    *jxsxr = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", bpgna);
    bpgna[gnfbt(bpgna)] = '\0';
    printf(""Der neue String lautet: %s\n"", bpgna);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int lxbkp(char *nlfbm)
{
    int onrjc = 0;
    for (int hhiyr = 0; nlfbm[hhiyr] != '\0'; hhiyr++)
    {
        onrjc += 1;
    }
    return onrjc;
}
int ftfco(char *zqtcq, char *icisi)
{
    int ucppi = 0;
    int hhiyr = 0;
    while (icisi[ucppi] != '\0')
    {
        if (icisi[ucppi] != 'q' && icisi[ucppi] != 'x' && icisi[ucppi] != 'y' && icisi[ucppi] != 'Q' && icisi[ucppi] != 'X' && icisi[ucppi] != 'Y')
        {
            zqtcq[hhiyr++] = icisi[ucppi++];
        }
        else
        {
            ucppi++;
        }
    }
    return hhiyr;
}
int wrnjc(char *dispk)
{
    int ucppi = 0;
    int hhiyr = 0;
    while (dispk[ucppi] != '\0')
    {
        if (ucppi % 3 == 0)
        {
            dispk[hhiyr++] = dispk[ucppi++];
        }
        else
        {
            ucppi++;
        }
    }
    return hhiyr;
}
int main(int szssl, char *jdmed[])
{
    int kpvne = 0;
    for (int ucppi = 1; ucppi < szssl; ucppi++)
    {
        kpvne += lxbkp(jdmed[ucppi]);
    }
    char peahj[kpvne + 1];
    char *btkhj = peahj;
    for (int ucppi = 1; ucppi < szssl; ucppi++)
    {
        btkhj += ftfco(btkhj, jdmed[ucppi]);
    }
    *btkhj = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", peahj);
    peahj[wrnjc(peahj)] = '\0';
    printf(""Der neue String lautet: %s\n"", peahj);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int icyvn(char *htvro)
{
    int ovmkt = 0;
    for (int euobf = 0; htvro[euobf] != '\0'; euobf++)
    {
        ovmkt += 1;
    }
    return ovmkt;
}
int gqdzc(char *rkmne, char *rwfms)
{
    int qewck = 0;
    int euobf = 0;
    while (rwfms[qewck] != '\0')
    {
        if (rwfms[qewck] != 'q' && rwfms[qewck] != 'x' && rwfms[qewck] != 'y' && rwfms[qewck] != 'Q' && rwfms[qewck] != 'X' && rwfms[qewck] != 'Y')
        {
            rkmne[euobf++] = rwfms[qewck++];
        }
        else
        {
            qewck++;
        }
    }
    return euobf;
}
int bgvod(char *ugaqd)
{
    int qewck = 0;
    int euobf = 0;
    while (ugaqd[qewck] != '\0')
    {
        if (qewck % 3 == 0)
        {
            ugaqd[euobf++] = ugaqd[qewck++];
        }
        else
        {
            qewck++;
        }
    }
    return euobf;
}
int main(int ornkj, char *slunc[])
{
    int sbvkh = 0;
    for (int qewck = 1; qewck < ornkj; qewck++)
    {
        sbvkh += icyvn(slunc[qewck]);
    }
    char fzftz[sbvkh + 1];
    char *mdfqg = fzftz;
    for (int qewck = 1; qewck < ornkj; qewck++)
    {
        mdfqg += gqdzc(mdfqg, slunc[qewck]);
    }
    *mdfqg = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", fzftz);
    fzftz[bgvod(fzftz)] = '\0';
    printf(""Der neue String lautet: %s\n"", fzftz);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int kltil(char *yetuv)
{
    int aaxja = 0;
    for (int gkjzm = 0; yetuv[gkjzm] != '\0'; gkjzm++)
    {
        aaxja += 1;
    }
    return aaxja;
}
int fjknb(char *qogey, char *chown)
{
    int qrwpe = 0;
    int gkjzm = 0;
    while (chown[qrwpe] != '\0')
    {
        if (chown[qrwpe] != 'q' && chown[qrwpe] != 'x' && chown[qrwpe] != 'y' && chown[qrwpe] != 'Q' && chown[qrwpe] != 'X' && chown[qrwpe] != 'Y')
        {
            qogey[gkjzm++] = chown[qrwpe++];
        }
        else
        {
            qrwpe++;
        }
    }
    return gkjzm;
}
int kayjx(char *vkcpb)
{
    int qrwpe = 0;
    int gkjzm = 0;
    while (vkcpb[qrwpe] != '\0')
    {
        if (qrwpe % 3 == 0)
        {
            vkcpb[gkjzm++] = vkcpb[qrwpe++];
        }
        else
        {
            qrwpe++;
        }
    }
    return gkjzm;
}
int main(int lmasg, char *onvwz[])
{
    int trvmf = 0;
    for (int qrwpe = 1; qrwpe < lmasg; qrwpe++)
    {
        trvmf += kltil(onvwz[qrwpe]);
    }
    char eopqa[trvmf + 1];
    char *psqlp = eopqa;
    for (int qrwpe = 1; qrwpe < lmasg; qrwpe++)
    {
        psqlp += fjknb(psqlp, onvwz[qrwpe]);
    }
    *psqlp = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", eopqa);
    eopqa[kayjx(eopqa)] = '\0';
    printf(""Der neue String lautet: %s\n"", eopqa);
}",1
195,WS2021,9,Antwort 10,C,VName_224,Name_224,"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int ovnrg(char *vwspm)
{
    int pdnfg = 0;
    for (int znkhf = 0; vwspm[znkhf] != '\0'; znkhf++)
    {
        pdnfg += 1;
    }
    return pdnfg;
}
int enydz(char *pkvid, char *lgnbg)
{
    int oohia = 0;
    int znkhf = 0;
    while (lgnbg[oohia] != '\0')
    {
        if (lgnbg[oohia] != 'q' && lgnbg[oohia] != 'x' && lgnbg[oohia] != 'y' && lgnbg[oohia] != 'Q' && lgnbg[oohia] != 'X' && lgnbg[oohia] != 'Y')
        {
            pkvid[znkhf++] = lgnbg[oohia++];
        }
        else
        {
            oohia++;
        }
    }
    return znkhf;
}
int okdzh(char *elqhc)
{
    int oohia = 0;
    int znkhf = 0;
    while (elqhc[oohia] != '\0')
    {
        if (oohia % 3 == 0)
        {
            elqhc[znkhf++] = elqhc[oohia++];
        }
        else
        {
            oohia++;
        }
    }
    return znkhf;
}
int main(int djugw, char *hfjar[])
{
    int hbnim = 0;
    for (int oohia = 1; oohia < djugw; oohia++)
    {
        hbnim += ovnrg(hfjar[oohia]);
    }
    char amqam[hbnim + 1];
    char *muahr = amqam;
    for (int oohia = 1; oohia < djugw; oohia++)
    {
        muahr += enydz(muahr, hfjar[oohia]);
    }
    *muahr = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", amqam);
    amqam[okdzh(amqam)] = '\0';
    printf(""Der neue String lautet: %s\n"", amqam);
}",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int qvsch = 0;(qvsch < zahl) && (qvsch < 10) && (src[qvsch] != '\0'); qvsch++)
            dest[qvsch] = src[qvsch];
    {
    int tqylr;
    for (int qdvho = 1; str[qdvho] != '\0'; qdvho++)
    {
        tqylr = qdvho + 2;
        char ffhiq[tqylr];
    for (int qvsch = 0; qvsch < (tqylr - 1); qvsch++)
    {
        ffhiq[tqylr - 2- qvsch] = str[qvsch];
    }
    for (int qvsch = 0; qvsch < tqylr; qvsch++)
    {
        str[qvsch] = ffhiq[qvsch];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int jubfo = 0;(jubfo < zahl) && (jubfo < 10) && (src[jubfo] != '\0'); jubfo++)
            dest[jubfo] = src[jubfo];
    {
    int zckib;
    for (int uvznx = 1; str[uvznx] != '\0'; uvznx++)
    {
        zckib = uvznx + 2;
        char rfulb[zckib];
    for (int jubfo = 0; jubfo < (zckib - 1); jubfo++)
    {
        rfulb[zckib - 2- jubfo] = str[jubfo];
    }
    for (int jubfo = 0; jubfo < zckib; jubfo++)
    {
        str[jubfo] = rfulb[jubfo];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int jdkck = 0;(jdkck < zahl) && (jdkck < 10) && (src[jdkck] != '\0'); jdkck++)
            dest[jdkck] = src[jdkck];
    {
    int mgaay;
    for (int ekeor = 1; str[ekeor] != '\0'; ekeor++)
    {
        mgaay = ekeor + 2;
        char jfriu[mgaay];
    for (int jdkck = 0; jdkck < (mgaay - 1); jdkck++)
    {
        jfriu[mgaay - 2- jdkck] = str[jdkck];
    }
    for (int jdkck = 0; jdkck < mgaay; jdkck++)
    {
        str[jdkck] = jfriu[jdkck];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int hqcpc = 0;(hqcpc < zahl) && (hqcpc < 10) && (src[hqcpc] != '\0'); hqcpc++)
            dest[hqcpc] = src[hqcpc];
    {
    int xmben;
    for (int rrqtz = 1; str[rrqtz] != '\0'; rrqtz++)
    {
        xmben = rrqtz + 2;
        char facpq[xmben];
    for (int hqcpc = 0; hqcpc < (xmben - 1); hqcpc++)
    {
        facpq[xmben - 2- hqcpc] = str[hqcpc];
    }
    for (int hqcpc = 0; hqcpc < xmben; hqcpc++)
    {
        str[hqcpc] = facpq[hqcpc];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int iynwe = 0;(iynwe < zahl) && (iynwe < 10) && (src[iynwe] != '\0'); iynwe++)
            dest[iynwe] = src[iynwe];
    {
    int xslkf;
    for (int ityfd = 1; str[ityfd] != '\0'; ityfd++)
    {
        xslkf = ityfd + 2;
        char qokko[xslkf];
    for (int iynwe = 0; iynwe < (xslkf - 1); iynwe++)
    {
        qokko[xslkf - 2- iynwe] = str[iynwe];
    }
    for (int iynwe = 0; iynwe < xslkf; iynwe++)
    {
        str[iynwe] = qokko[iynwe];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int tiato = 0;(tiato < zahl) && (tiato < 10) && (src[tiato] != '\0'); tiato++)
            dest[tiato] = src[tiato];
    {
    int fykct;
    for (int nsedj = 1; str[nsedj] != '\0'; nsedj++)
    {
        fykct = nsedj + 2;
        char pumqr[fykct];
    for (int tiato = 0; tiato < (fykct - 1); tiato++)
    {
        pumqr[fykct - 2- tiato] = str[tiato];
    }
    for (int tiato = 0; tiato < fykct; tiato++)
    {
        str[tiato] = pumqr[tiato];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int ilixf = 0;(ilixf < zahl) && (ilixf < 10) && (src[ilixf] != '\0'); ilixf++)
            dest[ilixf] = src[ilixf];
    {
    int xeeuo;
    for (int rhhgx = 1; str[rhhgx] != '\0'; rhhgx++)
    {
        xeeuo = rhhgx + 2;
        char plblh[xeeuo];
    for (int ilixf = 0; ilixf < (xeeuo - 1); ilixf++)
    {
        plblh[xeeuo - 2- ilixf] = str[ilixf];
    }
    for (int ilixf = 0; ilixf < xeeuo; ilixf++)
    {
        str[ilixf] = plblh[ilixf];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int jlftw = 0;(jlftw < zahl) && (jlftw < 10) && (src[jlftw] != '\0'); jlftw++)
            dest[jlftw] = src[jlftw];
    {
    int fupua;
    for (int yovpj = 1; str[yovpj] != '\0'; yovpj++)
    {
        fupua = yovpj + 2;
        char durrb[fupua];
    for (int jlftw = 0; jlftw < (fupua - 1); jlftw++)
    {
        durrb[fupua - 2- jlftw] = str[jlftw];
    }
    for (int jlftw = 0; jlftw < fupua; jlftw++)
    {
        str[jlftw] = durrb[jlftw];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int vdyrm = 0;(vdyrm < zahl) && (vdyrm < 10) && (src[vdyrm] != '\0'); vdyrm++)
            dest[vdyrm] = src[vdyrm];
    {
    int prraq;
    for (int szyfm = 1; str[szyfm] != '\0'; szyfm++)
    {
        prraq = szyfm + 2;
        char qbhnk[prraq];
    for (int vdyrm = 0; vdyrm < (prraq - 1); vdyrm++)
    {
        qbhnk[prraq - 2- vdyrm] = str[vdyrm];
    }
    for (int vdyrm = 0; vdyrm < prraq; vdyrm++)
    {
        str[vdyrm] = qbhnk[vdyrm];
    }
}
{  
      }",1
200,WS2021,9,Antwort 10,C,VName_221,Name_221,"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int frerr = 0;(frerr < zahl) && (frerr < 10) && (src[frerr] != '\0'); frerr++)
            dest[frerr] = src[frerr];
    {
    int qaxqx;
    for (int gpjit = 1; str[gpjit] != '\0'; gpjit++)
    {
        qaxqx = gpjit + 2;
        char whnhm[qaxqx];
    for (int frerr = 0; frerr < (qaxqx - 1); frerr++)
    {
        whnhm[qaxqx - 2- frerr] = str[frerr];
    }
    for (int frerr = 0; frerr < qaxqx; frerr++)
    {
        str[frerr] = whnhm[frerr];
    }
}
{  
      }",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int tbvrt, char* argv[]){
	char ozlfw[100]= """";
	char xmbqn[100]="""";
	int gdeog=0;
	for(int eipjt=1 ;eipjt<tbvrt ;eipjt++){
		for (int liotv=0; argv[eipjt][liotv] != '\0'; liotv++){
			if(argv[eipjt][liotv]== 'gdeog' || argv[eipjt][liotv]== 'msegy' || argv[eipjt][liotv]== 'q' || argv[eipjt][liotv]== 'X' || argv[eipjt][liotv]== 'Y' || argv[eipjt][liotv]== 'Q') continue;
			else {
				ozlfw[gdeog]=argv[eipjt][liotv];
				gdeog+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", ozlfw);
	int msegy=0;
	for(int eipjt=0; eipjt<100; eipjt+=3){
		xmbqn[msegy]=ozlfw[eipjt];
		msegy++;
	}
	printf(""Der neue String lautet: %s\n"", xmbqn);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int iyxyu, char* argv[]){
	char vnwdy[100]= """";
	char yfumh[100]="""";
	int aeryc=0;
	for(int adsji=1 ;adsji<iyxyu ;adsji++){
		for (int kdezp=0; argv[adsji][kdezp] != '\0'; kdezp++){
			if(argv[adsji][kdezp]== 'aeryc' || argv[adsji][kdezp]== 'ccjtn' || argv[adsji][kdezp]== 'q' || argv[adsji][kdezp]== 'X' || argv[adsji][kdezp]== 'Y' || argv[adsji][kdezp]== 'Q') continue;
			else {
				vnwdy[aeryc]=argv[adsji][kdezp];
				aeryc+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", vnwdy);
	int ccjtn=0;
	for(int adsji=0; adsji<100; adsji+=3){
		yfumh[ccjtn]=vnwdy[adsji];
		ccjtn++;
	}
	printf(""Der neue String lautet: %s\n"", yfumh);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int cgemt, char* argv[]){
	char sccsn[100]= """";
	char updkj[100]="""";
	int wlpnq=0;
	for(int phzda=1 ;phzda<cgemt ;phzda++){
		for (int gsscs=0; argv[phzda][gsscs] != '\0'; gsscs++){
			if(argv[phzda][gsscs]== 'wlpnq' || argv[phzda][gsscs]== 'gqymx' || argv[phzda][gsscs]== 'q' || argv[phzda][gsscs]== 'X' || argv[phzda][gsscs]== 'Y' || argv[phzda][gsscs]== 'Q') continue;
			else {
				sccsn[wlpnq]=argv[phzda][gsscs];
				wlpnq+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", sccsn);
	int gqymx=0;
	for(int phzda=0; phzda<100; phzda+=3){
		updkj[gqymx]=sccsn[phzda];
		gqymx++;
	}
	printf(""Der neue String lautet: %s\n"", updkj);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int yowjk, char* argv[]){
	char aeiae[100]= """";
	char axvbg[100]="""";
	int uzjrx=0;
	for(int nnthm=1 ;nnthm<yowjk ;nnthm++){
		for (int iiokj=0; argv[nnthm][iiokj] != '\0'; iiokj++){
			if(argv[nnthm][iiokj]== 'uzjrx' || argv[nnthm][iiokj]== 'bstwa' || argv[nnthm][iiokj]== 'q' || argv[nnthm][iiokj]== 'X' || argv[nnthm][iiokj]== 'Y' || argv[nnthm][iiokj]== 'Q') continue;
			else {
				aeiae[uzjrx]=argv[nnthm][iiokj];
				uzjrx+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", aeiae);
	int bstwa=0;
	for(int nnthm=0; nnthm<100; nnthm+=3){
		axvbg[bstwa]=aeiae[nnthm];
		bstwa++;
	}
	printf(""Der neue String lautet: %s\n"", axvbg);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int rjxuc, char* argv[]){
	char oymbw[100]= """";
	char yfovc[100]="""";
	int zutcy=0;
	for(int uvpex=1 ;uvpex<rjxuc ;uvpex++){
		for (int skjxl=0; argv[uvpex][skjxl] != '\0'; skjxl++){
			if(argv[uvpex][skjxl]== 'zutcy' || argv[uvpex][skjxl]== 'bmwub' || argv[uvpex][skjxl]== 'q' || argv[uvpex][skjxl]== 'X' || argv[uvpex][skjxl]== 'Y' || argv[uvpex][skjxl]== 'Q') continue;
			else {
				oymbw[zutcy]=argv[uvpex][skjxl];
				zutcy+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", oymbw);
	int bmwub=0;
	for(int uvpex=0; uvpex<100; uvpex+=3){
		yfovc[bmwub]=oymbw[uvpex];
		bmwub++;
	}
	printf(""Der neue String lautet: %s\n"", yfovc);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int chckp, char* argv[]){
	char btsur[100]= """";
	char kuuxl[100]="""";
	int fbmzm=0;
	for(int bibyf=1 ;bibyf<chckp ;bibyf++){
		for (int owjgf=0; argv[bibyf][owjgf] != '\0'; owjgf++){
			if(argv[bibyf][owjgf]== 'fbmzm' || argv[bibyf][owjgf]== 'aefsp' || argv[bibyf][owjgf]== 'q' || argv[bibyf][owjgf]== 'X' || argv[bibyf][owjgf]== 'Y' || argv[bibyf][owjgf]== 'Q') continue;
			else {
				btsur[fbmzm]=argv[bibyf][owjgf];
				fbmzm+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", btsur);
	int aefsp=0;
	for(int bibyf=0; bibyf<100; bibyf+=3){
		kuuxl[aefsp]=btsur[bibyf];
		aefsp++;
	}
	printf(""Der neue String lautet: %s\n"", kuuxl);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int yrjuo, char* argv[]){
	char zmdge[100]= """";
	char bmtxi[100]="""";
	int wnovp=0;
	for(int rzfng=1 ;rzfng<yrjuo ;rzfng++){
		for (int redoo=0; argv[rzfng][redoo] != '\0'; redoo++){
			if(argv[rzfng][redoo]== 'wnovp' || argv[rzfng][redoo]== 'bdwer' || argv[rzfng][redoo]== 'q' || argv[rzfng][redoo]== 'X' || argv[rzfng][redoo]== 'Y' || argv[rzfng][redoo]== 'Q') continue;
			else {
				zmdge[wnovp]=argv[rzfng][redoo];
				wnovp+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", zmdge);
	int bdwer=0;
	for(int rzfng=0; rzfng<100; rzfng+=3){
		bmtxi[bdwer]=zmdge[rzfng];
		bdwer++;
	}
	printf(""Der neue String lautet: %s\n"", bmtxi);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int ompsu, char* argv[]){
	char qzjob[100]= """";
	char dxowh[100]="""";
	int tbxno=0;
	for(int kridw=1 ;kridw<ompsu ;kridw++){
		for (int rryri=0; argv[kridw][rryri] != '\0'; rryri++){
			if(argv[kridw][rryri]== 'tbxno' || argv[kridw][rryri]== 'pwshb' || argv[kridw][rryri]== 'q' || argv[kridw][rryri]== 'X' || argv[kridw][rryri]== 'Y' || argv[kridw][rryri]== 'Q') continue;
			else {
				qzjob[tbxno]=argv[kridw][rryri];
				tbxno+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", qzjob);
	int pwshb=0;
	for(int kridw=0; kridw<100; kridw+=3){
		dxowh[pwshb]=qzjob[kridw];
		pwshb++;
	}
	printf(""Der neue String lautet: %s\n"", dxowh);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int xedir, char* argv[]){
	char uguey[100]= """";
	char jybqu[100]="""";
	int blqgq=0;
	for(int wsaev=1 ;wsaev<xedir ;wsaev++){
		for (int gpkcv=0; argv[wsaev][gpkcv] != '\0'; gpkcv++){
			if(argv[wsaev][gpkcv]== 'blqgq' || argv[wsaev][gpkcv]== 'jkeki' || argv[wsaev][gpkcv]== 'q' || argv[wsaev][gpkcv]== 'X' || argv[wsaev][gpkcv]== 'Y' || argv[wsaev][gpkcv]== 'Q') continue;
			else {
				uguey[blqgq]=argv[wsaev][gpkcv];
				blqgq+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", uguey);
	int jkeki=0;
	for(int wsaev=0; wsaev<100; wsaev+=3){
		jybqu[jkeki]=uguey[wsaev];
		jkeki++;
	}
	printf(""Der neue String lautet: %s\n"", jybqu);
}",1
204,WS2021,9,Antwort 10,C,VName_225,Name_225,"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int sqttf, char* argv[]){
	char upqwf[100]= """";
	char hscvi[100]="""";
	int cuqst=0;
	for(int mrpng=1 ;mrpng<sqttf ;mrpng++){
		for (int iolik=0; argv[mrpng][iolik] != '\0'; iolik++){
			if(argv[mrpng][iolik]== 'cuqst' || argv[mrpng][iolik]== 'sdlnk' || argv[mrpng][iolik]== 'q' || argv[mrpng][iolik]== 'X' || argv[mrpng][iolik]== 'Y' || argv[mrpng][iolik]== 'Q') continue;
			else {
				upqwf[cuqst]=argv[mrpng][iolik];
				cuqst+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", upqwf);
	int sdlnk=0;
	for(int mrpng=0; mrpng<100; mrpng+=3){
		hscvi[sdlnk]=upqwf[mrpng];
		sdlnk++;
	}
	printf(""Der neue String lautet: %s\n"", hscvi);
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void bgspq(char* str)
{
    int yvguj = 0;
    char wsxmd[50];
    for(int wtyhp = 0; str[wtyhp] != '\0'; wtyhp++)
    {
        int yvguj = 0;
        char wsxmd[50];
        uvurw(str[wtyhp] == 'x'|| str[wtyhp] == 'y'|| str[wtyhp] == 'q');
        else uvurw(str[wtyhp] == 'X'|| str[wtyhp] == 'Y'|| str[wtyhp] == 'Q');
        else 
        {
            wsxmd[yvguj] = str[wtyhp];
            yvguj++;
        }
    }
    str = &wsxmd;
}
char* sortieren(int länge, char* str[])
{
    int yvguj = 0;
    char wsxmd[200];
    for(int wtyhp = 0; wtyhp < länge; wtyhp++)
    {
        for(int lgzgz = 0; lgzgz != '\0'; lgzgz++)
        {
            wsxmd[yvguj] = str[wtyhp+1][lgzgz];
            yvguj++;
        }
    }
}   
int main( int doecm, char* argv[] )
{  
    int furdz = sizeof(argv) - 1;
    for(int wtyhp = 1; wtyhp <= furdz; wtyhp++)
    {
        bgspq(argv[wtyhp]);
    }
    char fertx = sortieren(furdz, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", fertx); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void dugna(char* str)
{
    int bofod = 0;
    char gyftn[50];
    for(int nmjtg = 0; str[nmjtg] != '\0'; nmjtg++)
    {
        int bofod = 0;
        char gyftn[50];
        sooik(str[nmjtg] == 'x'|| str[nmjtg] == 'y'|| str[nmjtg] == 'q');
        else sooik(str[nmjtg] == 'X'|| str[nmjtg] == 'Y'|| str[nmjtg] == 'Q');
        else 
        {
            gyftn[bofod] = str[nmjtg];
            bofod++;
        }
    }
    str = &gyftn;
}
char* sortieren(int länge, char* str[])
{
    int bofod = 0;
    char gyftn[200];
    for(int nmjtg = 0; nmjtg < länge; nmjtg++)
    {
        for(int uotun = 0; uotun != '\0'; uotun++)
        {
            gyftn[bofod] = str[nmjtg+1][uotun];
            bofod++;
        }
    }
}   
int main( int xwbec, char* argv[] )
{  
    int yokmi = sizeof(argv) - 1;
    for(int nmjtg = 1; nmjtg <= yokmi; nmjtg++)
    {
        dugna(argv[nmjtg]);
    }
    char bnevr = sortieren(yokmi, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", bnevr); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void xweww(char* str)
{
    int crnix = 0;
    char fkbet[50];
    for(int zidmi = 0; str[zidmi] != '\0'; zidmi++)
    {
        int crnix = 0;
        char fkbet[50];
        cgcvz(str[zidmi] == 'x'|| str[zidmi] == 'y'|| str[zidmi] == 'q');
        else cgcvz(str[zidmi] == 'X'|| str[zidmi] == 'Y'|| str[zidmi] == 'Q');
        else 
        {
            fkbet[crnix] = str[zidmi];
            crnix++;
        }
    }
    str = &fkbet;
}
char* sortieren(int länge, char* str[])
{
    int crnix = 0;
    char fkbet[200];
    for(int zidmi = 0; zidmi < länge; zidmi++)
    {
        for(int iedwk = 0; iedwk != '\0'; iedwk++)
        {
            fkbet[crnix] = str[zidmi+1][iedwk];
            crnix++;
        }
    }
}   
int main( int rhuvd, char* argv[] )
{  
    int icnzg = sizeof(argv) - 1;
    for(int zidmi = 1; zidmi <= icnzg; zidmi++)
    {
        xweww(argv[zidmi]);
    }
    char sudul = sortieren(icnzg, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", sudul); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void vurey(char* str)
{
    int faysh = 0;
    char czkaq[50];
    for(int wskmp = 0; str[wskmp] != '\0'; wskmp++)
    {
        int faysh = 0;
        char czkaq[50];
        wrzrd(str[wskmp] == 'x'|| str[wskmp] == 'y'|| str[wskmp] == 'q');
        else wrzrd(str[wskmp] == 'X'|| str[wskmp] == 'Y'|| str[wskmp] == 'Q');
        else 
        {
            czkaq[faysh] = str[wskmp];
            faysh++;
        }
    }
    str = &czkaq;
}
char* sortieren(int länge, char* str[])
{
    int faysh = 0;
    char czkaq[200];
    for(int wskmp = 0; wskmp < länge; wskmp++)
    {
        for(int ypwxr = 0; ypwxr != '\0'; ypwxr++)
        {
            czkaq[faysh] = str[wskmp+1][ypwxr];
            faysh++;
        }
    }
}   
int main( int vyxno, char* argv[] )
{  
    int mohhv = sizeof(argv) - 1;
    for(int wskmp = 1; wskmp <= mohhv; wskmp++)
    {
        vurey(argv[wskmp]);
    }
    char pxbyr = sortieren(mohhv, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", pxbyr); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void bnyvw(char* str)
{
    int jomok = 0;
    char okqda[50];
    for(int tzsbc = 0; str[tzsbc] != '\0'; tzsbc++)
    {
        int jomok = 0;
        char okqda[50];
        xvzny(str[tzsbc] == 'x'|| str[tzsbc] == 'y'|| str[tzsbc] == 'q');
        else xvzny(str[tzsbc] == 'X'|| str[tzsbc] == 'Y'|| str[tzsbc] == 'Q');
        else 
        {
            okqda[jomok] = str[tzsbc];
            jomok++;
        }
    }
    str = &okqda;
}
char* sortieren(int länge, char* str[])
{
    int jomok = 0;
    char okqda[200];
    for(int tzsbc = 0; tzsbc < länge; tzsbc++)
    {
        for(int msdey = 0; msdey != '\0'; msdey++)
        {
            okqda[jomok] = str[tzsbc+1][msdey];
            jomok++;
        }
    }
}   
int main( int oevzd, char* argv[] )
{  
    int rhcfw = sizeof(argv) - 1;
    for(int tzsbc = 1; tzsbc <= rhcfw; tzsbc++)
    {
        bnyvw(argv[tzsbc]);
    }
    char wnpij = sortieren(rhcfw, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", wnpij); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void vvhhx(char* str)
{
    int zfaxa = 0;
    char kxllq[50];
    for(int fzmcy = 0; str[fzmcy] != '\0'; fzmcy++)
    {
        int zfaxa = 0;
        char kxllq[50];
        kqzej(str[fzmcy] == 'x'|| str[fzmcy] == 'y'|| str[fzmcy] == 'q');
        else kqzej(str[fzmcy] == 'X'|| str[fzmcy] == 'Y'|| str[fzmcy] == 'Q');
        else 
        {
            kxllq[zfaxa] = str[fzmcy];
            zfaxa++;
        }
    }
    str = &kxllq;
}
char* sortieren(int länge, char* str[])
{
    int zfaxa = 0;
    char kxllq[200];
    for(int fzmcy = 0; fzmcy < länge; fzmcy++)
    {
        for(int nxtoo = 0; nxtoo != '\0'; nxtoo++)
        {
            kxllq[zfaxa] = str[fzmcy+1][nxtoo];
            zfaxa++;
        }
    }
}   
int main( int ovkgd, char* argv[] )
{  
    int gjvhy = sizeof(argv) - 1;
    for(int fzmcy = 1; fzmcy <= gjvhy; fzmcy++)
    {
        vvhhx(argv[fzmcy]);
    }
    char npgeo = sortieren(gjvhy, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", npgeo); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void tiokh(char* str)
{
    int zrate = 0;
    char gwsww[50];
    for(int ntfxx = 0; str[ntfxx] != '\0'; ntfxx++)
    {
        int zrate = 0;
        char gwsww[50];
        zgxsu(str[ntfxx] == 'x'|| str[ntfxx] == 'y'|| str[ntfxx] == 'q');
        else zgxsu(str[ntfxx] == 'X'|| str[ntfxx] == 'Y'|| str[ntfxx] == 'Q');
        else 
        {
            gwsww[zrate] = str[ntfxx];
            zrate++;
        }
    }
    str = &gwsww;
}
char* sortieren(int länge, char* str[])
{
    int zrate = 0;
    char gwsww[200];
    for(int ntfxx = 0; ntfxx < länge; ntfxx++)
    {
        for(int jvwxf = 0; jvwxf != '\0'; jvwxf++)
        {
            gwsww[zrate] = str[ntfxx+1][jvwxf];
            zrate++;
        }
    }
}   
int main( int lrlau, char* argv[] )
{  
    int fxwvi = sizeof(argv) - 1;
    for(int ntfxx = 1; ntfxx <= fxwvi; ntfxx++)
    {
        tiokh(argv[ntfxx]);
    }
    char mgsqq = sortieren(fxwvi, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", mgsqq); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void sxtgm(char* str)
{
    int lrmiu = 0;
    char stmma[50];
    for(int yzipr = 0; str[yzipr] != '\0'; yzipr++)
    {
        int lrmiu = 0;
        char stmma[50];
        thukr(str[yzipr] == 'x'|| str[yzipr] == 'y'|| str[yzipr] == 'q');
        else thukr(str[yzipr] == 'X'|| str[yzipr] == 'Y'|| str[yzipr] == 'Q');
        else 
        {
            stmma[lrmiu] = str[yzipr];
            lrmiu++;
        }
    }
    str = &stmma;
}
char* sortieren(int länge, char* str[])
{
    int lrmiu = 0;
    char stmma[200];
    for(int yzipr = 0; yzipr < länge; yzipr++)
    {
        for(int kefps = 0; kefps != '\0'; kefps++)
        {
            stmma[lrmiu] = str[yzipr+1][kefps];
            lrmiu++;
        }
    }
}   
int main( int zlixp, char* argv[] )
{  
    int ehscu = sizeof(argv) - 1;
    for(int yzipr = 1; yzipr <= ehscu; yzipr++)
    {
        sxtgm(argv[yzipr]);
    }
    char ivvvl = sortieren(ehscu, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", ivvvl); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void bnvfc(char* str)
{
    int eepmb = 0;
    char wyrtx[50];
    for(int yubcs = 0; str[yubcs] != '\0'; yubcs++)
    {
        int eepmb = 0;
        char wyrtx[50];
        trcsn(str[yubcs] == 'x'|| str[yubcs] == 'y'|| str[yubcs] == 'q');
        else trcsn(str[yubcs] == 'X'|| str[yubcs] == 'Y'|| str[yubcs] == 'Q');
        else 
        {
            wyrtx[eepmb] = str[yubcs];
            eepmb++;
        }
    }
    str = &wyrtx;
}
char* sortieren(int länge, char* str[])
{
    int eepmb = 0;
    char wyrtx[200];
    for(int yubcs = 0; yubcs < länge; yubcs++)
    {
        for(int eednr = 0; eednr != '\0'; eednr++)
        {
            wyrtx[eepmb] = str[yubcs+1][eednr];
            eepmb++;
        }
    }
}   
int main( int dfsrb, char* argv[] )
{  
    int rgyxt = sizeof(argv) - 1;
    for(int yubcs = 1; yubcs <= rgyxt; yubcs++)
    {
        bnvfc(argv[yubcs]);
    }
    char lvdjs = sortieren(rgyxt, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", lvdjs); 
}",1
207,WS2021,9,Antwort 10,C,VName_219,Name_219,"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void fcfbu(char* str)
{
    int ywaeg = 0;
    char qanhm[50];
    for(int sfykj = 0; str[sfykj] != '\0'; sfykj++)
    {
        int ywaeg = 0;
        char qanhm[50];
        cogwf(str[sfykj] == 'x'|| str[sfykj] == 'y'|| str[sfykj] == 'q');
        else cogwf(str[sfykj] == 'X'|| str[sfykj] == 'Y'|| str[sfykj] == 'Q');
        else 
        {
            qanhm[ywaeg] = str[sfykj];
            ywaeg++;
        }
    }
    str = &qanhm;
}
char* sortieren(int länge, char* str[])
{
    int ywaeg = 0;
    char qanhm[200];
    for(int sfykj = 0; sfykj < länge; sfykj++)
    {
        for(int qqdwb = 0; qqdwb != '\0'; qqdwb++)
        {
            qanhm[ywaeg] = str[sfykj+1][qqdwb];
            ywaeg++;
        }
    }
}   
int main( int evhgr, char* argv[] )
{  
    int rcvfp = sizeof(argv) - 1;
    for(int sfykj = 1; sfykj <= rcvfp; sfykj++)
    {
        fcfbu(argv[sfykj]);
    }
    char jdhuk = sortieren(rcvfp, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", jdhuk); 
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int wrrtw, char* argv[52])
{
   
   int pmgwg = 0;
   int* p_zahl = &pmgwg;
   int liadq = 1;
   int* p_counter = &liadq;
   char nfryk[30];
   for(int shtpm = 0; shtpm < wrrtw-1 ; shtpm++)
   {
      for(int ohduh = 0; argv[liadq][ohduh] != '\0'; ohduh++)
      {
         nfryk[pmgwg] = argv[liadq][ohduh];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   nfryk[pmgwg+1] = '\0';
   int pyqav = 0;
   int* p_nummer = &pyqav;
   char hfcji[25];
   for(int shtpm = 0; ; shtpm++)
   {
      if((nfryk[shtpm] != 'x') && (nfryk[shtpm] != 'y') && (nfryk[shtpm] != 'q') && (nfryk[shtpm] != 'X') && (nfryk[shtpm] != 'Y') && (nfryk[shtpm] != 'Q'))
      {
         hfcji[pyqav] = nfryk[shtpm];
         if(nfryk[shtpm] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char minlg[35];
   for(int shtpm = 0; shtpm < 57; shtpm +=3)
   {
      
      minlg[shtpm/3] = hfcji[shtpm];  
      minlg[shtpm/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", hfcji, minlg);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int rhvqz, char* argv[52])
{
   
   int pyduo = 0;
   int* p_zahl = &pyduo;
   int lvdib = 1;
   int* p_counter = &lvdib;
   char cznbw[30];
   for(int frygk = 0; frygk < rhvqz-1 ; frygk++)
   {
      for(int ivykm = 0; argv[lvdib][ivykm] != '\0'; ivykm++)
      {
         cznbw[pyduo] = argv[lvdib][ivykm];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   cznbw[pyduo+1] = '\0';
   int hfedp = 0;
   int* p_nummer = &hfedp;
   char knxqw[25];
   for(int frygk = 0; ; frygk++)
   {
      if((cznbw[frygk] != 'x') && (cznbw[frygk] != 'y') && (cznbw[frygk] != 'q') && (cznbw[frygk] != 'X') && (cznbw[frygk] != 'Y') && (cznbw[frygk] != 'Q'))
      {
         knxqw[hfedp] = cznbw[frygk];
         if(cznbw[frygk] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char morcs[35];
   for(int frygk = 0; frygk < 57; frygk +=3)
   {
      
      morcs[frygk/3] = knxqw[frygk];  
      morcs[frygk/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", knxqw, morcs);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int esaep, char* argv[52])
{
   
   int hylku = 0;
   int* p_zahl = &hylku;
   int jkhos = 1;
   int* p_counter = &jkhos;
   char nfupm[30];
   for(int oaxwf = 0; oaxwf < esaep-1 ; oaxwf++)
   {
      for(int bzfyu = 0; argv[jkhos][bzfyu] != '\0'; bzfyu++)
      {
         nfupm[hylku] = argv[jkhos][bzfyu];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   nfupm[hylku+1] = '\0';
   int rakyx = 0;
   int* p_nummer = &rakyx;
   char qdmnh[25];
   for(int oaxwf = 0; ; oaxwf++)
   {
      if((nfupm[oaxwf] != 'x') && (nfupm[oaxwf] != 'y') && (nfupm[oaxwf] != 'q') && (nfupm[oaxwf] != 'X') && (nfupm[oaxwf] != 'Y') && (nfupm[oaxwf] != 'Q'))
      {
         qdmnh[rakyx] = nfupm[oaxwf];
         if(nfupm[oaxwf] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char rfsoq[35];
   for(int oaxwf = 0; oaxwf < 57; oaxwf +=3)
   {
      
      rfsoq[oaxwf/3] = qdmnh[oaxwf];  
      rfsoq[oaxwf/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", qdmnh, rfsoq);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int trbom, char* argv[52])
{
   
   int bucfn = 0;
   int* p_zahl = &bucfn;
   int chebo = 1;
   int* p_counter = &chebo;
   char ysbrv[30];
   for(int jsvka = 0; jsvka < trbom-1 ; jsvka++)
   {
      for(int lorfm = 0; argv[chebo][lorfm] != '\0'; lorfm++)
      {
         ysbrv[bucfn] = argv[chebo][lorfm];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   ysbrv[bucfn+1] = '\0';
   int zbsiq = 0;
   int* p_nummer = &zbsiq;
   char ewcmg[25];
   for(int jsvka = 0; ; jsvka++)
   {
      if((ysbrv[jsvka] != 'x') && (ysbrv[jsvka] != 'y') && (ysbrv[jsvka] != 'q') && (ysbrv[jsvka] != 'X') && (ysbrv[jsvka] != 'Y') && (ysbrv[jsvka] != 'Q'))
      {
         ewcmg[zbsiq] = ysbrv[jsvka];
         if(ysbrv[jsvka] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char qcxvx[35];
   for(int jsvka = 0; jsvka < 57; jsvka +=3)
   {
      
      qcxvx[jsvka/3] = ewcmg[jsvka];  
      qcxvx[jsvka/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", ewcmg, qcxvx);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int yhnor, char* argv[52])
{
   
   int faryk = 0;
   int* p_zahl = &faryk;
   int dilng = 1;
   int* p_counter = &dilng;
   char hlaey[30];
   for(int qvvcc = 0; qvvcc < yhnor-1 ; qvvcc++)
   {
      for(int jqbhk = 0; argv[dilng][jqbhk] != '\0'; jqbhk++)
      {
         hlaey[faryk] = argv[dilng][jqbhk];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   hlaey[faryk+1] = '\0';
   int rwqou = 0;
   int* p_nummer = &rwqou;
   char mgylk[25];
   for(int qvvcc = 0; ; qvvcc++)
   {
      if((hlaey[qvvcc] != 'x') && (hlaey[qvvcc] != 'y') && (hlaey[qvvcc] != 'q') && (hlaey[qvvcc] != 'X') && (hlaey[qvvcc] != 'Y') && (hlaey[qvvcc] != 'Q'))
      {
         mgylk[rwqou] = hlaey[qvvcc];
         if(hlaey[qvvcc] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char mjnhm[35];
   for(int qvvcc = 0; qvvcc < 57; qvvcc +=3)
   {
      
      mjnhm[qvvcc/3] = mgylk[qvvcc];  
      mjnhm[qvvcc/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", mgylk, mjnhm);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int eumda, char* argv[52])
{
   
   int iflze = 0;
   int* p_zahl = &iflze;
   int epibo = 1;
   int* p_counter = &epibo;
   char voita[30];
   for(int tkhlq = 0; tkhlq < eumda-1 ; tkhlq++)
   {
      for(int wqfcr = 0; argv[epibo][wqfcr] != '\0'; wqfcr++)
      {
         voita[iflze] = argv[epibo][wqfcr];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   voita[iflze+1] = '\0';
   int vizqm = 0;
   int* p_nummer = &vizqm;
   char ozhau[25];
   for(int tkhlq = 0; ; tkhlq++)
   {
      if((voita[tkhlq] != 'x') && (voita[tkhlq] != 'y') && (voita[tkhlq] != 'q') && (voita[tkhlq] != 'X') && (voita[tkhlq] != 'Y') && (voita[tkhlq] != 'Q'))
      {
         ozhau[vizqm] = voita[tkhlq];
         if(voita[tkhlq] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char lycdq[35];
   for(int tkhlq = 0; tkhlq < 57; tkhlq +=3)
   {
      
      lycdq[tkhlq/3] = ozhau[tkhlq];  
      lycdq[tkhlq/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", ozhau, lycdq);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int pfykm, char* argv[52])
{
   
   int olbdk = 0;
   int* p_zahl = &olbdk;
   int fgpds = 1;
   int* p_counter = &fgpds;
   char ffxmc[30];
   for(int kcsxk = 0; kcsxk < pfykm-1 ; kcsxk++)
   {
      for(int rxpbk = 0; argv[fgpds][rxpbk] != '\0'; rxpbk++)
      {
         ffxmc[olbdk] = argv[fgpds][rxpbk];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   ffxmc[olbdk+1] = '\0';
   int dbhjs = 0;
   int* p_nummer = &dbhjs;
   char ynaor[25];
   for(int kcsxk = 0; ; kcsxk++)
   {
      if((ffxmc[kcsxk] != 'x') && (ffxmc[kcsxk] != 'y') && (ffxmc[kcsxk] != 'q') && (ffxmc[kcsxk] != 'X') && (ffxmc[kcsxk] != 'Y') && (ffxmc[kcsxk] != 'Q'))
      {
         ynaor[dbhjs] = ffxmc[kcsxk];
         if(ffxmc[kcsxk] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char uolfs[35];
   for(int kcsxk = 0; kcsxk < 57; kcsxk +=3)
   {
      
      uolfs[kcsxk/3] = ynaor[kcsxk];  
      uolfs[kcsxk/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", ynaor, uolfs);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int zkqqb, char* argv[52])
{
   
   int fctra = 0;
   int* p_zahl = &fctra;
   int dmoka = 1;
   int* p_counter = &dmoka;
   char qayon[30];
   for(int kjnmd = 0; kjnmd < zkqqb-1 ; kjnmd++)
   {
      for(int ghqjs = 0; argv[dmoka][ghqjs] != '\0'; ghqjs++)
      {
         qayon[fctra] = argv[dmoka][ghqjs];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   qayon[fctra+1] = '\0';
   int qjyil = 0;
   int* p_nummer = &qjyil;
   char bwazk[25];
   for(int kjnmd = 0; ; kjnmd++)
   {
      if((qayon[kjnmd] != 'x') && (qayon[kjnmd] != 'y') && (qayon[kjnmd] != 'q') && (qayon[kjnmd] != 'X') && (qayon[kjnmd] != 'Y') && (qayon[kjnmd] != 'Q'))
      {
         bwazk[qjyil] = qayon[kjnmd];
         if(qayon[kjnmd] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char xzvcm[35];
   for(int kjnmd = 0; kjnmd < 57; kjnmd +=3)
   {
      
      xzvcm[kjnmd/3] = bwazk[kjnmd];  
      xzvcm[kjnmd/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", bwazk, xzvcm);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int omrqi, char* argv[52])
{
   
   int jvebc = 0;
   int* p_zahl = &jvebc;
   int dclhc = 1;
   int* p_counter = &dclhc;
   char wazny[30];
   for(int lyjnq = 0; lyjnq < omrqi-1 ; lyjnq++)
   {
      for(int zjogz = 0; argv[dclhc][zjogz] != '\0'; zjogz++)
      {
         wazny[jvebc] = argv[dclhc][zjogz];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   wazny[jvebc+1] = '\0';
   int cjylq = 0;
   int* p_nummer = &cjylq;
   char wsobj[25];
   for(int lyjnq = 0; ; lyjnq++)
   {
      if((wazny[lyjnq] != 'x') && (wazny[lyjnq] != 'y') && (wazny[lyjnq] != 'q') && (wazny[lyjnq] != 'X') && (wazny[lyjnq] != 'Y') && (wazny[lyjnq] != 'Q'))
      {
         wsobj[cjylq] = wazny[lyjnq];
         if(wazny[lyjnq] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char ggkdn[35];
   for(int lyjnq = 0; lyjnq < 57; lyjnq +=3)
   {
      
      ggkdn[lyjnq/3] = wsobj[lyjnq];  
      ggkdn[lyjnq/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", wsobj, ggkdn);
}",1
209,WS2021,9,Antwort 10,C,VName_228,Name_228,"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int zwkqq, char* argv[52])
{
   
   int exejf = 0;
   int* p_zahl = &exejf;
   int hcuwb = 1;
   int* p_counter = &hcuwb;
   char xlikb[30];
   for(int uklov = 0; uklov < zwkqq-1 ; uklov++)
   {
      for(int zqiyb = 0; argv[hcuwb][zqiyb] != '\0'; zqiyb++)
      {
         xlikb[exejf] = argv[hcuwb][zqiyb];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   xlikb[exejf+1] = '\0';
   int wgqfu = 0;
   int* p_nummer = &wgqfu;
   char ysxqc[25];
   for(int uklov = 0; ; uklov++)
   {
      if((xlikb[uklov] != 'x') && (xlikb[uklov] != 'y') && (xlikb[uklov] != 'q') && (xlikb[uklov] != 'X') && (xlikb[uklov] != 'Y') && (xlikb[uklov] != 'Q'))
      {
         ysxqc[wgqfu] = xlikb[uklov];
         if(xlikb[uklov] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char azxqb[35];
   for(int uklov = 0; uklov < 57; uklov +=3)
   {
      
      azxqb[uklov/3] = ysxqc[uklov];  
      azxqb[uklov/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", ysxqc, azxqb);
}",1
