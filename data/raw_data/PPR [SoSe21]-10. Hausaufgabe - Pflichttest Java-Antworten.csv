Nachname,Vorname,E-Mail-Adresse,Status,"Begonnen am",Beendet,"Verbrauchte Zeit","Bewertung/20,00","Antwort 1","Antwort 2","Antwort 3","Antwort 4","Antwort 5","Antwort 6","Antwort 7","Antwort 8","Antwort 9"
Schubert,Tom,tom.schubert@campus.tu-berlin.de,Beendet,"18. Juni 2021  11:14","25. Juni 2021  17:43","7 Tage 6 Stunden","8,54","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Zeile 6,7 : super(); müsste vor x=0; stehen","Es wird die Methode der Super-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {7. <sub>fellfarbe:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {2. <sub>bezeichnung:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft {
  public static void main(String[] args){  
	Fussballspieler[] Portugal = new Fussballspieler[11];
	Portugal[0] = new Abwehrspieler(""Semedo"",25,0.2);
	Portugal[1] = new Abwehrspieler(""Pepe"",33,1.2);
	Portugal[2] = new Abwehrspieler(""Dias"",23,1.1);    
	Portugal[3] = new Abwehrspieler(""Guerreiro"",24,0.3);
	Portugal[4] = new Mittelfeldspieler(""Pereira"",27,112.47);
	Portugal[5] = new Mittelfeldspieler(""Carvalho"",35,10.3);
	Portugal[6] = new Mittelfeldspieler(""Diego Jota"",21,21.1);
	Portugal[7] = new Mittelfeldspieler(""Silva"",23,19.0);
	Portugal[8] = new Mittelfeldspieler(""Bruno"",20,11.3);
	Portugal[9] = new Sturmspieler(""CR7"",35,2.0);
	Portugal[10]= new Torwart(""Patricio"",33,1.5);
	Portugal[10].geburtstagFeiern();
	 
	  Fussballspieler[] deutschland= new Fussballspieler[11];
	  deutschland[0] =  new Abwehrspieler(""Gosens"",22,0.3);
	  deutschland[1] =  new Abwehrspieler(""Hummels"",32,0.8);
	  deutschland[2] =	new Abwehrspieler(""Antonio"",28,1.0);
	  deutschland[3] =  new Mittelfeldspieler(""Mueller"",33,63.0);
	  deutschland[4] =	new Mittelfeldspieler(""Goretzka"",27,62.47);
	  deutschland[5] =  new Mittelfeldspieler(""Kroos"",34,23.3);
	  deutschland[6] =  new Mittelfeldspieler(""Kimmich"",26,30.0);
	  deutschland[7] =	new Sturmspieler(""Werner"",24,0.1);
	  deutschland[8] =	new Sturmspieler(""Havertz"",25,1.3);
	  deutschland[9] =	new Sturmspieler(""Gnabry"",21,2.3);
	  deutschland[10] =	new Torwart(""Neuer"",33,0.0);
	  deutschland[8].geburtstagFeiern();
		     

	System.out.println(""Rote Karten: "" +roteKartenZaehlen(deutschland));
	    System.out.println();
	    ausgeben(Portugal);
	    System.out.println();
	    fussballspielen(Portugal,deutschland);
	  }
  public static double roteKartenZaehlen(Fussballspieler [] mannschaft1){
	  double anzahlRoteKartenJeSpiel=0;
		for(int i=0; i<mannschaft1.length;i++) {
			if(mannschaft1[i] instanceof Abwehrspieler) {
			Abwehrspieler temp =  (Abwehrspieler)mannschaft1[i]  ;
			anzahlRoteKartenJeSpiel = anzahlRoteKartenJeSpiel + temp.getAnzahlRoteKartenJeSpiel();
		}
		}
		return anzahlRoteKartenJeSpiel;
	  }//Ja das ding bei Polymorphie ist halt das ich krass bin,
  //und das Man erst auf Fussballspielerklasse und dann auf (Abwehrspieler) zugreifen muss wie Carsten Stahl
	  
	  public static void ausgeben(Fussballspieler[] mannschaft1){
		  for(int i=0; i< mannschaft1.length; i++) {
		  System.out.println(mannschaft1[i]);
		  }
		  
		  //naja hat halt zweimal toString einmal bei Fussballspieler und dann in der Unterklasse
	  }
	  
	  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		  //die Altersgleichung klassiker
	    int alterstaerkemannschaft1 = 0;
		for(int i=0; i<mannschaft1.length;i++) {
			Fussballspieler temp = mannschaft1[i];
			alterstaerkemannschaft1 = alterstaerkemannschaft1 + temp.getAlter();
		}
		int alterstaerkemannschaft2 = 0;
		for(int i=0; i<mannschaft2.length;i++) {
			Fussballspieler temp = mannschaft2[i];
			alterstaerkemannschaft2 = alterstaerkemannschaft2 + temp.getAlter();
		}
		
		// die Blutgratschengleichung
		 double rotestaerkemannschaft1 = roteKartenZaehlen(mannschaft1);
		 double rotestaerkemannschaft2 = roteKartenZaehlen(mannschaft2);
		 
		 //Tore klassiker
		 double toremannschaft1=0.0;
			for(int i=0; i<mannschaft1.length;i++) {
				if(mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler temp =  (Sturmspieler)mannschaft1[i]  ;
				toremannschaft1 = toremannschaft1 + temp.getToreJeSpiel();
			}
			}
			 double toremannschaft2=0.0;
				for(int i=0; i<mannschaft2.length;i++) {
					if(mannschaft2[i] instanceof Sturmspieler) {
					Sturmspieler temp =  (Sturmspieler)mannschaft2[i]  ;
					toremannschaft2 = toremannschaft2 + temp.getToreJeSpiel();
				}
				}	 
		 
		//Paesse Toni der Boss
				double paesse1=0.0;
				for(int i=0; i<mannschaft1.length;i++) {
					if(mannschaft1[i] instanceof Mittelfeldspieler) {
						Mittelfeldspieler temp =  (Mittelfeldspieler)mannschaft1[i]  ;
					paesse1= paesse1 + temp.getPaesseJeSpiel();
				}
				}
				 double paesse2=0.0;
					for(int i=0; i<mannschaft2.length;i++) {
						if(mannschaft2[i] instanceof Mittelfeldspieler) {
						Mittelfeldspieler temp =  (Mittelfeldspieler)mannschaft2[i]  ;
						paesse2= paesse2 + temp.getPaesseJeSpiel();
					}
					}	 
				
			//gegentore nicht mit Neuer
					double gegentoremannschaft1=0.0;
					for(int i=0; i<mannschaft1.length;i++) {
						if(mannschaft1[i] instanceof Torwart) {
							Torwart temp =  (Torwart)mannschaft1[i]  ;
							gegentoremannschaft1= gegentoremannschaft1 + temp.getGegentoreJeSpiel();
					}
					}
					 double gegentoremannschaft2=0.0;
						for(int i=0; i<mannschaft2.length;i++) {
							if(mannschaft2[i] instanceof Torwart) {
								Torwart temp =  (Torwart)mannschaft2[i]  ;
							gegentoremannschaft2 = gegentoremannschaft2 + temp.getGegentoreJeSpiel();
						}
						}	
						
						//namengleichung? sehr cringe
						// ich gucke ob bestimmte spieler da sind und das gibt Punkte
						 int namenstaerkemannschaft1 = 0;
							for(int i=0; i<mannschaft1.length;i++) {
								
								if(mannschaft1[i].getName().equals(""CR7"")) {
									namenstaerkemannschaft1 +=32;
								}
								if(mannschaft1[i].getName().equals(""Kroos"")) {
									namenstaerkemannschaft1 +=3;
								}
								if(mannschaft1[i].getName().equals(""Bruno"")) {
									namenstaerkemannschaft1 +=9;
								}
								if(mannschaft1[i].getName().equals(""Semedo"")) {
									namenstaerkemannschaft1 +=2;
								}
								if(mannschaft1[i].getName().equals(""Silva"")) {
									namenstaerkemannschaft1 +=8;
								}
								if(mannschaft1[i].getName().equals(""Werner"")) {
									namenstaerkemannschaft1 +=1;
								}
								if(mannschaft1[i].getName().equals(""Neuer"")) {
									namenstaerkemannschaft1 +=20;
								}
								if(mannschaft1[i].getName().equals(""Kimmich"")) {
									namenstaerkemannschaft1 +=12;
								}
							}
							
							int namenstaerkemannschaft2 = 0;
							for(int i=0; i<mannschaft2.length;i++) {
								if(mannschaft2[i].getName().equals(""CR7"")) {
									namenstaerkemannschaft2 +=32;
								}
								if(mannschaft2[i].getName().equals(""Kroos"")) {
									namenstaerkemannschaft2 +=3;
								}
								if(mannschaft2[i].getName().equals(""Bruno"")) {
									namenstaerkemannschaft2 +=9;
								}
								if(mannschaft2[i].getName().equals(""Semedo"")) {
									namenstaerkemannschaft2 +=2;
								}
								if(mannschaft2[i].getName().equals(""Silva"")) {
									namenstaerkemannschaft2 +=8;
								}
								if(mannschaft2[i].getName().equals(""Werner"")) {
									namenstaerkemannschaft2 +=1;
								}
								if(mannschaft2[i].getName().equals(""Neuer"")) {
									namenstaerkemannschaft2 +=20;
								}
								if(mannschaft2[i].getName().equals(""Kimmich"")) {
									namenstaerkemannschaft2 +=12;
								}
							}
					
			//Gesamt Println test
				//System.out.println(""Die Saecke sind gesamt ""+alterstaerkemannschaft1);
				//System.out.println(""Die Saecke sind gesamt ""+alterstaerkemannschaft2);
				//System.out.println(""Die haben ""+rotestaerkemannschaft1+"" Rote gezogen"");
				//System.out.println(""Die haben ""+rotestaerkemannschaft2+"" Rote gezogen"");
				///System.out.println(""Die haben ""+toremannschaft1+"" Tore"");
				//System.out.println(""Die haben ""+toremannschaft1+"" Tore"");
				//System.out.println(""Die haben ""+paesse1+"" Paesse"");
				//System.out.println(""Die haben ""+paesse2+"" Paesse"");
				//System.out.println(""Die haben ""+gegentoremannschaft1+"" gegentore"");
				//System.out.println(""Die haben ""+gegentoremannschaft2+"" gegentore"");
				//System.out.println(""Die haben ""+namenstaerkemannschaft1+"" krasse Leute"");
				//System.out.println(""Die haben ""+namenstaerkemannschaft2+"" krasse Leute"");
			
		double spielstaerkemannschaft1 = 0.0;
	    double spielstaerkemannschaft2 = 0.0;
	    spielstaerkemannschaft1=alterstaerkemannschaft1-rotestaerkemannschaft1+toremannschaft1+paesse1*2-gegentoremannschaft1+namenstaerkemannschaft1*1.5;
	    spielstaerkemannschaft2=alterstaerkemannschaft2-rotestaerkemannschaft2+toremannschaft2+paesse2*2-gegentoremannschaft2+namenstaerkemannschaft2*1.5;
	    //System.out.println(""Die haben ""+spielstaerkemannschaft1+"" Punkte"");
		//System.out.println(""Die haben ""+spielstaerkemannschaft2+"" Punkte"");
	    
	    if (spielstaerkemannschaft1 > spielstaerkemannschaft2) {
	    	System.out.println(""Mannschaft 1 gewinnt!"");
	    }
	    if(spielstaerkemannschaft1 < spielstaerkemannschaft2){
	    	System.out.println(""Mannschaft 2 gewinnt!"");
	    }
	    if(spielstaerkemannschaft1 == spielstaerkemannschaft2){
	    	System.out.println(""Unentschieden!"");
	    }
	  }
	}",-
Schmidt,Lucca,lucca.schmidt@campus.tu-berlin.de,Beendet,"18. Juni 2021  11:29","27. Juni 2021  11:44","9 Tage","14,10","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 1 : Klasse A hat keinen Konstruktor","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{ //extends Fussballspieler{ // extends Torwart,Sturmspieler,Mittelfeldspieler,Abwehrspieler{
  public static void main(String[] args){
      
  	Fussballspieler[] deutschland = new Fussballspieler[11];
		Fussballspieler[] frankreich = new Fussballspieler[11];
     
     
		deutschland[0] = new Torwart(""Manuel Alter"",24,0.0d);
		deutschland[1] = new Abwehrspieler(""Martin Biene"",21,1.0d);
		deutschland[2] = new Abwehrspieler(""Richard Gebauer"",22,0.5d);
		deutschland[3] = new Abwehrspieler(""Jusuf Hambuechen"",20,0.7d);
		deutschland[4] = new Abwehrspieler(""Mohammed Mustermann"",25,0.0d);
		deutschland[5] = new Mittelfeldspieler(""Miroslav Kloose"",19,8.4d);
		deutschland[6] = new Mittelfeldspieler(""Toni Kroos"",22,10.1d);
		deutschland[7] = new Mittelfeldspieler(""Oliver Pape"",23,15.1d);
		deutschland[8] = new Mittelfeldspieler(""Heinz Gustaf"",19,9.6d);
		deutschland[9] = new Sturmspieler(""Mario Goetze"",19,1.9d);
		deutschland[10] = new Sturmspieler(""Mario Hummels"",21,1.5d);

		frankreich[0] = new Torwart(""Ali Express"",21,1.0d);
		frankreich[1] = new Abwehrspieler(""Gustav Gans"",20,0.2d);
		frankreich[2] = new Abwehrspieler(""Franz Beckenbauer"",19,1.2d);
		frankreich[3] = new Abwehrspieler(""Juergen Pilava"",23,0.4d);
		frankreich[4] = new Abwehrspieler(""Alfred Hitchcok"",22,0.6d);
		frankreich[5] = new Mittelfeldspieler(""Franz Ferdinand"",18,10.2d);
		frankreich[6] = new Mittelfeldspieler(""Jonas Schmidt"",24,15.8d);
		frankreich[7] = new Mittelfeldspieler(""Onur Gencer"",21,18.5d);
		frankreich[8] = new Mittelfeldspieler(""Olaf Scholz"",18,8.7d);
		frankreich[9] = new Sturmspieler(""Fritz Henno"",20,2.1d);
		frankreich[10] = new Sturmspieler(""Gusto Gostienne"",22,1.9d);

		deutschland[2].geburtstagFeiern();
		frankreich[5].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(frankreich));
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, frankreich);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
    double roteKarten = 0d;
    for(int z = 0; z < mannschaft.length; z++){
    	if(mannschaft[z] instanceof Abwehrspieler){
    		Abwehrspieler s = (Abwehrspieler)mannschaft[z];
    		roteKarten = roteKarten + s.getAnzahlRoteKartenJeSpiel();
    	}
    }
   	return roteKarten;
  }
  
  public static void ausgeben(Fussballspieler[] mannschaft){
    for(int z = 0; z < mannschaft.length; z++){
    	if(mannschaft[z] instanceof Mittelfeldspieler){
   			Mittelfeldspieler m = (Mittelfeldspieler)mannschaft[z];
   			System.out.println(m.toString());

   		}
   		if(mannschaft[z] instanceof Sturmspieler){
   			Sturmspieler s = (Sturmspieler)mannschaft[z];
   			System.out.println(s.toString());

   		}
   		if(mannschaft[z] instanceof Abwehrspieler){
   			Abwehrspieler a = (Abwehrspieler)mannschaft[z];   			
   			System.out.println(a.toString());

   		}
   		if(mannschaft[z] instanceof Torwart){
   			Torwart t = (Torwart)mannschaft[z];   			
   			System.out.println(t.toString());
   		}
    }
  }
 
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
   	double staerke1 = 0d;
   	double staerke2 = 0d;
   	for(int z = 0; z < mannschaft1.length; z++){
   		if(mannschaft1[z] instanceof Mittelfeldspieler){
   			Mittelfeldspieler m = (Mittelfeldspieler)mannschaft1[z];
   			staerke1 = staerke1 + m.getPaesseJeSpiel();
   		}
   		if(mannschaft1[z] instanceof Sturmspieler){
   			Sturmspieler s = (Sturmspieler)mannschaft1[z];
   			staerke1 = staerke1 + 2*(s.getToreJeSpiel());
   		}
   		if(mannschaft1[z] instanceof Abwehrspieler){
   			Abwehrspieler a = (Abwehrspieler)mannschaft1[z];
   			staerke1 = staerke1 - 3*(a.getAnzahlRoteKartenJeSpiel());
   		}
   		if(mannschaft1[z] instanceof Torwart){
   			Torwart t = (Torwart)mannschaft1[z];
   			staerke1 = staerke1 - 2*(t.getGegentoreJeSpiel());
   		}
   	}

   	for(int x = 0; x < mannschaft2.length; x++){
   		if(mannschaft2[x] instanceof Mittelfeldspieler){
   			Mittelfeldspieler m = (Mittelfeldspieler)mannschaft2[x];
   			staerke2 = staerke2 + m.getPaesseJeSpiel();
   		}
   		if(mannschaft2[x] instanceof Sturmspieler){
   			Sturmspieler s = (Sturmspieler)mannschaft2[x];
   			staerke2 = staerke2 + 2*(s.getToreJeSpiel());
   		}
   		if(mannschaft2[x] instanceof Abwehrspieler){
   			Abwehrspieler a = (Abwehrspieler)mannschaft2[x];
   			staerke2 = staerke2 - 3*(a.getAnzahlRoteKartenJeSpiel());
   		}
   		if(mannschaft2[x] instanceof Torwart){
   			Torwart t = (Torwart)mannschaft2[x];
   			staerke2 = staerke2 - 2*(t.getGegentoreJeSpiel());
   		}
   	}
   	if(staerke1 > staerke2)System.out.println(""Mannschaft 1 gewinnt!"");
   	if(staerke1 < staerke2)System.out.println(""Mannschaft 2 gewinnt!"");
   	if(staerke1 == staerke2)System.out.println(""Unentschieden!"");
  
	}
}",//
Wontorra,Lara,lara.wontorra@campus.tu-berlin.de,Beendet,"18. Juni 2021  11:51","27. Juni 2021  11:29","8 Tage 23 Stunden","12,50","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Es wird die Methode der Sub-Klasse aufgerufen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","die Klasse Tier erbt von der Klasse Hund","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
    Fussballspieler[] deutschland = new Fussballspieler[11];
    Fussballspieler[] england = new Fussballspieler[11];
  
    deutschland[0] = new Torwart(""Neuer"", 20, 1.2);
    deutschland[1] = new Abwehrspieler(""Koch"", 21, 0.05);
    deutschland[2] = new Abwehrspieler(""Max"", 22, 0.02);
    deutschland[3] = new Abwehrspieler(""Ruediger"", 23, 0.01);
    deutschland[4] = new Abwehrspieler(""Hummels"", 24, 0.1);
    deutschland[5] = new Mittelfeldspieler(""Kimmich"", 25, 50);
    deutschland[6] = new Mittelfeldspieler(""Havertz"", 26, 40);
    deutschland[7] = new Mittelfeldspieler(""Musiala"", 27, 35);
    deutschland[8] = new Mittelfeldspieler(""Can"", 28, 20);
    deutschland[9] = new Mittelfeldspieler(""Wirtz"", 29, 45);
    deutschland[10] = new Sturmspieler(""Reus"", 30, 0.3);

    england[0] = new Torwart(""Pope"", 30, 0.9);
    england[1] = new Abwehrspieler(""James"", 29, 0.03);
    england[2] = new Abwehrspieler(""Coady"", 28, 0.02);
    england[3] = new Abwehrspieler(""Stones"", 27, 0.01);
    england[4] = new Abwehrspieler(""Mings"", 26, 0.07);
    england[5] = new Mittelfeldspieler(""Foden"", 25, 75);
    england[6] = new Mittelfeldspieler(""Mount"", 24, 25);
    england[7] = new Mittelfeldspieler(""Rice"", 23, 55);
    england[8] = new Mittelfeldspieler(""Alli"", 22, 65);
    england[9] = new Sturmspieler(""Kane"", 21, 0.4);
    england[10] = new Sturmspieler(""Ings"", 20, 0.5);

    england[10].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, england);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
    double roteKarten = 0.0;
    for(Fussballspieler f : mannschaft){
      if(f instanceof Abwehrspieler){
        roteKarten += ((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
      }
    }
    return roteKarten;
  
  }
  public static void ausgeben(Fussballspieler[] mannschaft){
    for(int i = 0; i < mannschaft.length; i++){
      System.out.println(mannschaft[i]);
    }
    
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double spielstaerke1 = 0.0;
    for(Fussballspieler f : mannschaft1){
      if (f instanceof Torwart) spielstaerke1 -= ((Torwart)f).getGegentoreJeSpiel();
      else if(f instanceof Abwehrspieler) spielstaerke1 -= 4*((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
      else if(f instanceof Mittelfeldspieler) spielstaerke1 += 0.1*((Mittelfeldspieler)f).getPaesseJeSpiel();
      else if(f instanceof Sturmspieler) spielstaerke1 += 0.8*((Sturmspieler)f).getToreJeSpiel();
    }
    double spielstaerke2 = 0.0;
    for(Fussballspieler f : mannschaft2){
      if (f instanceof Torwart) spielstaerke2 -= ((Torwart)f).getGegentoreJeSpiel();
      else if(f instanceof Abwehrspieler) spielstaerke2 -= 4*((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
      else if(f instanceof Mittelfeldspieler) spielstaerke2 += 0.1*((Mittelfeldspieler)f).getPaesseJeSpiel();
      else if(f instanceof Sturmspieler) spielstaerke2 += 0.8*((Sturmspieler)f).getToreJeSpiel();
    }
    if (spielstaerke1 > spielstaerke2) System.out.println(""Mannschaft 1 gewinnt!"");
    else if(spielstaerke1 == spielstaerke2)System.out.println(""Unentschieden!"");
    else System.out.println(""Mannschaft 2 gewinnt!"");
  }
}",-
Hecht,Leon,leon.hecht@campus.tu-berlin.de,Beendet,"18. Juni 2021  15:58","19. Juni 2021  17:35","1 Tag 1 Stunde","17,73",super,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",Object,"Es wird die Methode der Super-Klasse aufgerufen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {15. <sub>kannSprechen:} Dropzone 8 -> {16. <sub>boolean} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {7. <sub>fellfarbe:} Dropzone 19 -> {3. <sub>String} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
    Fussballspieler[] deutschland = new Fussballspieler[11];
    Fussballspieler[] mannschaft2 = new Fussballspieler[11];

    deutschland[0] = new Torwart(""Neuer"", 29, 1);
    deutschland[1] = new Abwehrspieler(""Boateng"", 27, 0.5);
    deutschland[2] = new Abwehrspieler(""Friedrich"", 39, 0);
    deutschland[3] = new Abwehrspieler(""Hummels"", 32, 1);
    deutschland[4] = new Abwehrspieler(""Müller"", 31, 0);
    deutschland[5] = new Mittelfeldspieler(""Schürle"", 28, 43);
    deutschland[6] = new Mittelfeldspieler(""Marcelinio"", 46, 102);
    deutschland[7] = new Mittelfeldspieler(""Zidane"", 38, 87);
    deutschland[8] = new Mittelfeldspieler(""Riberie"", 43, 301);
    deutschland[9] = new Sturmspieler(""Robben"", 37, 3);
    deutschland[10] = new Sturmspieler(""Gomez"", 35, 4);

    mannschaft2[0] = new Torwart(""Neuer2"", 29, 1);
    mannschaft2[1] = new Abwehrspieler(""Boateng2"", 27, 1);
    mannschaft2[2] = new Abwehrspieler(""Friedrich2"", 39, 0);
    mannschaft2[3] = new Abwehrspieler(""Hummels2"", 32, 1);
    mannschaft2[4] = new Abwehrspieler(""Müller2"", 31, 0);
    mannschaft2[5] = new Mittelfeldspieler(""Schürle2"", 28, 120);
    mannschaft2[6] = new Mittelfeldspieler(""Marcelinio2"", 46, 102);
    mannschaft2[7] = new Mittelfeldspieler(""Zidane2"", 38, 87);
    mannschaft2[8] = new Mittelfeldspieler(""Riberie2"", 43, 301);
    mannschaft2[9] = new Sturmspieler(""Robben2"", 37, 2);
    mannschaft2[10] = new Sturmspieler(""Gomez2"", 35, 5);

    deutschland[0].geburtstagFeiern();
     

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, mannschaft2);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
        double counter = 0;
        for (Fussballspieler spieler : mannschaft){
            if (spieler.getClass() == Abwehrspieler.class){
                counter += ((Abwehrspieler) spieler).getAnzahlRoteKartenJeSpiel();
            }
        }
        return counter;
    }
    
  /*
    Ruft für jeden Spieler zuerst die toString-Methode der Klasse Fussballspieler auf,
    dann die toString-Methode des jeweiligen Spielertyps (Torwart etc.).
    Die Ausgaben werden (abhängig vom Spielertyp) so aussehen, das liegt an der Polymorphie:
    Der Spieler heisst ? und ist ? Jahre alt.
    Er spielt als Torwart und bekommt ? Gegentore je Spiel.
     */
    public static void ausgeben(Fussballspieler[] mannschaft) {
        for (Fussballspieler spieler : mannschaft){
            System.out.println(spieler.toString());
        }
    }
    
  public static void fussballspielen(Fussballspieler[] deutschland, Fussballspieler[] mannschaft2){

        double score1 = 50;
        double score2 = 50;

        //Alter deutschland
        double age = 0;
        for (Fussballspieler spieler : deutschland){
            age += spieler.getAlter();
        }
        age = age/11;

        if (age > 20 && age < 30) {
            score1 += age;
        } else {
            score1 -= 10;
        }

        //Alter mannschaft2
        age = 0;
        for (Fussballspieler spieler : mannschaft2){
            age += spieler.getAlter();
        }
        age = age/11;

        if (age > 20 && age < 30) {
            score2 += age;
        } else {
            score2 -= 10;
        }


        // Torwart Gegentore 1
        for (Fussballspieler spieler : deutschland){
            if (spieler.getClass() == Torwart.class){
                if (((Torwart) spieler).getGegentoreJeSpiel() == 0){
                    score1 += 10;
                } else if (((Torwart) spieler).getGegentoreJeSpiel() < 1){
                    score1 += 5;
                } else if (((Torwart) spieler).getGegentoreJeSpiel() > 2){
                    score1 -= 10;
                }
            }
        }


        // Torwart Gegentore 2
        for (Fussballspieler spieler : mannschaft2){
            if (spieler.getClass() == Torwart.class){
                if (((Torwart) spieler).getGegentoreJeSpiel() == 0){
                    score2 += 10;
                } else if (((Torwart) spieler).getGegentoreJeSpiel() < 1){
                    score2 += 5;
                } else if (((Torwart) spieler).getGegentoreJeSpiel() > 2){
                    score2 -= 10;
                }
            }
        }

        //Rote Karten Mannschaft 1
        if (roteKartenZaehlen(deutschland) == 0){
            score1 += 10;
        } else if (roteKartenZaehlen(deutschland) < 1){
            score1 += 5;
        } else if (roteKartenZaehlen(deutschland) > 2){
            score1 -= 10;
        }

        //Rote Karten Mannschaft 2
        if (roteKartenZaehlen(mannschaft2) == 0){
            score2 += 10;
        } else if (roteKartenZaehlen(mannschaft2) < 1){
            score2 += 5;
        } else if (roteKartenZaehlen(mannschaft2) > 2){
            score2 -= 10;
        }


        //Pässe Mannschaft 1
        int paesse = 0;
        for (Fussballspieler spieler : deutschland){
            if (spieler.getClass() == Mittelfeldspieler.class){
                paesse += ((Mittelfeldspieler) spieler).getPaesseJeSpiel();
            }
        }
        score1 += paesse/100.0;


        //Pässe Mannschaft 2
        paesse = 0;
        for (Fussballspieler spieler : mannschaft2){
            if (spieler.getClass() == Mittelfeldspieler.class){
                paesse += ((Mittelfeldspieler) spieler).getPaesseJeSpiel();
            }
        }
        score2 += paesse/100.0;

        //Tore Mannschaft 1
        int tore = 0;
        for (Fussballspieler spieler : deutschland){
            if (spieler.getClass() == Sturmspieler.class){
                tore += ((Sturmspieler) spieler).getToreJeSpiel();
            }
        }
        if (tore < 2){
            score1 -= 5;
        } else {
            score1 += tore * 4;
        }

        //Tore Mannschaft 2
        tore = 0;
        for (Fussballspieler spieler : mannschaft2){
            if (spieler.getClass() == Sturmspieler.class){
                tore += ((Sturmspieler) spieler).getToreJeSpiel();
            }
        }
        if (tore < 2){
            score2 -= 5;
        } else {
            score2 += tore * 4;
        }

        if (score1 > score2){
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (score1 == score2){
            System.out.println(""Unentschieden!"");
        } else if (score1 < score2){
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
    }
}",//
"Al Hamwi",Nassim,nassim.alhamwi@campus.tu-berlin.de,Beendet,"19. Juni 2021  12:07","26. Juni 2021  11:54","6 Tage 23 Stunden","18,73",extends,"Zeile 6,7 : super(); müsste vor x=0; stehen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Es wird die Methode der Super-Klasse aufgerufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {16. <sub>boolean} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {3. <sub>String} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
	public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
		double roteKarten=0;
		Abwehrspieler a;
		for(int i=0; i<mannschaft.length;i++){
			if(mannschaft[i] instanceof Abwehrspieler){
				a=(Abwehrspieler)mannschaft[i];
				roteKarten+=a.getAnzahlRoteKartenJeSpiel();
			}
		}	
		return roteKarten;
	}
	public static double toreZaehlen(Fussballspieler[] mannschaft){
		double tore=0;
		Sturmspieler a;
		for(int i=0; i<mannschaft.length;i++){
			if(mannschaft[i] instanceof Sturmspieler){
				a=(Sturmspieler)mannschaft[i];
				tore+=a.getToreJeSpiel();
			}
		}	
		return tore;
	}
	public static double gegentoreZaehlen(Fussballspieler[] mannschaft){
		double gegentore=0;
		Torwart a;
		for(int i=0; i<mannschaft.length;i++){
			if(mannschaft[i] instanceof Torwart){
				a=(Torwart)mannschaft[i];
				gegentore+=a.getGegentoreJeSpiel();
			}
		}	
		return gegentore;
	}
	public static double paesseZaehlen(Fussballspieler[] mannschaft){
		double paesse=0;
		Mittelfeldspieler a;
		for(int i=0; i<mannschaft.length;i++){
			if(mannschaft[i] instanceof Mittelfeldspieler){
				a=(Mittelfeldspieler)mannschaft[i];
				paesse+=a.getPaesseJeSpiel();
			}
		}	
		return paesse;
	}
	public static void ausgeben(Fussballspieler[] mannschaft){
		Abwehrspieler a;
		Mittelfeldspieler m;
		Sturmspieler s;
		Torwart t;
		for(int i=0; i<mannschaft.length;i++){
			if(mannschaft[i] instanceof Abwehrspieler){
				a=(Abwehrspieler)mannschaft[i];
				System.out.println(a.toString());
			}
			else if(mannschaft[i] instanceof Mittelfeldspieler){
				m=(Mittelfeldspieler)mannschaft[i];
				System.out.println(m.toString());
			}
			else if(mannschaft[i] instanceof Sturmspieler){
				s=(Sturmspieler)mannschaft[i];
				System.out.println(s.toString());
			}
			else if(mannschaft[i] instanceof Torwart){
				t=(Torwart)mannschaft[i];
				System.out.println(t.toString());
			}
		}
	}
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double a1=roteKartenZaehlen(mannschaft1);
		double a2=roteKartenZaehlen(mannschaft2);
		double b1=toreZaehlen(mannschaft1);
		double b2=toreZaehlen(mannschaft2);
		double c1=gegentoreZaehlen(mannschaft1);
		double c2=gegentoreZaehlen(mannschaft2);
		double d1=paesseZaehlen(mannschaft1);
		double d2=paesseZaehlen(mannschaft2);
		double s1=b1-c1-a1+(double)d1/100;
		double s2=b2-c2-a2+(double)d2/100;
		if(s1>s2){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		else if(s1<s2){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		else{
			System.out.println(""Unentschieden!"");
		}
	}
	public static void main(String[] args){
		double b=(double)1/32;
		Torwart donnarumma=new Torwart(""Gianluigi Donnarumma"", 22, 1.125);
		Abwehrspieler dardai= new Abwehrspieler(""Marton Dardai"",19,1);
		Abwehrspieler dijk= new Abwehrspieler(""Virgil van Dijk"",29,2);
		Abwehrspieler gosens= new Abwehrspieler(""Robin Gosens"",26,b);
		Abwehrspieler kimmich= new Abwehrspieler(""Joshua Kimmich"",26,0);
		Mittelfeldspieler deBruyne= new Mittelfeldspieler(""Kevin De Bruyne"",29,40);
		Mittelfeldspieler thiago= new Mittelfeldspieler(""Thiago Alcantara do Nascimento"",30,80);
		Mittelfeldspieler sane= new Mittelfeldspieler(""Leroy Sane"",25,30);
		Mittelfeldspieler gnabry= new Mittelfeldspieler(""Serge Gnabry"",25,38);
		Mittelfeldspieler mueller= new Mittelfeldspieler(""Thomas Müller"",31,47);
		Sturmspieler lewandowski=new Sturmspieler(""Robert Lewandowski"",32,3);
		donnarumma.geburtstagFeiern();
		Fussballspieler[] mannschaft={donnarumma,dardai,dijk,gosens,kimmich,deBruyne,thiago,sane,gnabry,mueller,lewandowski};
		System.out.println(roteKartenZaehlen(mannschaft));
		ausgeben(mannschaft);
		fussballspielen(mannschaft, mannschaft);
	}
	/*Die Methode roteKartenZaehlen bekommt ein Objekt des Typs Fussballspieler übergeben. Damit kann jedoch nicht auf die Attribute des Objekts Abwehrspieler zugegriffen werden,
	deshalb muss das Objekt umgewandelt werden. Die Methode ausgeben bekommt ebenfalls ein Objekt des Typs Fussballspieler übergeben. Wenn auf die Methode toString() zugegriffen wird,
	so wird auf die Methode toString vom Objekt Fussballspieler zugegriffen. Jedoch ist de Aufruf der gleichnamigen Methode der Subklassen erwünscht. Deshalb wird hier auch das Objekt umgewandelt*/
}",//
Hadhri,"Mehdi Abdelfattah",m.hadhri@campus.tu-berlin.de,Beendet,"19. Juni 2021  12:12","26. Juni 2021  13:35","7 Tage 1 Stunde","12,15","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
    Fussballspieler deutschland [] = new Fussballspieler[11];
    deutschland [0] = new Sturmspieler(""Rodrigo"",18,4);
    deutschland [1] = new Sturmspieler(""Rodrigo"",18,2);
    deutschland [2] = new Sturmspieler(""Rodrigo"",18,2);
    deutschland [3] = new Sturmspieler(""Rodrigo"",18,2);
    deutschland [4] = new Abwehrspieler(""Rodrigo"",18,5);
    deutschland [5] = new Sturmspieler(""Rodrigo"",18,2);
    deutschland [6] = new Sturmspieler(""Rodrigo"",18,2);
    deutschland [7] = new Sturmspieler(""Rodrigo"",18,2);
    deutschland [8] = new Abwehrspieler(""Rodrigo"",18,3);
    deutschland [9] = new Sturmspieler(""Rodrigo"",18,2);
    deutschland [10] = new Torwart(""Sanchez"",18,8);
    deutschland [10].geburtstagFeiern();

    /*System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(deutschland);
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland,mannschaft2);*/
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
        double sumrot = 0;
        for (int i = 0;i < mannschaft.length;i++ ){
           if(mannschaft[i] instanceof Abwehrspieler){
               sumrot += ((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
            // Durch explizites Casten zum Abwehrspieler kann man auf die Methoden der Unterklasse zugreifen
            // ob wohl es als Fussballspieler gespeichert ist, nachdem geprüft wurde ob es
            // der Objektart Abwehrpsieler angehört
           }
        }
    return sumrot;
  }
  public static void ausgeben(Fussballspieler[] mannschaft){
    for (int i= 0;i < mannschaft.length;i++){
                System.out.println((mannschaft[i]).toString());
            }
            // Hier funktioniert es weil in den jeweiligen Subklassen die Methode toString() die von der Superklasse
            // vererbt wurde überschrieben wurden und somit die passende Methode der jeweiligen Subklassen genutzt wird
        }
   /* bitte implementieren */
  public static void fussballspielen(Fussballspieler[] deutschland, Fussballspieler[] mannschaft2){
    double score1 = 0;
    double score2 = 0;


    for (int i = 0;i<deutschland.length;i++){

        if(deutschland[i] instanceof Sturmspieler){

            score1 += 2* ((Sturmspieler)deutschland[i]).getToreJeSpiel();
        }

        if(deutschland[i] instanceof Abwehrspieler){
            score1 -= ((Abwehrspieler)deutschland[i]).getAnzahlRoteKartenJeSpiel();
        }

        if(deutschland[i] instanceof Mittelfeldspieler){
            score1 += ((Mittelfeldspieler)deutschland[i]).getPaesseJeSpiel();
        }

        if(deutschland[i] instanceof Torwart){
            score1 += ((Torwart)deutschland[i]).getGegentoreJeSpiel();
        }

    }
    for (int i = 0;i<mannschaft2.length;i++){

        if(mannschaft2[i] instanceof Sturmspieler){

            score2 += 2* ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
        }

        if(mannschaft2[i] instanceof Abwehrspieler){
            score2 -= ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
        }

        if(mannschaft2[i] instanceof Mittelfeldspieler){
            score2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
        }

        if(mannschaft2[i] instanceof Torwart){
            score2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
        }

        }

        if(score1 > score2){
            System.out.println(""Mannschaft 1 gewinnt das Spiel!"");
        }
        if(score2 > score1){
            System.out.println(""Mannschaft 2 gewinnt das Spiel!"");
        }
        if(score1 == score2){
            System.out.println(""Unentschieden!"");
        }
    }
   
}",-
Huang,Chenghao,chenghao.huang@campus.tu-berlin.de,Beendet,"20. Juni 2021  10:47","27. Juni 2021  21:42","7 Tage 10 Stunden","4,14","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",super,"die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Main,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {12. <sub>schnabelfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {15. <sub>kannSprechen:} Dropzone 11 -> {16. <sub>boolean} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {10. <sub>int} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Mansfeld,Maurice,maurice.mansfeld@campus.tu-berlin.de,Beendet,"20. Juni 2021  11:18","27. Juni 2021  23:59","7 Tage 12 Stunden","20,00","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Es wird die Methode der Sub-Klasse aufgerufen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","/** Mein Kommentar zur Polymorphie:
 Ich rufe sowohl in ausgeben als auch in roteKartenZaehlen ein Array aus Fussballspielern auf. Diese Klasse hat eine eigene toString Methode die dann theoretisch verwendet wird.
 Da ich aber auch in den Unterklassen jeweils eine toString Methode habe und die Objekte zwar Fussballspieler sind aber halt spezifischer auch Abwehrspieler, Mittelfeldspieler usw. sind, wird die toString Methode aus diesen Klassen aufgerufen.
 Java sucht immer nach der toString Methode die am wenigsten entfernt von meinem Objekt ist.*/

public class TestMannschaft {
    public static void main(String[] args) {

        // Arrays definieren

        Fussballspieler[] deutschland = {
                new Torwart(""Neuer"", 35, 2),
                new Abwehrspieler(""Hummels"", 32, 0),
                new Abwehrspieler(""Ginter"", 27, 1),
                new Abwehrspieler(""Ruediger"", 28, 0),
                new Abwehrspieler(""Gosens"", 26, 0),
                new Abwehrspieler(""Kimmich"", 26, 0),
                new Mittelfeldspieler(""Guendogan"", 30, 15),
                new Mittelfeldspieler(""Kroos"", 31, 35),
                new Mittelfeldspieler(""Havertz"", 22, 40),
                new Sturmspieler(""Gnabry"", 24, 2),
                new Sturmspieler(""Müller"", 31, 2),
        };

        Fussballspieler[] portugal = {
                new Torwart(""Patricio"", 35, 4),
                new Abwehrspieler(""Dias"", 24, 0),
                new Abwehrspieler(""Pepe"", 38, 1),
                new Abwehrspieler(""Mendes"", 30, 0),
                new Abwehrspieler(""Cancelo"", 27, 1),
                new Mittelfeldspieler(""Pereira"", 27, 10),
                new Mittelfeldspieler(""Neves"", 24, 28),
                new Mittelfeldspieler(""Fernandes"", 25, 16),
                new Sturmspieler(""Felix"", 21, 0),
                new Sturmspieler(""Ronaldo"", 36, 1),
                new Sturmspieler(""Silva"", 35, 1),
        };

        deutschland[5].geburtstagFeiern();
        System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
        System.out.println();
        ausgeben(deutschland);
        System.out.println();
        fussballspielen(deutschland, portugal);

    }

    public static double roteKartenZaehlen(Fussballspieler[] f) {
        double gesamtRoteKarten = 0;
        for (int i = 0, fLength = f.length; i < fLength; i++) {

            if (f[i] instanceof Abwehrspieler) {
                gesamtRoteKarten += ((Abwehrspieler) f[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return gesamtRoteKarten;

    }

    public static double paesseZaehlen(Fussballspieler[] f) {
        double paesse = 0;
        for (Fussballspieler fussballspieler : f) {
            if (fussballspieler instanceof Mittelfeldspieler) {
                paesse += ((Mittelfeldspieler) fussballspieler).getPaesseJeSpiel();
            }
        }
        return paesse;
    }

    public static double toreZaehlen(Fussballspieler[] f) {
        double tore = 0;
        for (Fussballspieler fussballspieler : f) {
            if (fussballspieler instanceof Sturmspieler) {
                tore += ((Sturmspieler) fussballspieler).getToreJeSpiel();
            }
        }
        return tore;
    }

    public static double gegentoreZaehlen(Fussballspieler[] f) {
        double gegentore = 0;
        for (Fussballspieler fussballspieler : f) {
            if (fussballspieler instanceof Torwart) {
                gegentore += ((Torwart) fussballspieler).getGegentoreJeSpiel();
            }
        }
        return gegentore;
    }

    public static void ausgeben(Fussballspieler[] f) {
        for (Fussballspieler fussballspieler : f) {
            if (fussballspieler instanceof Torwart) {
                System.out.println(fussballspieler + ""\n"");
            }
            if (fussballspieler instanceof Abwehrspieler) {
                System.out.println(fussballspieler + ""\n"");
            }
            if (fussballspieler instanceof Mittelfeldspieler) {
                System.out.println(fussballspieler + ""\n"");
            }
            if (fussballspieler instanceof Sturmspieler) {
                System.out.println(fussballspieler + ""\n"");
            }
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
        //punkteverteilung für attribute
        double ppass = 1.25;
        double protekarte = -2.0;
        double ptor = 4.0;
        double pgegentor = -2.0;
        double gesamtpunktem1 = ppass * paesseZaehlen(mannschaft1) + protekarte * roteKartenZaehlen(mannschaft1) + ptor * toreZaehlen(mannschaft1) + pgegentor * gegentoreZaehlen(mannschaft1);
        double gesamtpunktem2 = ppass * paesseZaehlen(mannschaft2) + protekarte * roteKartenZaehlen(mannschaft2) + ptor * toreZaehlen(mannschaft2) + pgegentor * gegentoreZaehlen(mannschaft2);


        if (gesamtpunktem1 > gesamtpunktem2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
            return;
        }
        if (gesamtpunktem1 == gesamtpunktem2) {
            System.out.println(""Unentschieden!"");
            return;
        }
        if (gesamtpunktem1 < gesamtpunktem2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        }

    }
}",//
Dukart,Kevin,dukart@campus.tu-berlin.de,Beendet,"20. Juni 2021  11:35","26. Juni 2021  11:59","6 Tage","20,00","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
    Fussballspieler[] deutschland = { new Torwart(""Neuer"", 30, 1.4), new Abwehrspieler(""Rüdiger"", 29, 0.4),
				new Abwehrspieler(""Friedrich"", 23, 0.0), new Abwehrspieler(""Klose"", 31, 0.9),
				new Abwehrspieler(""Dietrich"", 25, 1.0), new Mittelfeldspieler(""Siegfried"", 28, 38),
				new Mittelfeldspieler(""Gosens"", 25, 48), new Mittelfeldspieler(""Attila"", 23, 60),
				new Sturmspieler(""Müller"", 31, 1.5), new Sturmspieler(""Havertz"", 22, 0.9),
				new Sturmspieler(""Gomez"", 35, 0.6) };

		Fussballspieler[] portugal = { new Torwart(""Fritz"", 31, 0.9), new Abwehrspieler(""Marcel"", 24, 0.8),
				new Abwehrspieler(""Lutz"", 29, 1.0), new Abwehrspieler(""Bauer"", 31, 0.5),
				new Abwehrspieler(""Dietz"", 25, 1.0), new Mittelfeldspieler(""Franke"", 24, 18),
				new Mittelfeldspieler(""Petersen"", 28, 55), new Mittelfeldspieler(""van Hofen"", 21, 48),
				new Sturmspieler(""Frank"", 38, 0.1), new Sturmspieler(""Luko"", 29, 1.3),
				new Sturmspieler(""Larssen"", 20, 1.6) };

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(portugal);
    System.out.println();
    fussballspielen(deutschland, portugal);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft) {
		double roteKarten = 0;

		for (int i = 0; i < mannschaft.length; i++) {

			if (mannschaft[i] instanceof Abwehrspieler) {
				roteKarten = roteKarten + ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiel();

			}
		}
		return roteKarten;
	}
  public static void ausgeben(Fussballspieler[] mannschaft) {
		for (int i = 0; i < mannschaft.length; i++) {
			System.out.println(mannschaft[i].toString());
		}
	}
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {

		double staerkeMannschaft1 = 0;
		double staerkeMannschaft2 = 0;

		for (int i = 0; i < mannschaft1.length; i++) {

			if (mannschaft1[i] instanceof Abwehrspieler) {
				staerkeMannschaft1 = staerkeMannschaft1
						- 10 * ((Abwehrspieler) mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			} else if (mannschaft1[i] instanceof Mittelfeldspieler) {
				staerkeMannschaft1 = staerkeMannschaft1 + ((Mittelfeldspieler) mannschaft1[i]).getPaesseJeSpiel();
			} else if (mannschaft1[i] instanceof Sturmspieler) {
				staerkeMannschaft1 = staerkeMannschaft1 + 50 * ((Sturmspieler) mannschaft1[i]).getToreJeSpiel();
			} else if (mannschaft1[i] instanceof Torwart) {
				staerkeMannschaft1 = staerkeMannschaft1 - 50 * ((Torwart) mannschaft1[i]).getGegentoreJeSpiel();
			}
		}

		for (int i = 0; i < mannschaft2.length; i++) {

			if (mannschaft2[i] instanceof Abwehrspieler) {
				staerkeMannschaft2 = staerkeMannschaft2
						- 10 * ((Abwehrspieler) mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
			} else if (mannschaft2[i] instanceof Mittelfeldspieler) {
				staerkeMannschaft2 = staerkeMannschaft2 + ((Mittelfeldspieler) mannschaft2[i]).getPaesseJeSpiel();
			} else if (mannschaft2[i] instanceof Sturmspieler) {
				staerkeMannschaft2 = staerkeMannschaft2 + 50 * ((Sturmspieler) mannschaft2[i]).getToreJeSpiel();
			} else if (mannschaft2[i] instanceof Torwart) {
				staerkeMannschaft2 = staerkeMannschaft2 - 50 * ((Torwart) mannschaft2[i]).getGegentoreJeSpiel();
			}
		}
		
		if(staerkeMannschaft1 > staerkeMannschaft2) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		else if(staerkeMannschaft1 < staerkeMannschaft2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		else if(staerkeMannschaft1 == staerkeMannschaft2) {
			System.out.println(""Unentschieden!"");
		}

	}
}",//
Voßbeck,"Marike Antonia Karoline",m.vossbeck@tu-berlin.de,Beendet,"20. Juni 2021  14:48","24. Juni 2021  20:00","4 Tage 5 Stunden","18,65","Zeile 6,7 : super(); müsste vor x=0; stehen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.","Es wird die Methode der Sub-Klasse aufgerufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",extends,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
	  
    Fussballspieler[] raeuberinnen = new Fussballspieler[11];
    Fussballspieler[] clowns = new Fussballspieler[11];

    raeuberinnen[0] = new Torwart(""a"", 0, 3.1);
    raeuberinnen[1] = new Abwehrspieler(""b"", 1, 4.1);
    raeuberinnen[2] = new Abwehrspieler(""c"", 2, 5.02);
    raeuberinnen[3] = new Abwehrspieler(""d"", 3, 1.01);
    raeuberinnen[4] = new Abwehrspieler(""e"", 4, 9.1);
    raeuberinnen[5] = new Mittelfeldspieler(""f"", 5, 505);
    raeuberinnen[6] = new Mittelfeldspieler(""g"", 6, 4);
    raeuberinnen[7] = new Mittelfeldspieler(""h"", 7, 3.85);
    raeuberinnen[8] = new Mittelfeldspieler(""i"", 8, 2.678);
    raeuberinnen[9] = new Mittelfeldspieler(""j"", 9, 4.5);
    raeuberinnen[10] = new Sturmspieler(""k"", 10, 0.763);

    clowns[0] = new Torwart(""l"", 5, 9.9);
    clowns[1] = new Abwehrspieler(""m"", 10, 6.5);
    clowns[2] = new Abwehrspieler(""n"", 20, 0.28);
    clowns[3] = new Abwehrspieler(""o"", 25, 6.41);
    clowns[4] = new Abwehrspieler(""p"", 30, 56.07);
    clowns[5] = new Mittelfeldspieler(""q"", 35, 456.67);
    clowns[6] = new Mittelfeldspieler(""r"", 40, 25.34653);
    clowns[7] = new Mittelfeldspieler(""s"", 45, 77.3123);
    clowns[8] = new Mittelfeldspieler(""t"", 50, 69.89);
    clowns[9] = new Sturmspieler(""u"", 55, 78.4);
    clowns[10] = new Sturmspieler(""v"", 60, 987.5);

    clowns[10].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(raeuberinnen));
	System.out.println();
    ausgeben(raeuberinnen);
    System.out.println();
    fussballspielen(raeuberinnen, clowns);
  }

public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
    double roteKarten = 0.0;
    for(Fussballspieler f : mannschaft){
      if(f instanceof Abwehrspieler){
        roteKarten += ((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
      }
    }
    return roteKarten;
   
   /*Erstmal haben nur Abwehspieler die Methode, deshalb die Überprüfung, 
    *dann muss man casten, da erstmal angenommen wird, 
    *dass f ein Fußballspieler ist, welcher die Methode ja nicht hat.
    * */

  }
public static void ausgeben(Fussballspieler[] mannschaft){
    for(int i = 0; i < mannschaft.length; i++){
      System.out.println(mannschaft[i]);
    }
    /* Wenn wir printen, wird toString der jeweiligen Klassen automatisch aufgerufen,
     * welches die toString der Oberklasse überschreibt, das geht, weil die toString methode eben auch
     * in der Oberklasse existiert
     */  
  }

public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
  
	double staerke1 = 0.0;
	for(Fussballspieler f : mannschaft1){
		if (f instanceof Torwart) staerke1 -= 2.5*((Torwart)f).getGegentoreJeSpiel();
		else if(f instanceof Abwehrspieler) staerke1 -= 4.9*((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
		else if(f instanceof Mittelfeldspieler) staerke1 += 0.71*((Mittelfeldspieler)f).getPaesseJeSpiel();
		else if(f instanceof Sturmspieler) staerke1 += 4.8*((Sturmspieler)f).getToreJeSpiel();
		}
		
	double staerke2 = 0.0;
	for(Fussballspieler f : mannschaft2){
		if (f instanceof Torwart) staerke2 -= 2.5*((Torwart)f).getGegentoreJeSpiel();
		else if(f instanceof Abwehrspieler) staerke2 -= 4.9*((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
		else if(f instanceof Mittelfeldspieler) staerke2 += 0.1*((Mittelfeldspieler)f).getPaesseJeSpiel();
		else if(f instanceof Sturmspieler) staerke2 += 4.8*((Sturmspieler)f).getToreJeSpiel();
		}
		
	if (staerke1>staerke2){
		System.out.println(""Mannschaft 1 gewinnt!"");} //fehler hier
	else if (staerke1<staerke2){
		System.out.println(""Mannschaft 2 gewinnt!"");} //fehler hier
	else {
		System.out.println(""Unentschieden!"");}
	}
}",//
Ochmann,"Luis Eddie",luis.ochmann@campus.tu-berlin.de,Beendet,"20. Juni 2021  16:10","27. Juni 2021  23:35","7 Tage 7 Stunden","10,30","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"die Klasse Hund erbt von der Klasse Tier","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
    public static void main(String[] args){
        Torwart vet=new Torwart(""Vettel "", 33, 9);
        Abwehrspieler ham= new Abwehrspieler(""Hamilton"",66,98);
        Abwehrspieler ric= new Abwehrspieler(""Ricciardo"",55,36);
        Abwehrspieler bot= new Abwehrspieler(""Bottas"",82,89);
        Abwehrspieler tot= new Abwehrspieler(""Toto"",45,7);
        Abwehrspieler jam= new Abwehrspieler(""James"",44,6);
        Abwehrspieler alb= new Abwehrspieler(""Albon"",159,22);
        Sturmspieler marq= new Sturmspieler(""Marqeuz"",22,3);
        Sturmspieler tomi= new Sturmspieler(""Tomi"",0,0);
        Sturmspieler oli= new Sturmspieler(""Oli"",79,32);
        Mittelfeldspieler paul=new Mittelfeldspieler(""Paul"",12,34);
        vet.geburtstagFeiern();
        Fussballspieler[] team={vet,ham,ric,bot,tot,jam,alb,marq,tomi,oli,paul};
        System.out.println(roteKartenZaehlen(team));
        ausgeben(team);
        fussballspielen(team, team);
    }

    public static double gegentoreZaehlen(Fussballspieler[] team){
        double gegentore=0;
        Torwart y;
        for(int i=0; i<team.length;i++){
            if(team[i] instanceof Torwart){
                y=(Torwart)team[i];
                gegentore+=y.getGegentoreJeSpiel();
            }
        }
        return gegentore;
    }
    public static double roteKartenZaehlen(Fussballspieler[] team){
        double roteKarten=0;
        Abwehrspieler a;
        for(int i=0; i<team.length;i++){
            if(team [i] instanceof Abwehrspieler){
                a=(Abwehrspieler)team[i];
                roteKarten+=a.getAnzahlRoteKartenJeSpiel();
            }
        }
        return roteKarten;
    }
    public static void ausgeben(Fussballspieler[] team){
        Mittelfeldspieler x;
        Torwart y;
        Abwehrspieler z;
        Sturmspieler q;
        for(int i=0; i<team.length;i++){
            if(team[i] instanceof Abwehrspieler){
                z=(Abwehrspieler)team[i];
                System.out.println(z.toString());
            }
            else if(team[i] instanceof Mittelfeldspieler){
                x=(Mittelfeldspieler)team[i];
                System.out.println(x.toString());
            }
            else if(team[i] instanceof Sturmspieler){
                q=(Sturmspieler)team[i];
                System.out.println(q.toString());
            }
            else if(team[i] instanceof Torwart){
                y=(Torwart)team[i];
                System.out.println(y.toString());
            }
        }
    }
    public static double toreZaehlen(Fussballspieler[] team){
        Sturmspieler q;
        double tore=0;
        for(int i=0; i<team.length;i++){
            if(team[i] instanceof Sturmspieler){
                q=(Sturmspieler)team[i];
                tore+=q.getToreJeSpiel();
            }
        }
        return tore;
    }
    public static double paesseZaehlen(Fussballspieler[] team){
        Mittelfeldspieler x;
        double paesse=0;
        for(int i=0; i<team.length;i++){
            if(team[i] instanceof Mittelfeldspieler){
                x=(Mittelfeldspieler)team[i];
                paesse+=x.getPaesseJeSpiel();
            }
        }
        return paesse;
    }
    public static void fussballspielen(Fussballspieler[] team1, Fussballspieler[] team2){
        double x1=paesseZaehlen(team1);
        double x2=paesseZaehlen(team2);
        double x3=toreZaehlen(team1);
        double x4=toreZaehlen(team2);
        double x5=roteKartenZaehlen(team1);
        double x6=roteKartenZaehlen(team2);
        double x7=gegentoreZaehlen(team1);
        double x8=gegentoreZaehlen(team2);
        double x9=x3/4-x7/3-x5/2+(double)x1/10.0;
        double x10=x4/4-x8/3-x6/2+(double)x2/10.0;
        if(x9>x10){
            System.out.println(""Team 1 gewinnt!"");
        }
        else if(x9<x10){
            System.out.println(""Team 2 gewinnt!"");
        }
        else{
            System.out.println(""Unentschieden!"");
        }
    }
}",-
Mondry,Leonard,leonard.mondry@campus.tu-berlin.de,Beendet,"20. Juni 2021  22:01","21. Juni 2021  01:25","3 Stunden 24 Minuten","18,23","die Klasse Hund erbt von der Klasse Tier",Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Zeile 6,7 : super(); müsste vor x=0; stehen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {13. <sub>spannweite:} Dropzone 8 -> {4. <sub>double} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {12. <sub>schnabelfarbe:} Dropzone 11 -> {3. <sub>String} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {15. <sub>kannSprechen:} Dropzone 16 -> {16. <sub>boolean} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {10. <sub>int} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {
	
	public static void main(String[] args){
		
		Fussballspieler[] mannschaft1 = new Fussballspieler[11];
		Fussballspieler[] mannschaft2 = new Fussballspieler[11];
		
		Abwehrspieler a11 = new Abwehrspieler(""Spieler 1"", 22, 0.1);
		Abwehrspieler a12 = new Abwehrspieler(""Spieler 2"", 21, 0.4);
		Abwehrspieler a13 = new Abwehrspieler(""Spieler 3"", 22, 0.2);
		Mittelfeldspieler m11 = new Mittelfeldspieler(""Spieler 4"", 19, 15.0);
		Mittelfeldspieler m12 = new Mittelfeldspieler(""Spieler 5"", 23, 25.0);
		Mittelfeldspieler m13 = new Mittelfeldspieler(""Spieler 6"", 20, 31.0);
		Mittelfeldspieler m14 = new Mittelfeldspieler(""Spieler 7"", 23, 29.0);
		Sturmspieler s11 = new Sturmspieler(""Spieler 8"", 18,  5.0);
		Sturmspieler s12 = new Sturmspieler(""Spieler 9"", 18,  4.0);
		Sturmspieler s13 = new Sturmspieler(""Spieler 10"", 22,  3.0);
		Torwart t1 = new Torwart(""Spieler 11"", 20, 0);
		
		Abwehrspieler a21 = new Abwehrspieler(""Spieler 1"", 36, 20.1);
		Abwehrspieler a22 = new Abwehrspieler(""Spieler 2"", 29, 23.1);
		Abwehrspieler a23 = new Abwehrspieler(""Spieler 3"", 31, 17.1);
		Mittelfeldspieler m21 = new Mittelfeldspieler(""Spieler 4"", 33, 1.4);
		Mittelfeldspieler m22 = new Mittelfeldspieler(""Spieler 5"", 41, 2.0);
		Mittelfeldspieler m23 = new Mittelfeldspieler(""Spieler 6"", 7, 0.1);
		Mittelfeldspieler m24 = new Mittelfeldspieler(""Spieler 7"", 68, 0.5);
		Sturmspieler s21 = new Sturmspieler(""Spieler 8"", 11,  0.0);
		Sturmspieler s22 = new Sturmspieler(""Spieler 9"", 55,  0.0);
		Sturmspieler s23 = new Sturmspieler(""Spieler 10"", 101,  0.0);
		Torwart t2 = new Torwart(""Spieler 11"", 9, 5);
		
		mannschaft1[0] = a11;
		mannschaft1[1] = a12;
		mannschaft1[2] = a13;
		mannschaft1[3] = m11;
		mannschaft1[4] = m12;
		mannschaft1[5] = m13;
		mannschaft1[6] = m14;
		mannschaft1[7] = s11;
		mannschaft1[8] = s12;
		mannschaft1[9] = s13;
		mannschaft1[10] = t1;
		
		mannschaft2[0] = a21;
		mannschaft2[1] = a22;
		mannschaft2[2] = a23;
		mannschaft2[3] = m21;
		mannschaft2[4] = m22;
		mannschaft2[5] = m23;
		mannschaft2[6] = m24;
		mannschaft2[7] = s21;
		mannschaft2[8] = s22;
		mannschaft2[9] = s23;
		mannschaft2[10] = t2;
		
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
		System.out.println();
		ausgeben(mannschaft1);
		System.out.println();
		fussballspielen(mannschaft1, mannschaft2);
	}
	
	public static double roteKartenZaehlen(Fussballspieler[] mannschaft) {
		double anzahlRoteKartenJeSpiel = 0;
		for(int i = 0; i < mannschaft.length; i++) {
			if(mannschaft[i] instanceof Abwehrspieler) {
				anzahlRoteKartenJeSpiel += ((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return anzahlRoteKartenJeSpiel;
	}
	
	public static void ausgeben(Fussballspieler[] mannschaft){
		for(int i = 0; i < mannschaft.length; i++) {
			System.out.println(mannschaft[i].toString());
		}
    }
	
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		
		double spielstaerkeMannschaft1 = 0;
		
		for(int i = 0; i < mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Abwehrspieler) {
				spielstaerkeMannschaft1 -= ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			} else if(mannschaft1[i] instanceof Mittelfeldspieler) {
				spielstaerkeMannschaft1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
			} else if(mannschaft1[i] instanceof Sturmspieler) {
				spielstaerkeMannschaft1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			} else if(mannschaft1[i] instanceof Torwart) {
				spielstaerkeMannschaft1 -= ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
			}
		}
		
		
		double spielstaerkeMannschaft2 = 0;
		
		for(int i = 0; i < mannschaft1.length; i++) {
			if(mannschaft2[i] instanceof Abwehrspieler) {
				spielstaerkeMannschaft2 -= ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
			} else if(mannschaft2[i] instanceof Mittelfeldspieler) {
				spielstaerkeMannschaft2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
			} else if(mannschaft2[i] instanceof Sturmspieler) {
				spielstaerkeMannschaft2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
			} else if(mannschaft2[i] instanceof Torwart) {
				spielstaerkeMannschaft2 -= ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
			}
		}
		
		
		if(spielstaerkeMannschaft1 > spielstaerkeMannschaft2) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		} else if(spielstaerkeMannschaft1 == spielstaerkeMannschaft2) {
			System.out.println(""Unentschieden!"");
		} else if(spielstaerkeMannschaft1 < spielstaerkeMannschaft2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
	}
}",//
Kinschus,Oskar,o.kinschus@campus.tu-berlin.de,Beendet,"20. Juni 2021  22:57","26. Juni 2021  20:15","5 Tage 21 Stunden","9,70","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",Main,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {10. <sub>int} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,//
"Cabral de Jesus",Francisco,cabraldejesus@campus.tu-berlin.de,Beendet,"21. Juni 2021  00:04","27. Juni 2021  23:59","6 Tage 23 Stunden","10,36","Zeile 7 : super(); müsste this(); heißen","Dies ruft innerhalb einer Superklasse den Konstruktor einer Subklasse auf.",Java,"Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
	 
    // Arrays definieren
    Fussballspieler[] mannschaft1 = new Fussballspieler[11];
	Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	  
    //Werte einfügen
	mannschaft1[0] = new Torwart(""Max"", 21, 4.1);
	mannschaft1[1] = new Abwehrspieler(""Timon"", 18, 0.01);
	mannschaft1[2] = new Abwehrspieler(""Fran"", 21, 0.05);
	mannschaft1[3] = new Abwehrspieler(""Heinz"", 18, 0.01);
	mannschaft1[4] = new Mittelfeldspieler(""Tim"", 25, 78);
	mannschaft1[5] = new Mittelfeldspieler(""Pedro"", 47, 34);
	mannschaft1[6] = new Mittelfeldspieler(""Estefan"", 24, 67);
	mannschaft1[7] = new Mittelfeldspieler(""Lucas"", 15, 14);
	mannschaft1[8] = new Sturmspieler(""Maycol"", 17, 1);
	mannschaft1[9] = new Sturmspieler(""Benjamin"", 22, 1);
	mannschaft1[10] = new Sturmspieler(""Frank"", 24, 0);
	
	mannschaft2[0] = new Torwart(""Puma"", 18, 1);
	mannschaft2[1] = new Abwehrspieler(""Mole"", 25, 0.0);
	mannschaft2[2] = new Abwehrspieler(""Picu"", 55, 2.0);
	mannschaft2[3] = new Abwehrspieler(""Fede"", 18, 6.0);
	mannschaft2[4] = new Mittelfeldspieler(""Nico"", 22, 12);
	mannschaft2[5] = new Mittelfeldspieler(""Nko"", 22, 12);
	mannschaft2[6] = new Mittelfeldspieler(""Herman"", 26, 24);
	mannschaft2[7] = new Mittelfeldspieler(""Klaus"", 22, 24);
	mannschaft2[8] = new Mittelfeldspieler(""Lukas"", 18, 55);
	mannschaft2[9] = new Sturmspieler(""Marion"", 16, 0);
	mannschaft2[10] = new Sturmspieler(""Gael"", 19, 4);
	
	// Geburtstag feiern
	mannschaft2[5].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
    System.out.println();
    ausgeben(mannschaft1);
    System.out.println();
    fussballspielen(mannschaft1, mannschaft2);			
  }
	//da wir vorher überprüfen, ob der Spieler ein Abwehrspieler ist,
	//können wir die entsprechende Methode für den Abwehrspieler aufrufen.
  public static double roteKartenZaehlen(Fussballspieler[] spieler){
    double roteKarten = 0.0;
	for(int i=0; i<spieler.length; i++){
		if(spieler[i] instanceof Abwehrspieler) {
			roteKarten += ((Abwehrspieler) spieler[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
  }
	//Da wird die entsprechende Methode (toString) automatisch
	//aufgerufen (Polymorphie)
  public static void ausgeben(Fussballspieler[] spieler){
	for(int i=0; i<spieler.length; i++){
		System.out.print(spieler[i]);
	}
  }
  public static int tore(Fussballspieler[] mannschaft) {
	int tore = 0;
	for(int i=0; i<mannschaft.length; i++){
		if(mannschaft[i] instanceof Sturmspieler) { 
			tore += ((Sturmspieler)mannschaft[i]).getToreJeSpiel();
		}
	}
	return tore;
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int tore1 = tore(mannschaft1);
	int tore2 = tore(mannschaft2);
	if(tore1>tore2) {
		System.out.println(""Mannschaft 1 gewinnt!"");
	} else if (tore1<tore2) {
		System.out.println(""Mannschaft 2 gewinnt!"");
	} else {
		System.out.println(""Unentschieden!"");
	}
  }
}",-
Asad,Hamza,hamza.asad@campus.tu-berlin.de,Beendet,"21. Juni 2021  00:19","27. Juni 2021  23:39","6 Tage 23 Stunden","11,59","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Es wird die Methode der Sub-Klasse aufgerufen","Zeile 5 : Methode B() hat keinen Rückgabewert","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {10. <sub>int} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {10. <sub>int} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Kommentar zur Polymorphie: in der ausgeben()-Methode wird ein Array übergeben, welcher wiederrum Unterklassen hat.
// Da alle Objekte der Unterklassen eine toString-Methode haben ist ein cast hier überflüssig.
// Das liegt daran, dass Java objektorientiert arbeitet. Es wird erst zur Laufzeit entschieden, welche Methode aufgerufen wird.
// Dabei wird danach entschieden welche Methode dem Objekt am nächsten ist. In RoteKartenZaehlen() soll nur die Unterklasse Abwehrspieler
// angesprochen werden. Aus diesem Grund ist hier ein Cast zur speziellen Unterklasse notwendig.
//

public class TestMannschaft {
    public static void main(String[] args) {

        Fussballspieler[] m1 = {
                new Torwart(""A"", 22, 1),
                new Abwehrspieler(""B"", 34, 1),
                new Abwehrspieler(""C"", 40, 5),
                new Abwehrspieler(""D"", 25, 0),
                new Sturmspieler(""E"", 22, 0),
                new Sturmspieler(""F"", 30, 4),
                new Abwehrspieler(""G"", 21, 1),
                new Abwehrspieler(""H"", 28, 0),
                new Mittelfeldspieler(""I"", 17, 30),
                new Mittelfeldspieler(""J"", 29, 100),
                new Mittelfeldspieler(""K"", 24, 2),
        };

        Fussballspieler[] m2 = {
                new Torwart(""L"", 37, 3),
                new Abwehrspieler(""M"", 30, 0),
                new Abwehrspieler(""N"", 35, 2),
                new Abwehrspieler(""O"", 25, 4),
                new Sturmspieler(""P"", 23, 0),
                new Sturmspieler(""Q"", 21, 3),
                new Abwehrspieler(""R"", 20, 1),
                new Abwehrspieler(""S"", 28, 2),
                new Mittelfeldspieler(""T"", 18, 10),
                new Mittelfeldspieler(""U"", 32, 66),
                new Mittelfeldspieler(""V"", 16, 45),
        };

        m1[4].geburtstagFeiern();
        System.out.println(""Rote Karten: "" + roteKartenZaehlen(m1));
        System.out.println();
        ausgeben(m1);
        System.out.println();
        fussballspielen(m1,m2);

    }

        public static double roteKartenZaehlen(Fussballspieler[]a){
            double roteInsgesamt = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Abwehrspieler)
                    roteInsgesamt += ((Abwehrspieler) a[i]).getAnzahlRoteKartenJeSpiel();
            }
            return roteInsgesamt;
        }

        public static double countPaesse(Fussballspieler[]a) {
            double passAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Mittelfeldspieler)
                    passAnzahl += ((Mittelfeldspieler) a[i]).getPaesseJeSpiel();
            }
            return passAnzahl;
        }

        public static double countTore(Fussballspieler[]a) {
            double toreAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Sturmspieler)
                    toreAnzahl += ((Sturmspieler) a[i]).getToreJeSpiel();
            }
            return toreAnzahl;
        }

        public static double countGegentore(Fussballspieler[]a) {
            double gegentoreAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Torwart)
                   gegentoreAnzahl += ((Torwart) a[i]).getGegentoreJeSpiel();
            }
            return gegentoreAnzahl;
        }

        public static void ausgeben (Fussballspieler[]o) {
            for (int i = 0; i < o.length; i++) {
                System.out.println(o[i].toString());
            }
        }

        public static void fussballspielen (Fussballspieler[]mannschaft1, Fussballspieler[]mannschaft2){
        double ergebnis1 = countTore(mannschaft1)*1000+countPaesse(mannschaft1)-countGegentore(mannschaft1)*1000-roteKartenZaehlen(mannschaft1)*10;
        double ergebnis2 = countTore(mannschaft2)*1000+countPaesse(mannschaft2)-countGegentore(mannschaft2)*1000-roteKartenZaehlen(mannschaft2)*10;
        if (ergebnis1 == ergebnis2) {
            System.out.println(""Unentschieden!"");
        }
            else {
                if (ergebnis1 < ergebnis2) {
                    System.out.println(""Mannschaft 2 gewinnt!"");
                }
                else {
                    System.out.println(""Mannschaft 1 gewinnt!"");
                }
        }
    }
}",-
Czekanski,"Julian Michael",j.czekanski@campus.tu-berlin.de,Beendet,"21. Juni 2021  01:02","25. Juni 2021  14:37","4 Tage 13 Stunden","19,15","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Es wird die Methode der Sub-Klasse aufgerufen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {

	public static void main(String[] args) {
		Fussballspieler[] deutschland = new Fussballspieler[11];
		deutschland[0] = new Torwart(""Neuer"", 20, 0.5);
		deutschland[1] = new Abwehrspieler(""Rüdiger"", 25, 1.5);
		deutschland[2] = new Abwehrspieler(""Ginter"", 29, 1.3);
		deutschland[3] = new Abwehrspieler(""Hummels"", 31, 1.0);
		deutschland[4] = new Mittelfeldspieler(""Kimmich"", 24, 24.3);
		deutschland[5] = new Mittelfeldspieler(""Guendogan"", 28, 30.8);
		deutschland[6] = new Mittelfeldspieler(""Gosens"", 24, 36);
		deutschland[7] = new Mittelfeldspieler(""Can"", 29, 34.1);
		deutschland[8] = new Sturmspieler(""Werner"", 26, 1.0);
		deutschland[9] = new Sturmspieler(""Mueller"", 32, 2.1);
		deutschland[10] = new Sturmspieler(""Volland"", 27, 1.3);
		
		Fussballspieler[] england = new Fussballspieler[11];
		england[0] = new Torwart(""Pickford"", 23, 0.8);
		england[1] = new Abwehrspieler(""Walker"", 28, 0.2);
		england[2] = new Abwehrspieler(""Stones"", 23, 0.9);
		england[3] = new Abwehrspieler(""Mings"", 25, 0.6);
		england[4] = new Abwehrspieler(""Trippier"", 30, 0.9);
		england[5] = new Mittelfeldspieler(""Rice"", 22, 30.2);
		england[6] = new Mittelfeldspieler(""Phillips"", 21, 22.1);
		england[7] = new Mittelfeldspieler(""Mount"", 19, 43.1);
		england[8] = new Sturmspieler(""Foden"", 21, 1.1);
		england[9] = new Sturmspieler(""Kane"", 31, 2.3);
		england[10] = new Sturmspieler(""Sterling"", 29, 1.1);
		
		deutschland[1].geburtstagFeiern();
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
		System.out.println();
		ausgeben(deutschland);
		System.out.println();
		fussballspielen(deutschland, england);
		

	}
	
	/**
	 *  Eine Methode zum Berechnen der roten Karten der Abwehrspieler je Spiel.
	 *  Polymorphie spielt hierbei eine große Rolle, denn nicht alle Fussballspieler sind Abwehrspieler, sodass man Prüfen muss,
	 *  ob der Spieler beim aktuellen Index vom Typ ""Abwehrspieler"" ist.
	 * @param spieler
	 * @return
	 */
	public static double roteKartenZaehlen(Fussballspieler[] spieler) {
		double ergebnis = 0;
		for (int i = 0; i < spieler.length; i++) {
			if (spieler[i] instanceof Abwehrspieler) {
				Abwehrspieler a = (Abwehrspieler) spieler[i];
				ergebnis += a.getAnzahlRoteKartenJeSpiel();
			}
		}
		return ergebnis;
		
	}
	
	/**
	 * Eine Methode zum Ausgeben der relevanten Informationen der Fussballspieler auf der Konsole.
	 * Polymorphie spielt hierbei nur in den Unterschieden der toString-Methode eine Rolle, jedoch nicht direkt als Type-Casting.
	 * @param spieler
	 */
	public static void ausgeben(Fussballspieler[] spieler) {
		for (int i = 0; i < spieler.length; i++) {
			System.out.println(spieler[i].toString());
		}
	}
	
	private static double staerkeRechnen(Fussballspieler[] mannschaftA) {
		double staerkeA = 0;
		for (int i = 0; i < mannschaftA.length; i++) {
			if (mannschaftA[i] instanceof Torwart) {
				Torwart t = (Torwart) mannschaftA[i];
				if (t.getAlter() > 30) {
					staerkeA += 10;
				} else if (t.getGegentoreJeSpiel() < 0.5) {
					staerkeA += 30;
				}
			} else if (mannschaftA[i] instanceof Abwehrspieler) {
				Abwehrspieler a = (Abwehrspieler) mannschaftA[i];
				if (a.getAlter() > 28) {
					staerkeA -= 10;
				} else if (a.getAnzahlRoteKartenJeSpiel() > 1) {
					staerkeA -= 20;
				}
			} else if (mannschaftA[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler m = (Mittelfeldspieler) mannschaftA[i];
				if (m.getPaesseJeSpiel() > 30) {
					staerkeA += 30;
				} else if (m.getAlter() > 30) {
					staerkeA -= 10;
				}
			} else if (mannschaftA[i] instanceof Sturmspieler) {
				Sturmspieler s = (Sturmspieler) mannschaftA[i];
				if (s.getAlter() > 27) {
					staerkeA -= 10;
				} else if (s.getToreJeSpiel() > 2) {
					staerkeA += 40;
				}
			}
		}
		return staerkeA;
	}
	
	public static void fussballspielen(Fussballspieler[] mannschaftA, Fussballspieler[] mannschaftB) {
		double staerkeA = staerkeRechnen(mannschaftA);
		double staerkeB = staerkeRechnen(mannschaftB);
		if (staerkeA > staerkeB) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		} else if (staerkeB > staerkeA) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		} else {
			System.out.println(""Unentschieden!"");
		}
	}

}",//
Chaudhary,Pradeep,p.chaudhary@campus.tu-berlin.de,Beendet,"21. Juni 2021  08:16","27. Juni 2021  23:59","6 Tage 15 Stunden","16,00","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
	  public static void main(String[] args){      
    	 // Arrays definieren
     	Fussballspieler [] deutschland = {new Torwart(""Neuer"", 35,2.0), new Abwehrspieler(""Hummels"",32,1.0), new Abwehrspieler(""Ruediger"",28,0.0), 								new	Abwehrspieler(""Ginter"",27,0.0), new Mittelfeldspieler(""Kross"",31,120.0), new Mittelfeldspieler(""Kimmich"",26,90.0), 
     						new	Mittelfeldspieler(""Goretzka"",26,85), new Sturmspieler(""Sane"",25,2), new Sturmspieler(""Gnabry"",25,1), 
     						new	Sturmspieler(""Mueller"",31,1.0), new Sturmspieler(""Havertz"",22,2.0)};
     
    	 Fussballspieler [] frankreich = {new Torwart(""Costil"",33,1.0), new Abwehrspieler(""Varane"",28,0.0), new Abwehrspieler(""Mendy"",26,1.0), 
     						new	Abwehrspieler(""Lenglet"",26,0.0), new Mittelfeldspieler(""Pogba"",28,80.0), new Mittelfeldspieler(""Tolisso"",26,50.0), 
     						new Mittelfeldspieler(""Kante"",30,70.0), new Sturmspieler(""Coman"",25,1.0), new Sturmspieler(""Griezmann"",30,1.0), 
     						new Sturmspieler(""Benzema"",33,1.0), new Sturmspieler(""Mbappe"",22,2.0)};
     						
    	 ((Torwart)deutschland[0]).geburtstagFeiern();
          
    	//Werte einfügen
    	System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    	System.out.println();
    	ausgeben(deutschland);
    	System.out.println();
    	fussballspielen(deutschland,frankreich);
 	  }
  	  public static double roteKartenZaehlen(Fussballspieler [] f){  
  		//  bitte implementieren 
  			double summeRotekarten = 0.0;
  			for(Fussballspieler player : f){
  				if(player instanceof Abwehrspieler){
  				summeRotekarten += ((Abwehrspieler)player).getAnzahlRoteKartenJeSpiel();
  				}
  			}  	
  			return summeRotekarten;
  	  }
	  public static void ausgeben(Fussballspieler [] f){    
		   // bitte implementieren 
   			for(int i = 0; i < f.length; i++){
   				System.out.println(f[i]);
	   		}
   	  }  
	  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){    
	   // bitte implementieren 
	   double team1 = spiel(mannschaft1) ;
	   double team2 = spiel(mannschaft2); 
   
	   if( team1 > team2 ){ System.out.println(""Mannschaft 1 gewinnt!"");  }
	   else if ( team1 == team2 ){ System.out.println(""Unentschieden!"");  }
	   else { System.out.println(""Mannschaft 2 gewinnt!""); }
	   }
	   public static double spiel(Fussballspieler[] a){
	   		double spielStaerke = 0.0;
	   		for(Fussballspieler team : a){
		   		if(team instanceof Torwart){ spielStaerke += -((Torwart)team).getGegentoreJeSpiel();	}
		   		else if(team instanceof Abwehrspieler){ spielStaerke += -((Abwehrspieler)team).getAnzahlRoteKartenJeSpiel(); }
		   		else if(team instanceof Mittelfeldspieler){ spielStaerke += ((Mittelfeldspieler)team).getPaesseJeSpiel(); }
		   		else {spielStaerke += ((Sturmspieler)team).getToreJeSpiel(); }   	
	   		}
	   		return spielStaerke;
	   }  
}",//
Mäding,"Toni Siegfried",t.maeding@campus.tu-berlin.de,Beendet,"21. Juni 2021  11:05","27. Juni 2021  23:21","6 Tage 12 Stunden","4,14","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",extends,Object,"Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {12. <sub>schnabelfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {15. <sub>kannSprechen:} Dropzone 11 -> {16. <sub>boolean} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {4. <sub>double} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Großgoerge,Corvin,corvin.grossgoerge@campus.tu-berlin.de,Beendet,"21. Juni 2021  11:47","27. Juni 2021  21:55","6 Tage 10 Stunden","11,23","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Main,"die Methode Hund erbt ein Tier-Objekt","Zeile 6,7 : super(); müsste vor x=0; stehen",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{

  public static void main(String[] args){
      
     		Fussballspieler[] deutschland = {
			new Torwart (""Martin"", 21, 2),
			new Abwehrspieler (""Anja"", 24, 7), 
			new Abwehrspieler (""Clara"", 31, 0),
			new Abwehrspieler (""Charlott"", 33, 0),
			new Mittelfeldspieler (""Bernadette"", 17,34),
			new Mittelfeldspieler (""Oli"", 37,22),
			new Mittelfeldspieler (""Jim"",25,14),
			new Mittelfeldspieler (""Liesbet"", 28,25),
			new Sturmspieler (""Bruce"", 22, 3),
			new Sturmspieler (""Clark"", 12, 0),
			new Sturmspieler (""Wade"", 40, 9)
		};
		deutschland[3].geburtstagFeiern ();

		Fussballspieler[] armenien = {
			new Torwart (""Tony"", 34, 0),
			new Abwehrspieler (""Bruce"", 100, 7),
			new Abwehrspieler (""Matt"", 21, 2),
			new Abwehrspieler (""Heinz"", 30, 0),
			new Mittelfeldspieler (""Fabio"", 17,34),
			new Mittelfeldspieler (""Mobius"", 37,22),
			new Mittelfeldspieler (""Tom"",25,14),
			new Mittelfeldspieler (""Loki"", 28,25),
			new Sturmspieler (""Thor"", 22, 3),
			new Sturmspieler (""Mario"", 24, 0),
			new Sturmspieler (""Luigi"", 23, 9)
		};
		armenien[9].geburtstagFeiern();


   System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(armenien));
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, armenien);
	}

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1){
	   double alleRotenKarten = 0;
	   for (int i = 0; i < mannschaft1.length; i++) {
		   if (mannschaft1[i] instanceof Abwehrspieler) {
		   Abwehrspieler spieler = (Abwehrspieler)mannschaft1 [i];
		   alleRotenKarten += spieler.getAnzahlRoteKartenJeSpiel(); 
		   }
	   }
	   return alleRotenKarten;
	   //Kommentar: hier ist Polymorphie irrelevant, da verwendete Methode nur einmal im Package und nicht überschrieben wird.
  }
  
  public static void ausgeben(Fussballspieler[] mannschaft1){
	  for (int i = 0; i < mannschaft1.length; i++) {
		  if (mannschaft1[i] instanceof Torwart) {
			  Torwart spieler = (Torwart)mannschaft1 [i];
			  System.out.println(spieler.toString());
		  }
		  else if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft1 [i];
				 System.out.println(spieler.toString());
		  }
		  else if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1 [i];
				 System.out.println(spieler.toString());
		  }
		  else {
			   Abwehrspieler spieler = (Abwehrspieler)mannschaft1 [i];
			  System.out.println(spieler.toString());
			  }
		} //Kommentar: Polymorphie wichtig, da jede Klasse klassenspezifische Attribute hat und eigene toString Methode besitzt und diese verwendet werden sollte.
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	double alleAlter1 = 0;
	double alleGegenTore1 = 0;
	double alleTore1 = 0;
	double allePaesse1 = 0;
	double alleAlter2 = 0;
	double alleGegenTore2 = 0;
	double alleTore2 = 0;
	double allePaesse2 = 0;
	double staerke1 = 0;
	double staerke2 = 0;
		for (int i = 0; i < mannschaft1.length; i++) {
			alleAlter1 += mannschaft1[i].getAlter();
			if (mannschaft1[i] instanceof Torwart) {
				Torwart spieler = (Torwart)mannschaft1 [i];
				alleGegenTore1 +=  spieler.getGegentoreJeSpiel();
				}
			if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft1 [i];
				alleTore1 +=  spieler.getToreJeSpiel();
				}
			if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1 [i];
				allePaesse1 +=  spieler.getPaesseJeSpiel();
				}
		}
		for (int i = 0; i < mannschaft2.length; i++) {
			alleAlter2 += mannschaft2[i].getAlter();
			if (mannschaft2[i] instanceof Torwart) {
				Torwart spieler = (Torwart)mannschaft2 [i];
				alleGegenTore2 +=  spieler.getGegentoreJeSpiel();
				}
			if (mannschaft2[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft2 [i];
				alleTore2 +=  spieler.getToreJeSpiel();
				}
			if (mannschaft2[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft2 [i];
				allePaesse2 +=  spieler.getPaesseJeSpiel();
				}
			}	
				
				staerke1 = alleAlter1+allePaesse1+alleTore1-alleGegenTore1-roteKartenZaehlen(mannschaft1);
				staerke2 = alleAlter2+allePaesse2+alleTore2-alleGegenTore2-roteKartenZaehlen(mannschaft2);
				
		if (staerke1 > staerke2) {
			  System.out.println(""Mannschaft 1 gewinnt!"");
			}
			else if (staerke1 == staerke2) {
			  System.out.println(""Unentschieden!"");
			}
			else {
				System.out.println(""Mannschaft 2 gewinnt!"");
		  }
  }
}",//
Hankewitz,David,david.hankewitz@campus.tu-berlin.de,Beendet,"21. Juni 2021  12:27","27. Juni 2021  21:36","6 Tage 9 Stunden","15,54","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",Object,"Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",extends,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {15. <sub>kannSprechen:} Dropzone 8 -> {16. <sub>boolean} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {7. <sub>fellfarbe:} Dropzone 19 -> {3. <sub>String} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
    public static void main(String[] args){
       // erste Mannschaft
       Fussballspieler[] m = new Fussballspieler[11];

       //zweite Mannschaft
       Fussballspieler[] n = new Fussballspieler[11];
       
      //Werte einfügen
      //erste Mannschaft
        Fussballspieler t = new Torwart(""Kobel"", 29, 20);
        Fussballspieler a1 = new Abwehrspieler(""Morey"", 32, 1);
        Fussballspieler a2 = new Abwehrspieler(""Akanji"", 35, 2);
        Fussballspieler a3 = new Abwehrspieler(""Hummels"", 33, 5);
        Fussballspieler a4 = new Abwehrspieler(""Guerreiro"", 28, 2);
        Fussballspieler m1 = new Mittelfeldspieler(""Bellingham"", 22, 30);
        Fussballspieler m2 = new Mittelfeldspieler(""Reus"", 36, 100);
        Fussballspieler m3 = new Mittelfeldspieler(""Dahoud"", 25, 95);
        Fussballspieler s1 = new Sturmspieler(""Reyna"", 22, 25);
        Fussballspieler s2 = new Sturmspieler(""Haaland"", 23, 80);
        Fussballspieler s3 = new Sturmspieler(""Sancho"", 20, 30);

        m[0] = t;
        m[1] = a1;
        m[2] = a2;
        m[3] = a3;
        m[4] = a4;
        m[5] = m1;
        m[6] = m2;
        m[7] = m3;
        m[8] = s1;
        m[9] = s2;
        m[10] = s3;

        //zweite Mannschaft
        Fussballspieler zt = new Torwart(""Faehrmann"", 29, 20);
        Fussballspieler za1 = new Abwehrspieler(""Becker"", 32, 1);
        Fussballspieler za2 = new Abwehrspieler(""Sane"", 35, 2);
        Fussballspieler za3 = new Abwehrspieler(""Mustafi"", 33, 5);
        Fussballspieler zm1 = new Mittelfeldspieler(""Aydin"", 22, 30);
        Fussballspieler zm2 = new Mittelfeldspieler(""Idrizi"", 36, 100);
        Fussballspieler zm3 = new Mittelfeldspieler(""Flick"", 25, 95);
        Fussballspieler zm4 = new Mittelfeldspieler(""Harit"", 22, 25);
        Fussballspieler zm5 = new Mittelfeldspieler(""Oczipka"", 23, 80);
        Fussballspieler zs1 = new Sturmspieler(""Paciencia"", 20, 30);
        Fussballspieler zs2 = new Sturmspieler(""Hoppe"", 20, 30);

        n[0] = zt;
        n[1] = za1;
        n[2] = za2;
        n[3] = za3;
        n[4] = zm1;
        n[5] = zm2;
        n[6] = zm3;
        n[7] = zm4;
        n[8] = zm5;
        n[9] = zs1;
        n[10] = zs2;

        m[4].geburtstagFeiern();

      System.out.println(""Rote Karten: "" + roteKartenZaehlen(m));
      System.out.println();
      ausgeben(m);
      System.out.println();
      fussballspielen(m,n);
    }

    //es werden immer die Methoden oder Attribute ausgewählt, die am nahesten am Objekttyp sind (tatsächlich) in Kombination mit dem casten
    public static double roteKartenZaehlen(Fussballspieler roteKarten[]){
        double rote = 0;
        for(int i = 0; i < roteKarten.length; i++){
            if(roteKarten[i] instanceof Abwehrspieler){
                rote += ((Abwehrspieler)roteKarten[i]).getAnzahlRoteKarten();
            }
        }
        return rote;
    }

    //überschreiben (overwirte) der Methode toString() aus der Oberklasse Objekt (spezifisch)
    public static void ausgeben(Fussballspieler gibAus[]){
        for(int j = 0; j < gibAus.length; j++){
            System.out.println(gibAus[j].toString());
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
        //Attribute für die erste Mannschaft
      double stearke1 = 0;
      double roteKarten1 = 0;
      double paesse1 = 0;
      double tore1 = 0;
      double gegentore1 = 0;

      //Attribute für die zweite Mannschaft
      double stearke2 = 0;
      double roteKarten2 = 0;
      double paesse2 = 0;
      double tore2 = 0;
      double gegentore2 = 0;

      for(int i = 0; i < mannschaft1.length; i++){
        if (mannschaft1[i] instanceof Abwehrspieler){
            roteKarten1 += ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKarten();
        }
        if (mannschaft1[i] instanceof Mittelfeldspieler){
            paesse1 = ((Mittelfeldspieler)mannschaft1[i]).getPaesse();
        }
        if (mannschaft1[i] instanceof Sturmspieler){
            tore1 = ((Sturmspieler)mannschaft1[i]).getTore();
        }
        if (mannschaft1[i] instanceof Torwart){
            gegentore1 = ((Torwart)mannschaft1[i]).getGegentore();
        }
      }

      for(int i = 0; i < mannschaft2.length; i++){
        if (mannschaft2[i] instanceof Abwehrspieler){
            roteKarten2 += ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKarten();
        }
        if (mannschaft2[i] instanceof Mittelfeldspieler){
            paesse2 = ((Mittelfeldspieler)mannschaft2[i]).getPaesse();
        }
        if (mannschaft2[i] instanceof Sturmspieler){
            tore2 = ((Sturmspieler)mannschaft2[i]).getTore();
        }
        if (mannschaft2[i] instanceof Torwart){
            gegentore2 = ((Torwart)mannschaft2[i]).getGegentore();
        }
      }

      stearke1 = -roteKarten1 + paesse1 + tore1 - gegentore1;
      stearke2 = -roteKarten2 + paesse2 + tore2 - gegentore2;   
      
      if(stearke1 > stearke2)
        System.out.println(""Mannschaft 1 gewinnt!"");
      
      if(stearke1 < stearke2)
        System.out.println(""Mannschaft 2 gewinnt!"");

      if(stearke1 == stearke2)
      System.out.println(""Unentschieden!"");
    }
  }",//
Tanka,Kostantin,kostandin.tanka@campus.tu-berlin.de,Beendet,"21. Juni 2021  13:19","27. Juni 2021  23:51","6 Tage 10 Stunden","9,09","die Klasse Hund erbt von der Klasse Tier","Zeile 1 : Klasse A hat keinen Konstruktor",Object,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Father
__Do you wanna bang heads with me?""_
ausgegeben.","Dies zeigt an, dass der folgende Codeabschnitt superwichtig ist.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {} Dropzone 3 -> {} Dropzone 4 -> {} Dropzone 5 -> {} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {2. <sub>bezeichnung:} Dropzone 8 -> {} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {6. <sub>gewicht:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {} Dropzone 16 -> {} Dropzone 17 -> {} Dropzone 18 -> {} Dropzone 19 -> {} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {}",-,//
Ataev,Batyr,ataev@campus.tu-berlin.de,Beendet,"21. Juni 2021  13:30","27. Juni 2021  23:59","6 Tage 10 Stunden","14,56","Es wird die Methode der Sub-Klasse aufgerufen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","die Klasse Hund erbt von der Klasse Tier",super,Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {
	public static void main(String[] args){
      
     // Arrays definieren
     Fussballspieler[] fc_bayern = {
    		 new Torwart(""Manuel Neuer"", 35, 0.95),
    		 new Abwehrspieler(""Alphonso Davies"", 20, 0.075),
    		 new Abwehrspieler(""Niklas Suele"", 25, 0.135),
    		 new Abwehrspieler(""Lucas Hernandez"", 25, 0.11),
    		 new Abwehrspieler(""Benjamin Pavard"", 25, 0.102),
    		 new Mittelfeldspieler(""Joshua Kimmich"", 26, 78.44),
    		 new Mittelfeldspieler(""Leon Goretzka"", 26, 44.04),
    		 new Mittelfeldspieler(""Serge Gnabry"", 25, 31.63),
    		 new Mittelfeldspieler(""Thomas Mueller"", 31, 47.844),
    		 new Mittelfeldspieler(""Kingsley Coman"", 25, 29.07),
    		 new Sturmspieler(""Robert Lewandowski"", 32, 0.89)
     };
     
     Fussballspieler[] juve = {
    		new Torwart(""Wojciech Szczesny"", 31, 1.24),
    		new Abwehrspieler(""Juan Cuadrado"", 33, 0.153),
    		new Abwehrspieler(""Leonardo Bonucci"", 34, 0.142),
    		new Abwehrspieler(""Matthijs de Ligt"", 21, 0.12),
    		new Abwehrspieler(""Danilo Luiz da Silva"", 29, 0.135),
    		new Mittelfeldspieler(""Weston McKennie"", 22, 27.34),
    		new Mittelfeldspieler(""Arthur"", 24, 32.43),
    		new Mittelfeldspieler(""Rodrigo Bentancur"", 23, 36.231),
    		new Mittelfeldspieler(""Federico Chiesa"", 23, 59.243),
    		new Sturmspieler(""Alvaro Morata"", 28, 0.34),
    		new Sturmspieler(""Cristiano Ronaldo"", 36, 0.73)
     };
     
     juve[5].geburtstagFeiern();
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(fc_bayern));
    System.out.println();
    ausgeben(fc_bayern);
    System.out.println();
    fussballspielen(fc_bayern, juve);
  }

	public static double roteKartenZaehlen(Fussballspieler[] spieler) {

		double count = 0;

		for (int i = 0; i < spieler.length; i++) {
			if (spieler[i] instanceof Abwehrspieler) {
				Abwehrspieler a = (Abwehrspieler) spieler[i];
				count += a.getAnzahlRot();
			}
		}

		return count;

	}

	public static void ausgeben(Fussballspieler[] spieler) {

		for (int i = 0; i < spieler.length; i++) {
			System.out.println(""Der Spieler heisst ""+ spieler[i].getName()+ "" und ist "" 
					+ spieler[i].getAlter() + "" Jahre alt."");
			System.out.println(spieler[i].toString());
		}
	}

	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	  int erg = mannschaft1Staerker(mannschaft1, mannschaft2);
	  
	  switch(erg) {
	  	case 0: 
	  		System.out.println(""Unentschieden!""); 
	  		break;
	  	case 1: 
	  		System.out.println(""Mannschaft1 gewinnt!"");
	  		break;
	  	case -1: 
	  		System.out.println(""Mannschaft2 gewinnt!"");
	  }
  }

	public static int mannschaft1Staerker(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {

		double staerkeTorwart1 = 0;
		double staerkeTorwart2 = 0;
		double staerkeAbwehr1 = 0;
		double staerkeAbwehr2 = 0;
		double staerkeMittelfeld1 = 0;
		double staerkeMittelfeld2 = 0;
		double staerkeSturm1 = 0;
		double staerkeSturm2 = 0;

		int anzahlAbwehr1 = 0;
		int anzahlAbwehr2 = 0;
		int anzahlMittelfeld1 = 0;
		int anzahlMittelfeld2 = 0;
		int anzahlSturm1 = 0;
		int anzahlSturm2 = 0;

		double sumStaerkeMannschaft1 = 0;
		double sumStaerkeMannschaft2 = 0;

		for (int i = 0; i < mannschaft1.length; i++) {
			if (mannschaft1[i] instanceof Torwart) {
				Torwart t1 = (Torwart) mannschaft1[i];
				staerkeTorwart1 = t1.getGegentore();
			}
			if (mannschaft2[i] instanceof Torwart) {
				Torwart t2 = (Torwart) mannschaft2[i];
				staerkeTorwart2 = t2.getGegentore();
			}
			if (mannschaft1[i] instanceof Abwehrspieler) {
				Abwehrspieler t1 = (Abwehrspieler) mannschaft1[i];
				staerkeAbwehr1 += t1.getAnzahlRot();
				anzahlAbwehr1++;
			}
			if (mannschaft2[i] instanceof Abwehrspieler) {
				Abwehrspieler t2 = (Abwehrspieler) mannschaft2[i];
				staerkeAbwehr2 += t2.getAnzahlRot();
				anzahlAbwehr2++;
			}
			if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler t1 = (Mittelfeldspieler) mannschaft1[i];
				staerkeMittelfeld1 += t1.getPaesse();
				anzahlMittelfeld1++;
			}
			if (mannschaft2[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler t2 = (Mittelfeldspieler) mannschaft2[i];
				staerkeMittelfeld2 += t2.getPaesse();
				anzahlMittelfeld2++;
			}
			if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler t1 = (Sturmspieler) mannschaft1[i];
				staerkeSturm1 += t1.getTore();
				anzahlSturm1++;
			}
			if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler t2 = (Sturmspieler) mannschaft2[i];
				staerkeSturm2 += t2.getTore();
				anzahlSturm2++;
			}

			sumStaerkeMannschaft1 = staerkeTorwart1 - staerkeAbwehr1 / anzahlAbwehr1
					+ staerkeMittelfeld1 / (75 * anzahlMittelfeld1) + staerkeSturm1 / anzahlSturm1;
			sumStaerkeMannschaft2 = staerkeTorwart2 - staerkeAbwehr2 / anzahlAbwehr2
					+ staerkeMittelfeld2 / (75 * anzahlMittelfeld2) + staerkeSturm2 / anzahlSturm2;

			if (sumStaerkeMannschaft1 > sumStaerkeMannschaft2)
				return 1;
			else if (sumStaerkeMannschaft2 < sumStaerkeMannschaft2)
				return -1;
		}
		return 0;
	}
}",//
Maas,"Lukas Maximilian",lukas.maas@campus.tu-berlin.de,Beendet,"21. Juni 2021  14:35","27. Juni 2021  23:59","6 Tage 9 Stunden","8,67","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Zeile 6,7 : super(); müsste vor x=0; stehen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",super,Java,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {
    public static void main(String[] args) {

        Torwart Torwart1 = new Torwart(""Neuer"",20, 1.5);
        Torwart Torwart2 = new Torwart(""Lehmann"",21, 1.3);
        Abwehrspieler Abwehr11 = new Abwehrspieler(""Lahm"", 34, 0.5);
        Abwehrspieler Abwehr12 = new Abwehrspieler(""kimmich"", 31, 0.3);
        Abwehrspieler Abwehr13 = new Abwehrspieler(""Peter"", 24, 0.6);
        Abwehrspieler Abwehr14 = new Abwehrspieler(""Johann"", 21, 0.8);
        Abwehrspieler Abwehr21 = new Abwehrspieler(""Lukas"", 18, 1);
        Abwehrspieler Abwehr22 = new Abwehrspieler(""Duy"", 19, 0);
        Abwehrspieler Abwehr23 = new Abwehrspieler(""Ilias"", 20, 0.9);
        Abwehrspieler Abwehr24 = new Abwehrspieler(""Gabriel"", 21, 0.15);
        Mittelfeldspieler Mittel11 = new Mittelfeldspieler(""Alan"", 56, 56.4);
        Mittelfeldspieler Mittel12 = new Mittelfeldspieler(""Emil"", 9, 23.3);
        Mittelfeldspieler Mittel13 = new Mittelfeldspieler(""Paul"", 4, 50.2);
        Mittelfeldspieler Mittel14 = new Mittelfeldspieler(""Dieter"", 45, 99.9);
        Mittelfeldspieler Mittel21 = new Mittelfeldspieler(""Messi"", 23, 54.5);
        Mittelfeldspieler Mittel22 = new Mittelfeldspieler(""Ronaldo"", 41, 41.7);
        Mittelfeldspieler Mittel23 = new Mittelfeldspieler(""Tiger"", 27, 27.1);
        Mittelfeldspieler Mittel24 = new Mittelfeldspieler(""Stephan"", 26, 26.2);
        Sturmspieler Sturm11 = new Sturmspieler(""Juergen"", 66, 1.5);
        Sturmspieler Sturm12 = new Sturmspieler(""Willi"", 69, 3.1);
        Sturmspieler Sturm21 = new Sturmspieler(""Tom"", 6, 2.4);
        Sturmspieler Sturm22 = new Sturmspieler(""Max"", 15, 4.6);
        Torwart1.geburtstagFeiern();
        Fussballspieler[] Mannschaft1 = {Torwart1, Abwehr11, Abwehr12, Abwehr13, Abwehr14, Mittel11, Mittel12, Mittel13, Mittel14, Sturm11, Sturm12};
        Fussballspieler[] Mannschaft2 = {Torwart2, Abwehr21, Abwehr22, Abwehr23, Abwehr24, Mittel21, Mittel22, Mittel23, Mittel24, Sturm21, Sturm22};


        System.out.println(""Rote Karten: "" + roteKartenZaehlen(Mannschaft1));
        System.out.println();
        ausgeben(Mannschaft1);
        System.out.println();
        fussballspielen(Mannschaft1, Mannschaft2);
    }

    public static double roteKartenZaehlen(Fussballspieler[] Team) { 
        double Rotekarten = 0;
        for (Fussballspieler i : Team) {
            if (i instanceof Abwehrspieler) {
                Rotekarten += ((Abwehrspieler) i).getAnzahlRoteKartenJeSpiel();  
            } else ;
        }
        return Rotekarten;
        /* i ist ein Fussballspieler besitz aber nicht die Methode getAnzahlRoteKartenJeSpiel() deshalb 
        wird der Fussbalspieler i in ein Abwehrspieler gecastet.*/
        
    }

    public static void ausgeben(Fussballspieler[] Team) {
        for (Fussballspieler i : Team) {
            System.out.println(i);
        }
    }
    // Polymorphie spielt bei ausgeben keine Rolle.
    

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
        if(roteKartenZaehlen(mannschaft1) < roteKartenZaehlen(mannschaft2)) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        }
        if (roteKartenZaehlen(mannschaft1) > roteKartenZaehlen(mannschaft2)){
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
        else {
            System.out.println(""Unentschieden!"");
        }


    }
}",-
Doan,Anh-Minh,a.doan@campus.tu-berlin.de,Beendet,"21. Juni 2021  15:21","27. Juni 2021  23:59","6 Tage 8 Stunden","10,07","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","die Klasse Hund erbt von der Klasse Tier",super,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,//
Ranneberg,Thea,t.ranneberg@campus.tu-berlin.de,Beendet,"21. Juni 2021  16:03","27. Juni 2021  23:59","6 Tage 7 Stunden","20,00",Object,super,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Kommentar zur Polymorphie: in der ausgeben()-Methode wird ein Array übergeben, welcher wiederrum Unterklassen hat.
// Da alle Objekte der Unterklassen eine toString-Methode haben ist ein cast hier überflüssig.
// Das liegt daran, dass Java objektorientiert arbeitet. Es wird erst zur Laufzeit entschieden, welche Methode aufgerufen wird.
// Dabei wird danach entschieden welche Methode dem Objekt am nächsten ist. In RoteKartenZaehlen() soll nur die Unterklasse Abwehrspieler
// angesprochen werden. Aus diesem Grund ist hier ein Cast zur speziellen Unterklasse notwendig.
//

public class TestMannschaft {
    public static void main(String[] args) {

        Fussballspieler[] m1 = {
                new Torwart(""Manuel Neuer"", 35, 0),
                new Abwehrspieler(""Mats Hummels"", 32, 3),
                new Abwehrspieler(""M.Ginter"", 27, 2),
                new Abwehrspieler(""A. Ruedeiger"", 28, 4),
                new Sturmspieler(""Serge Gnabry"", 24, 2),
                new Sturmspieler(""Thomas Müller"", 31, 4),
                new Abwehrspieler(""R. Gosens"", 26, 1),
                new Abwehrspieler(""Joshua Kimmich"", 26, 0),
                new Mittelfeldspieler(""I. Gündogan"", 30, 20),
                new Mittelfeldspieler(""Toni Kroos"", 31, 30),
                new Mittelfeldspieler(""Kai Havertz"", 22, 30),
        };

        Fussballspieler[] m2 = {
                new Torwart(""Manuel Neuer"", 35, 0),
                new Abwehrspieler(""Mats Hummels"", 32, 3),
                new Abwehrspieler(""M. Ginter"", 27, 2),
                new Abwehrspieler(""A. Ruedeiger"", 28, 4),
                new Sturmspieler(""Serge Gnabry"", 24, 2),
                new Sturmspieler(""Thomas Mueller"", 31, 2),
                new Abwehrspieler(""R. Gosens"", 26, 1),
                new Abwehrspieler(""Joshua Kimmich"", 26, 0),
                new Mittelfeldspieler(""I. Guendogan"", 30, 20),
                new Mittelfeldspieler(""Toni Kroos"", 31, 30),
                new Mittelfeldspieler(""Kai Havertz"", 22, 30),
        };

        m1[3].geburtstagFeiern();
        System.out.println(""Rote Karten: "" + roteKartenZaehlen(m1));
        System.out.println();
        ausgeben(m1);
        System.out.println();
        fussballspielen(m1,m2);

    }

        public static double roteKartenZaehlen(Fussballspieler[]a){
            double anzGesRoteKarten = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Abwehrspieler)
                    anzGesRoteKarten += ((Abwehrspieler) a[i]).getAnzahlRoteKartenJeSpiel();
            }
            return anzGesRoteKarten;
        }

        public static double countPaesse(Fussballspieler[]a){
            double anzPaesse = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Mittelfeldspieler)
                    anzPaesse += ((Mittelfeldspieler) a[i]).getPaesseJeSpiel();
            }
            return anzPaesse;
        }

        public static double countTore(Fussballspieler[]a){
            double anzTore = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Sturmspieler)
                    anzTore += ((Sturmspieler) a[i]).getToreJeSpiel();
            }
            return anzTore;
        }

        public static double countGegentore(Fussballspieler[]a){
            double anzGegentore = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Torwart)
                    anzGegentore += ((Torwart) a[i]).getGegentoreJeSpiel();
            }
            return anzGegentore;
        }

        public static void ausgeben(Fussballspieler[]o){
            for (int i = 0; i < o.length; i++) {
                System.out.println(o[i].toString());
            }
        }

        public static void fussballspielen (Fussballspieler[]mannschaft1, Fussballspieler[]mannschaft2){
        double ergebnis1 = countTore(mannschaft1)*1000+countPaesse(mannschaft1)-countGegentore(mannschaft1)*1000-roteKartenZaehlen(mannschaft1)*10;
        double ergebnis2 = countTore(mannschaft2)*1000+countPaesse(mannschaft2)-countGegentore(mannschaft2)*1000-roteKartenZaehlen(mannschaft2)*10;
        if (ergebnis1 == ergebnis2) {
            System.out.println(""Unentschieden!"");
        }
            else {
                if (ergebnis1 < ergebnis2) {
                    System.out.println(""Mannschaft 2 gewinnt!"");
                }
                else {
                    System.out.println(""Mannschaft 1 gewinnt!"");
                }
        }
    }
}",//
Aymergen,Berke,berke.aymergen@campus.tu-berlin.de,Beendet,"21. Juni 2021  21:11","22. Juni 2021  12:15","15 Stunden 3 Minuten","19,36","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen",super,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
    public static void main(String[] args){
        
      Fussballspieler[] deutschland = new Fussballspieler[11];
      Fussballspieler[] spanien = new Fussballspieler[11];
       
       
      deutschland[0] = new Sturmspieler(""Peter Hans"",51,10);
      deutschland[1] = new Sturmspieler(""Hans Peter"",49,11);
      deutschland[2] = new Mittelfeldspieler(""Jonny Hans"",52,3);
      deutschland[3] = new Mittelfeldspieler(""Peter Kanns"",49,5);
      deutschland[4] = new Mittelfeldspieler(""Peter Hans"",51,6);
      deutschland[5] = new Mittelfeldspieler(""Hans Peter"",49,10);
      deutschland[6] = new Abwehrspieler(""Peter Altmeier"",90,5);
      deutschland[7] = new Abwehrspieler(""Alexander Gauland"",78,2);
      deutschland[8] = new Abwehrspieler(""Peter Hans"",51,1);
      deutschland[9] = new Abwehrspieler(""Hans Peter"",49,1);
      deutschland[10] = new Torwart(""Angela Merkel"", 80,1);
      
      deutschland[6].geburtstagFeiern();

      spanien[0] = new Sturmspieler(""Petero Hanso"",51,20);
      spanien[1] = new Sturmspieler(""Hanso Petero"",49,1);
      spanien[2] = new Mittelfeldspieler(""Jonnyo Hanso"",52,2);
      spanien[3] = new Mittelfeldspieler(""Petero Kannso"",49,4);
      spanien[4] = new Mittelfeldspieler(""Petero Hanso"",51,3);
      spanien[5] = new Mittelfeldspieler(""Hanso Petero"",49,2);
      spanien[6] = new Abwehrspieler(""Petero Altmeiero"",90,5);
      spanien[7] = new Abwehrspieler(""Alexandero Gauland"",78,1);
      spanien[8] = new Abwehrspieler(""Petero Hanso"",51,0);
      spanien[9] = new Abwehrspieler(""Hanso Petero"",49,1);
      spanien[10] = new Torwart(""Angelo Merkelo"", 80,0);
      
      spanien[6].geburtstagFeiern();
  
      System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
      System.out.println();
      ausgeben(deutschland);
      System.out.println();
      fussballspielen(deutschland, spanien);
    }
  
    public static double roteKartenZaehlen(Fussballspieler[] team){ //Es kann nur durch casten auf die Methode der Abwehrspieler Klasse zugegriffen werden.
      double anzahlKarten = 0;
      for (int i = 0; i < team.length; i++){
          if (team[i] instanceof Abwehrspieler){
            anzahlKarten += ((Abwehrspieler)team[i]).getAnzahlRoteKartenJeSpiel();
          }
      }
      return anzahlKarten;
    }
    public static void ausgeben(Fussballspieler[] team){ //Es wird die ueberschriebene Methode der Subklasse aufgerufen.
        for (int i = 0; i < team.length; i++){
            System.out.println(team[i].toString());
        }
    }
    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
        int staerke1 = 0;
        int staerke2 = 0;
        double tore1 = 0;
        double rot1 = 0;
        double paesse1 = 0;
        double gegentore1 = 0;
        for (int i = 0; i < mannschaft1.length; i++){
            if (mannschaft1[i] instanceof Sturmspieler){
                tore1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
            }
            else if (mannschaft1[i] instanceof Mittelfeldspieler){
                paesse1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
            }
            else if (mannschaft1[i] instanceof Abwehrspieler){
                rot1 += ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
            }
            else if (mannschaft1[i] instanceof Torwart){
                gegentore1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
            }
        }
        double tore2 = 0;
        double rot2 = 0;
        double paesse2 = 0;
        double gegentore2 = 0;
        for (int i = 0; i < mannschaft2.length; i++){
            if (mannschaft2[i] instanceof Sturmspieler){
                tore2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
            }
            else if (mannschaft2[i] instanceof Mittelfeldspieler){
                paesse2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
            }
            else if (mannschaft2[i] instanceof Abwehrspieler){
                rot2 += ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
            }
            else if (mannschaft2[i] instanceof Torwart){
                gegentore2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
            }
        }

        if (tore1 < tore2){staerke2++;}
        else if (tore1 > tore2) {staerke1++;}
        if (rot1 < rot2){staerke1++;}
        else if (rot1 > rot2) {staerke2++;}
        if (paesse1 < paesse2){staerke2++;}
        else if (paesse1 > paesse2){staerke1++;}
        if (gegentore1 < gegentore2){staerke1++;}
        else if (gegentore1 > gegentore2) {staerke2++;}
        if (staerke1 < staerke2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
        else if (staerke1 > staerke2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        }
        else System.out.println(""Unentschieden!"");
    }
  }",//
Lee,"Woo Jin",lee.16@campus.tu-berlin.de,Beendet,"21. Juni 2021  21:20","27. Juni 2021  23:59","6 Tage 2 Stunden","10,82","Es wird die Methode der Sub-Klasse aufgerufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Class,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.",extends,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {13. <sub>spannweite:} Dropzone 8 -> {4. <sub>double} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {
    public static void main (String[] args) {
        Fussballspieler[] team1 = {
                new Torwart (""Neuer"", 30, 3.5),
                new Abwehrspieler (""Hummels"", 27, 4.5),
                new Abwehrspieler (""Boateng"", 26, 3.8),
                new Abwehrspieler (""Kimmich"", 22, 2.7),
                new Abwehrspieler (""Hector"", 24, 5.7),
                new Mittelfeldspieler (""Kross"", 33, 6.5),
                new Mittelfeldspieler (""Khedira"", 21, 7.3),
                new Mittelfeldspieler (""Mueller"", 32, 4.6),
                new Mittelfeldspieler (""Oezil"", 45, 3.5),
                new Mittelfeldspieler (""Reus"", 34, 3.6),
                new Sturmspieler (""Werner"", 32, 3.9)
        };

        Fussballspieler[] team2 = {
                new Torwart (""Lloris"", 26, 6.4),
                new Abwehrspieler (""Laporte"", 32, 5.7),
                new Abwehrspieler (""Varane"", 35, 3.1),
                new Mittelfeldspieler (""Kante"", 24, 7.2),
                new Mittelfeldspieler (""Sidibe"", 26, 3.2),
                new Mittelfeldspieler (""Digne"", 28, 7.3),
                new Mittelfeldspieler (""Rabiot"", 35, 8.4),
                new Mittelfeldspieler (""Pogba"", 22, 17.2),
                new Sturmspieler (""Mbappe"", 20, 20.1),
                new Sturmspieler (""Lacazette"", 31, 7.3),
                new Sturmspieler (""Griezmann"", 21, 5.3)
        };

        team1[1].geburtstagFeiern();
        team2[1].geburtstagFeiern();

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(team1));
        System.out.println();
        ausgeben(team2);
        System.out.println();
        fussballspielen(team1, team2);

    }

    public static double roteKartenZaehlen(Fussballspieler[] f){
        double rotekartenzaehlen = 0;

        for(int i = 0; i < f.length; i++) {
            if(f[i] instanceof Abwehrspieler) {
                rotekartenzaehlen += ((Abwehrspieler) f[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return rotekartenzaehlen;
    }

    public static void ausgeben(Fussballspieler[] f){
        for(int i = 0; i < f.length; i++) {
            System.out.println(f[i].toString());
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){

        double g1 = 0;
        double g2 = 0;


        for(int i=0; i<mannschaft1.length; i++) {

            if(mannschaft1[i] instanceof Torwart) {
                g1 -= ((Torwart) mannschaft1[i]).getGegentoreJeSpiel();
            }
            else if (mannschaft1[i] instanceof Abwehrspieler) {
                g1 -= ((Abwehrspieler) mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
            }
            else if (mannschaft1[i] instanceof Mittelfeldspieler) {
                g1 += ((Mittelfeldspieler) mannschaft1[i]).getPaesseJeSpiel();
            }
            else if (mannschaft1[i] instanceof Sturmspieler) {
                g1 += ((Sturmspieler) mannschaft1[i]).getToreJeSpiel();
            }
        }

        for(int l=0; l<mannschaft1.length; l++) {
            if(mannschaft2[l] instanceof Torwart) {
                g2 -= ((Torwart) mannschaft2[l]).getGegentoreJeSpiel();
            }
            else if (mannschaft2[l] instanceof Abwehrspieler) {
                g2 -= ((Abwehrspieler) mannschaft2[l]).getAnzahlRoteKartenJeSpiel();
            }
            else if (mannschaft2[l] instanceof Mittelfeldspieler) {
                g2 += ((Mittelfeldspieler) mannschaft2[l]).getPaesseJeSpiel();
            }
            else if (mannschaft2[l] instanceof Sturmspieler) {
                g2 += ((Sturmspieler) mannschaft2[l]).getToreJeSpiel();
            }
        }

        if (g1 > g2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (g1 == g2) {
            System.out.println(""Unentschieden!"");
        } else if (g1 < g2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        }

    }

}",-
Dewitz,"Klemens Julian",k.dewitz@campus.tu-berlin.de,Beendet,"22. Juni 2021  12:27","26. Juni 2021  22:44","4 Tage 10 Stunden","12,50","die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen",extends,"Zeile 6,7 : super(); müsste vor x=0; stehen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
	Torwart Navas=new Torwart (""Navas"",34,5.8);
	Abwehrspieler Florenzi=new Abwehrspieler (""Florenzi"",30,0.001);
	Abwehrspieler Marquinhos=new Abwehrspieler(""Marquinhos"",27,1);
	Abwehrspieler Kimpembe=new Abwehrspieler(""Kimpembe"",25,0.4);
	Abwehrspieler Bernat=new Abwehrspieler(""BernatIstSchuld"",28,0.1);
	Mittelfeldspieler Paredes=new Mittelfeldspieler(""Paredes"",28,60);
	Mittelfeldspieler Gueye=new Mittelfeldspieler(""Gueye"",31,47);
   	Mittelfeldspieler Verratti=new Mittelfeldspieler(""Ratte aka Verratti"",28,-6);
	Mittelfeldspieler Neymar=new Mittelfeldspieler (""Teamspiel? aka Neymar"",29,0);
	Mittelfeldspieler diMaria=new Mittelfeldspieler(""Fledermausohrenmann aka die Maria"",33,2);
	Sturmspieler Mbappe=new Sturmspieler (""Mbappe"",22,0.86);
	 
    Fussballspieler[] P$G={Navas,Florenzi,Marquinhos,Kimpembe,Bernat,Paredes,Gueye,Verratti,Neymar,diMaria,Mbappe};
	
	
    Torwart terStegen=new Torwart (""MAtS"",29,0);
	Abwehrspieler Pique=new Abwehrspieler(""30-Pace-Mann aka Pique"",50,0.8);
	Abwehrspieler Dest=new Abwehrspieler(""Dest"",20,0);
	Abwehrspieler Lenglet=new Abwehrspieler(""Lenglet"",26,1);
	Abwehrspieler Alba=new Abwehrspieler(""Alba"",32,0.001);
	Mittelfeldspieler Busquets=new Mittelfeldspieler(""Busquets"",32,96);
	Mittelfeldspieler deJong=new Mittelfeldspieler(""de Jong"",24,78);
	Mittelfeldspieler Griezmann=new Mittelfeldspieler(""Griezmaennchen"",30,48);
	Sturmspieler Messi=new Sturmspieler (""Messi, zu krank der Typ"",33,1.8);
	Sturmspieler Dembele=new Sturmspieler(""verletzter Dembele"",24,0.1);
	Sturmspieler Fati=new Sturmspieler(""Ansu Fati"",18,0.37);
	
	Messi.geburtstagFeiern();
	
	Fussballspieler[] Barca={terStegen,Pique,Dest,Lenglet,Alba,Busquets,deJong,Griezmann,Messi,Dembele,Fati};
	
	//Werte einfügen

	System.out.println(""Rote Karten: "" + roteKartenZaehlen(P$G));
    //System.out.println();
    ausgeben(Barca);
    //System.out.println();
    fussballspielen(P$G,Barca);

  }

  public static double roteKartenZaehlen(Fussballspieler team[]){
		double roteKarten=0;
		Abwehrspieler anzahlRoteKarten;
		for(int j=0;j<team.length;j++) {
			if(team[j] instanceof Abwehrspieler) {
				anzahlRoteKarten=(Abwehrspieler)team[j];
				roteKarten=roteKarten+anzahlRoteKarten.getAnzahlRoteKartenJeSpiel();
			}
		}
		return roteKarten;
	}
   /* bitte implementieren */
   public static void ausgeben(Fussballspieler team[]){
		Torwart anzahlTorhueter;
		Abwehrspieler anzahlVerteidiger;
		Mittelfeldspieler anzahlMittelfeldspieler;
		Sturmspieler anzahlSturmspieler;
		for(int j=0;j<team.length;j++) {
			if(team[j] instanceof Torwart) {
				anzahlTorhueter=(Torwart)team[j];
				System.out.println(anzahlTorhueter.toString());
			}
			else if(team[j] instanceof Abwehrspieler) {
				anzahlVerteidiger=(Abwehrspieler)team[j];
				System.out.println(anzahlVerteidiger.toString());
			}
			else if(team[j] instanceof Mittelfeldspieler) {
				anzahlMittelfeldspieler=(Mittelfeldspieler)team[j];
				System.out.println(anzahlMittelfeldspieler.toString());
			}
			else if(team[j] instanceof Sturmspieler) {
				anzahlSturmspieler=(Sturmspieler)team[j];
				System.out.println(anzahlSturmspieler.toString());
			}
		}
   /* bitte implementieren */
   }
   public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double anzahlRoteKarten1=roteKartenZaehlen(mannschaft1);
		double anzahlRoteKarten2=roteKartenZaehlen(mannschaft2);
		double anzahlTore1=ToreZaehlen(mannschaft1);
		double anzahlTore2=ToreZaehlen(mannschaft2);
		double anzahlGegentore1=GegentoreZaehlen(mannschaft1);
		double anzahlGegentore2=GegentoreZaehlen(mannschaft2);
		double anzahlPaesse1=PaesseZaehlen(mannschaft1);
		double anzahlPaesse2=PaesseZaehlen(mannschaft2);
		double Spielstärke1=anzahlTore1-anzahlGegentore1-anzahlRoteKarten1*0.3+anzahlPaesse1*0.01;
		double Spielstärke2=anzahlTore2-anzahlGegentore2-anzahlRoteKarten2*0.3+anzahlPaesse2*0.01;
		if (Spielstärke1>Spielstärke2){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		else if (Spielstärke1==Spielstärke2){
			System.out.println(""Unentschieden!"");
		}
		else if (Spielstärke1<Spielstärke2){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		
   /* bitte implementieren */
   }
   public static double ToreZaehlen(Fussballspieler team[]){
		double Tore=0;
		Sturmspieler anzahlTore;
		for(int j=0;j<team.length;j++) {
			if(team[j] instanceof Sturmspieler) {
				anzahlTore=(Sturmspieler)team[j];
				Tore=Tore+anzahlTore.getToreJeSpiel();
			}
		}
		return Tore;
	}
	public static double PaesseZaehlen(Fussballspieler team[]){
		double Paesse=0;
		Mittelfeldspieler anzahlPaesse;
		for(int j=0;j<team.length;j++) {
			if(team[j] instanceof Mittelfeldspieler) {
				anzahlPaesse=(Mittelfeldspieler)team[j];
				Paesse=Paesse+anzahlPaesse.getPaesseJeSpiel();
			}
		}
		return Paesse;
	}
	public static double GegentoreZaehlen(Fussballspieler team[]){
		double Gegentore=0;
		Torwart anzahlGegentore;
		for(int j=0;j<team.length;j++) {
			if(team[j] instanceof Torwart) {
				anzahlGegentore=(Torwart)team[j];
				Gegentore=Gegentore+anzahlGegentore.getGegentoreJeSpiel();
			}
		}
		return Gegentore;
	}
}
//Polymorphie beschreibt die Struktur, dass beim Zugriff auf Methoden mit gleicher Signatur unterschiedliche Ergebnisse ausgegeben werden.
//In den entsprechenden Methoden werden bspw. ""Abwehrspieler"" übergeben und aufgrund der unterschiedlichen Einträge des Arrays werden unterschiedliche Ergebnisse zurückgegeben.",-
König,Timon,timon.koenig@campus.tu-berlin.de,Beendet,"22. Juni 2021  17:04","27. Juni 2021  23:59","5 Tage 6 Stunden","18,36","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",Java,"Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
	 
    // Arrays definieren
    Fussballspieler[] mannschaft1 = new Fussballspieler[11];
	Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	  
    //Werte einfügen
	mannschaft1[0] = new Torwart(""Peter"", 23, 4.1);
	mannschaft1[1] = new Abwehrspieler(""Ines"", 29, 0.02);
	mannschaft1[2] = new Abwehrspieler(""Hans"", 21, 0.01);
	mannschaft1[3] = new Abwehrspieler(""Hansi"", 19, 0.04);
	mannschaft1[4] = new Mittelfeldspieler(""Till"", 27, 78);
	mannschaft1[5] = new Mittelfeldspieler(""Theodor"", 38, 24);
	mannschaft1[6] = new Mittelfeldspieler(""Sonni"", 25, 57);
	mannschaft1[7] = new Mittelfeldspieler(""Leon"", 18, 19);
	mannschaft1[8] = new Sturmspieler(""Lala"", 25, 1);
	mannschaft1[9] = new Sturmspieler(""Benjamin"", 21, 1);
	mannschaft1[10] = new Sturmspieler(""Pumbaa"", 25, 0);
	
	mannschaft2[0] = new Torwart(""Lisa-Marie"", 19, 1);
	mannschaft2[1] = new Abwehrspieler(""Kaja"", 24, 0.0);
	mannschaft2[2] = new Abwehrspieler(""Ushi"", 73, 2.0);
	mannschaft2[3] = new Abwehrspieler(""Leo"", 19, 6.0);
	mannschaft2[4] = new Mittelfeldspieler(""Tik"", 22, 12);
	mannschaft2[5] = new Mittelfeldspieler(""Tak"", 23, 12);
	mannschaft2[6] = new Mittelfeldspieler(""Tok"", 24, 24);
	mannschaft2[7] = new Mittelfeldspieler(""Trick"", 22, 24);
	mannschaft2[8] = new Mittelfeldspieler(""Lutzifer"", 17, 55);
	mannschaft2[9] = new Sturmspieler(""Anna-Lena"", 17, 0);
	mannschaft2[10] = new Sturmspieler(""Bettina"", 19, 4);
	
	// Geburtstag feiern
	mannschaft2[5].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
    System.out.println();
    ausgeben(mannschaft1);
    System.out.println();
    fussballspielen(mannschaft1, mannschaft2);
	
  }
	//da wir vorher überprüfen, ob der Spieler ein Abwehrspieler ist,
	//können wir die entsprechende Methode für den Abwehrspieler aufrufen.
  public static double roteKartenZaehlen(Fussballspieler[] spieler){
    double roteKarten = 0.0;
	for(int i=0; i<spieler.length; i++){
		if(spieler[i] instanceof Abwehrspieler) {
			roteKarten += ((Abwehrspieler) spieler[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
  }
	//Dort wird die entsprechende Methode (toString) automatisch
	//aufgerufen, auch als Polymorphie bezeichnet.
  public static void ausgeben(Fussballspieler[] spieler){
	for(int i=0; i<spieler.length; i++){
		System.out.print(spieler[i]);
	}
  }
  public static int tore(Fussballspieler[] mannschaft) {
	int tore = 0;
	for(int i=0; i<mannschaft.length; i++){
		if(mannschaft[i] instanceof Sturmspieler) { 
			tore += ((Sturmspieler)mannschaft[i]).getToreJeSpiel();
		}
	}
	return tore;
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int tore1 = tore(mannschaft1);
	int tore2 = tore(mannschaft2);
	if(tore1>tore2) {
		System.out.println(""Mannschaft 1 gewinnt!"");
	} else if (tore1<tore2) {
		System.out.println(""Mannschaft 2 gewinnt!"");
	} else {
		System.out.println(""Unentschieden!"");
	}
  }
}",//
"Saa Hinojosa","Paola Carolina",p.saahinojosa@campus.tu-berlin.de,Beendet,"22. Juni 2021  22:07","27. Juni 2021  23:59","5 Tage 1 Stunde","4,36",Java,"die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Superklasse den Konstruktor einer Subklasse auf.",super,"Zeile 7 : super(); müsste this(); heißen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(......);
    System.out.println();
    fussballspielen(................);
  }

  public static double roteKartenZaehlen(.................){
    
   /* bitte implementieren */
  }
  public static void ausgeben(...){
    
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  }
}",-
Bormann,Lisa,lisa.bormann@campus.tu-berlin.de,Beendet,"23. Juni 2021  13:03","27. Juni 2021  23:59","4 Tage 10 Stunden","11,80",super,"Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,//
Reinartz,"Karl Levin",reinartz@campus.tu-berlin.de,Beendet,"23. Juni 2021  13:10","27. Juni 2021  23:59","4 Tage 10 Stunden","12,15",Object,"die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
    Fussballspieler[] deutschland = {
		new Torwart(""Steffen"",25,3.7),
		new Abwehrspieler(""Mubandi"",26,0.5),
		new Abwehrspieler(""Lucas"",27,0.3),
		new Abwehrspieler(""Manfrod"",28,0.6),
		new Mittelfeldspieler(""Eberhard"",29,20.7),
		new Mittelfeldspieler(""Jony"",24,18.9),
		new Mittelfeldspieler(""Lennerd"",36,5.9),
		new Mittelfeldspieler(""Johanes"",67,10.7),
		new Sturmspieler(""Duy"",12,2.1),
		new Sturmspieler(""Sinthu"",34,1.1),
		new Sturmspieler(""Alman"",89,5.8),
	};
    Fussballspieler[] brasilien = new Fussballspieler[11];
    brasilien[0] = new Torwart(""Jesus"",29,2.3);
	brasilien[1] = new Abwehrspieler(""Herbert"",26,0.9);
	brasilien[2] = new Abwehrspieler(""Tedi"",25,0.1);
	brasilien[3] = new Abwehrspieler(""Marshel"",24,0.0);
	brasilien[4] = new Mittelfeldspieler(""Barny"",23,13.6);
	brasilien[5] = new Mittelfeldspieler(""Yugi"",22,15.5);
	brasilien[6] = new Mittelfeldspieler(""Deku"",32,20.8);
	brasilien[7] = new Mittelfeldspieler(""Senvon"",65,6.2);
	brasilien[8] = new Sturmspieler(""Karlos"",21,7.0);
	brasilien[9] = new Sturmspieler(""Tobi"",73,3.2);
	brasilien[10] = new Sturmspieler(""Bruno"",59,1.8);
	
	deutschland[9].geburtstagFeiern();
    
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, brasilien);
	}
		/*Sie ruft die Richtigen Wert auf da ich vorher erstmal mit einem if  konstrukt chekce ob es sich um einen Abweherspieler
		handelt und ihn dann noch noch mal bei der abfrage als Abwehrspieler deklariere. Würde ich das nicht machen könnte es dazu
		das spieler die auch keine Abweherspieler sind nach de methode ""getanzahlRoteKartenJeSpiel"" gefragtbwerden obwohl sie diese
		Methode garnicht haben.*/
	public static double roteKartenZaehlen(Fussballspieler[] Team ){
		double anzahl = 0;
		for(int i=0; i < Team.length; i++){
			if (Team[i] instanceof Abwehrspieler){
				Abwehrspieler a = (Abwehrspieler)Team[i];
				anzahl += a.getanzahlRoteKartenJeSpiel();
			}
		}
		return anzahl;
	}
	
		/*Hier ist die Polymorphie in sovern wichtig als das in der Sub- wie auch der Supperklasse eine Methode mit dem 
		gleichen Namen steht nund man darauf achten muss welche von beiden man abruft*/
	public static void ausgeben(Fussballspieler[] Team){
		for(int i=0; i<Team.length; i++){
			System.out.println(Team[i].toString());
		}
	
	}
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double Siegespunkte1 = 0;
		double Siegespunkte2 = 0;
		//Manschaft 1
		for(int i = 0; i < mannschaft1.length; i++){
			if(mannschaft1[i] instanceof Torwart){
				Torwart t = (Torwart)mannschaft1[i];
				Siegespunkte1 += t.getGegentoreJeSpiel();
			}
			if(mannschaft1[i] instanceof Abwehrspieler){
				Abwehrspieler a = (Abwehrspieler)mannschaft1[i];
				Siegespunkte1 -= a.getanzahlRoteKartenJeSpiel()*4;
			}
			if(mannschaft1[i] instanceof Mittelfeldspieler){
				Mittelfeldspieler m = (Mittelfeldspieler)mannschaft1[i];
				Siegespunkte1 += m.getPaesseJeSpiel()/3;
			}
			if(mannschaft1[i] instanceof Sturmspieler){
				Sturmspieler s = (Sturmspieler)mannschaft1[i];
				Siegespunkte1 += s.getToreJeSpiel();
			}
		}
		for(int i = 0; i < mannschaft2.length; i++){
			if(mannschaft2[i] instanceof Torwart){
				Torwart t = (Torwart)mannschaft2[i];
				Siegespunkte2 += t.getGegentoreJeSpiel();
			}
			if(mannschaft2[i] instanceof Abwehrspieler){
				Abwehrspieler a = (Abwehrspieler)mannschaft2[i];
				Siegespunkte2 -= a.getanzahlRoteKartenJeSpiel()*4;
			}
			if(mannschaft2[i] instanceof Mittelfeldspieler){
				Mittelfeldspieler m = (Mittelfeldspieler)mannschaft2[i];
				Siegespunkte2 += m.getPaesseJeSpiel()/3;
			}
			if(mannschaft2[i] instanceof Sturmspieler){
				Sturmspieler s = (Sturmspieler)mannschaft2[i];
				Siegespunkte2 += s.getToreJeSpiel();
			}
		}
		if(Siegespunkte1>Siegespunkte2)
			System.out.println(""Mannschaft 1 gewinnt!"");
		if(Siegespunkte1==Siegespunkte2)
			System.out.println(""Unentschieden!"");
		if(Siegespunkte1<Siegespunkte2)
			System.out.println(""Mannschaft 2 gewinnt!"");
	}
}",-
Schnabel,Josefina,josefina.schnabel@campus.tu-berlin.de,Beendet,"23. Juni 2021  13:47","26. Juni 2021  22:03","3 Tage 8 Stunden","19,23","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Father
__Do you wanna bang heads with me?""_
ausgegeben.","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {

    public static void main(String[] args) {
        Fussballspieler[] deutschland = new Fussballspieler[11];
        for (int i = 0; i < deutschland.length; i++) {
            if (i == 0) {
                deutschland[i] = new Torwart(""Hans"", 42, 0);
            } else if (i == 1 || i == 4 || i == 7) {
                deutschland[i] = new Abwehrspieler(""Peter"", 20, 4);
            } else if (i == 2 || i == 5 || i == 6) {
                deutschland[i] = new Mittelfeldspieler(""Tom"", 22, 17);
            } else {
                deutschland[i] = new Sturmspieler(""Burkan"", 25, 3);
            }
        }

        Fussballspieler[] fr = new Fussballspieler[11];
        for (int i = 0; i < deutschland.length; i++) {
            if (i == 0) {
                fr[i] = new Torwart(""Adrien"", 23, 0);
            } else if (i == 1 || i == 4 || i == 7) {
                fr[i] = new Abwehrspieler(""Lejeune"", 19, 8);
            } else if (i == 2 || i == 5 || i == 6) {
                fr[i] = new Mittelfeldspieler(""Nino"", 30, 17);
            } else {
                fr[i] = new Sturmspieler(""Maurice"", 28, 3);
            }
        }

        fr[3].geburtstagFeiern();

        System.out.println(""Rote Karten (de): "" + roteKartenZaehlen(deutschland));
        System.out.println();
        ausgeben(deutschland);
        System.out.println();
        fussballspielen(deutschland, fr);
    }

    public static double roteKartenZaehlen(Fussballspieler[] mannschaft) {      // Abwehrspieler
        double sum = 0;
        for(int i = 0; i < mannschaft.length; i++) {
            if(mannschaft[i] instanceof Abwehrspieler) {
                sum += ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return sum;
        /*
            ""instanceof"" ermittelt den wahren Typ des Objekts (also die Unterklasse Abwehrspieler)
         */
    }

    public static void ausgeben(Fussballspieler[] mannschaft) {
        for(int i = 0; i < mannschaft.length; i++) {
            System.out.println(mannschaft[i].toString());
        }
        /*
            Da die toString-Methode aus der Oberklasse von den Unterklassen jeweils überschrieben wurde,
            wird die am nächsten am tatsächlichen Objekt liegende toString-Methode ausgegeben.
         */
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
        double x1 = 0;
        double x2 = 0;

        for(Fussballspieler f : mannschaft1) {
            if(f instanceof Torwart) {
                x1 += -2.5*((Torwart) f).getGegentoreJeSpiel();
            }
            else if(f instanceof Abwehrspieler) {
                x1 += -4*((Abwehrspieler) f).getAnzahlRoteKartenJeSpiel();
            }
            else if(f instanceof Mittelfeldspieler) {
                x1 += 2*(((Mittelfeldspieler) f).getPaesseJeSpiel());
            }
            else {
                x1 += 3*(((Sturmspieler) f).getToreJeSpiel());
            }
        }
        for(Fussballspieler f : mannschaft2) {
            if(f instanceof Torwart) {
                x2 += -2.5*((Torwart) f).getGegentoreJeSpiel();
            }
            else if(f instanceof Abwehrspieler) {
                x2 += -4*((Abwehrspieler) f).getAnzahlRoteKartenJeSpiel();
            }
            else if(f instanceof Mittelfeldspieler) {
                x2 += 2*(((Mittelfeldspieler) f).getPaesseJeSpiel());
            }
            else {
                x2 += 3*(((Sturmspieler) f).getToreJeSpiel());
            }
        }

        if(x1 > x2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if(x1 == x2) {
            System.out.println(""Unentschieden!"");
        } else {
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
    }

}",//
Bartsch,"Simon Tobias",s.bartsch@campus.tu-berlin.de,Beendet,"23. Juni 2021  14:03","27. Juni 2021  21:33","4 Tage 7 Stunden","7,73","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen","Es wird die Methode der Sub-Klasse aufgerufen",extends,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{

	public static void main(String[] args){
	// Arrays definieren     
	 Fussballspieler[] mannschaft1 = new Fussballspieler[11];
	 Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	
     
    //Werte einfügen

	mannschaft1[0] = new Torwart(""Neuer"", 33, 0.3);
	mannschaft1[1] = new Abwehrspieler(""Kimmich"", 25, 0.1);
	mannschaft1[2] = new Abwehrspieler(""Hummels"", 30, 0.3);
	mannschaft1[3] = new Abwehrspieler(""Stark"", 26, 0.2);
	mannschaft1[4] = new Abwehrspieler(""Mustafi"", 33, 0.4);
	mannschaft1[5] = new Mittelfeldspieler(""Schweinsteiger"", 35, 111.2);
	mannschaft1[6] = new Mittelfeldspieler(""Kroos"", 28, 101.9);
	mannschaft1[7] = new Mittelfeldspieler(""Khedira"", 35, 30.4);
	mannschaft1[8] = new Mittelfeldspieler(""Schneider"", 55, 6.5);
	mannschaft1[9] = new Sturmspieler(""Zies"", 40, 10.2);
	mannschaft1[10] = new Sturmspieler(""Gomez"", 37, 0.1);
	
	mannschaft2[0] = new Torwart(""Jarstein"", 33, 1.3);
	mannschaft2[1] = new Abwehrspieler(""Pekarik"", 35, 0.5);
	mannschaft2[2] = new Abwehrspieler(""Boyata"", 30, 0.3);
	mannschaft2[3] = new Abwehrspieler(""Dardai"", 19, 0.1);
	mannschaft2[4] = new Abwehrspieler(""Plattenhardt"", 29, 0.7);
	mannschaft2[5] = new Mittelfeldspieler(""Boateng"", 34, 49.8);
	mannschaft2[6] = new Mittelfeldspieler(""Darida"", 29, 151.9);
	mannschaft2[7] = new Mittelfeldspieler(""Cunha"", 24, 45.6);
	mannschaft2[8] = new Mittelfeldspieler(""Drosten"", 18, 199.9);
	mannschaft2[9] = new Sturmspieler(""Piatek"", 27, 0.1);
	mannschaft2[10] = new Sturmspieler(""Selke"", 28, 2.4);
	
	mannschaft2[10].geburtstagFeiern();
	System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft2));
	
	ausgeben(mannschaft1);
	fussballspielen(mannschaft1, mannschaft2);
   

  }
  


	public static double roteKartenZaehlen(Fussballspieler mannschaft2[]){
		
		double roteKarten = 0;
		for (int i = 0; i<mannschaft2.length; i++){
			if(mannschaft2[i] instanceof Abwehrspieler){
				roteKarten+=((Abwehrspieler)mannschaft2[i]).getRoteKarten();			
			}	
		}				
		return roteKarten;
	/*
	Die Methode roteKartenZaehlen prüft, ob der jeweilige Spieler im Array ein Abwehrspieler ist und nur dann werden die roten Karten des zweiten Teams addiert.
	*/
		
	}
	    public static void ausgeben(Fussballspieler mannschaft1[]){
	for(int i = 0; i<mannschaft1.length; i++){
		System.out.println(mannschaft1[i]);
	}


	/* Die Methode ausgeben funktioniert dadurch, dass die toString-Methoden überschrieben wurden. */
	
}
	
	 
     public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double mannschaft1E = 0;
		double mannschaft2E = 0;
		
		
		for(int i=0;i<mannschaft1.length;i++){
			if(mannschaft1[i] instanceof Torwart){
				double gegentore=((Torwart)mannschaft1[i]).getGegentore();
				mannschaft1E-=gegentore*22;
			}else if(mannschaft1[i] instanceof Abwehrspieler){
				double redCards=((Abwehrspieler)mannschaft1[i]).getRoteKarten();
				mannschaft1E-= redCards*44;
			}else if(mannschaft1[i] instanceof Mittelfeldspieler){
				double passwert=((Mittelfeldspieler)mannschaft1[i]).getPaesse();
				mannschaft1E+= passwert*2;
			}else if(mannschaft1[i] instanceof Sturmspieler){
				double werttore=((Sturmspieler)mannschaft1[i]).getTore();
				mannschaft1E+= werttore*42;
			}else{
				continue;
			}
		}
		
		for(int i=0;i<mannschaft2.length;i++){
			if(mannschaft2[i] instanceof Torwart){
				double gegentore=((Torwart)mannschaft2[i]).getGegentore();
				mannschaft2E-=gegentore*22;
			}else if(mannschaft2[i] instanceof Abwehrspieler){
				double redCards=((Abwehrspieler)mannschaft2[i]).getRoteKarten();
				mannschaft2E-= redCards*44;
			}else if(mannschaft2[i] instanceof Mittelfeldspieler){
				double passwert=((Mittelfeldspieler)mannschaft2[i]).getPaesse();
				mannschaft2E+= passwert*2;
			}else if(mannschaft2[i] instanceof Sturmspieler){
				double werttore=((Sturmspieler)mannschaft2[i]).getTore();
				mannschaft2E+= werttore*42;
			}else{
				continue;
			}
		}
		
		if (mannschaft1E>mannschaft2E){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}else if (mannschaft1E<mannschaft2E){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}else{
			System.out.println(""Unentschiede!"");
		}
	}
	
  }",-
Klingelhöfer,"Sabine Sophie",klingelhoefer@campus.tu-berlin.de,Beendet,"23. Juni 2021  16:01","27. Juni 2021  23:59","4 Tage 7 Stunden","12,50","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",Object,super,"Es wird die Methode der Sub-Klasse aufgerufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Father
__Do you wanna bang heads with me?""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(......);
    System.out.println();
    fussballspielen(................);
  }

  public static double roteKartenZaehlen(.................){
    
   /* bitte implementieren */
  }
  public static void ausgeben(...){
    
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  }
}",//
Eckhardt,Henry,henry.eckhardt@campus.tu-berlin.de,Beendet,"23. Juni 2021  19:39","27. Juni 2021  23:56","4 Tage 4 Stunden","7,38","die Klasse Hund erbt von der Klasse Tier",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 5 : Methode B() hat keinen Rückgabewert","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{

	public static void main(String[] args){
	// Arrays definieren     
	 Fussballspieler[] heim = new Fussballspieler[11];
	 Fussballspieler[] gast = new Fussballspieler[11];
	
     
    //Werte einfügen

	gast[0] = new Torwart(""Jens Adler"", 56, 4.90);
	gast[1] = new Abwehrspieler(""Christian"", 37, 3.20);
	gast[2] = new Abwehrspieler(""John Price"", 36, 1.41);
	gast[3] = new Abwehrspieler(""Wolfgang"", 20, 1.80);
	gast[4] = new Abwehrspieler(""Günther"", 22, 3.30);
	gast[5] = new Mittelfeldspieler(""Bernd"", 53, 29.00);
	gast[6] = new Mittelfeldspieler(""Frank"", 7, 1.30);
	gast[7] = new Mittelfeldspieler(""Arthur"", 69, 23.70);
	gast[8] = new Mittelfeldspieler(""Theodor"", 27, 76.00);
	gast[9] = new Sturmspieler(""Manuel"", 26, 13.37);
	gast[10] = new Sturmspieler(""Marc"", 36, 420.00);
	
	heim[0] = new Torwart(""Perry"", 5, 4.2);
	heim[1] = new Abwehrspieler(""Heinz"", 100, 0.1);
	heim[2] = new Abwehrspieler(""Doris"", 99, 20.23);
	heim[3] = new Abwehrspieler(""Tom"", 42, 60.78);
	heim[4] = new Abwehrspieler(""Dennis"", 28, 1.0);
	heim[5] = new Mittelfeldspieler(""Georg"", 33, 30.0);
	heim[6] = new Mittelfeldspieler(""Masamune"", 39, 17.9);
	heim[7] = new Mittelfeldspieler(""Peter"", 21, 87.9);
	heim[8] = new Mittelfeldspieler(""Martin"",2, 9.9);
	heim[9] = new Sturmspieler(""Angela"", 80, 23.23);
	heim[10] = new Sturmspieler(""Jochen"", 92, 30.1);
	
	gast[5].geburtstagFeiern();
	ausgeben(heim);
	ausgeben(gast);
	fussballspielen(heim, gast);
   	System.out.println(""Rote Karten: "" + roteKartenZaehlen(heim));

  }
  
    public static void ausgeben(Fussballspieler heim[]){
	for(int i = 0; i<heim.length; i++){
		System.out.println(""Spieler im Heimteam: ""+heim[i]);
	}
    }

	public static double roteKartenZaehlen(Fussballspieler heim[]){
		
		double roteK = 0;
		for (int i = 0; i<heim.length; i++){
			if(heim[i] instanceof Abwehrspieler){
				roteK+=((Abwehrspieler)heim[i]).getRoteKarten();			
			}	
		}				
		return roteK;
	}
	
	 
     public static void fussballspielen(Fussballspieler[] heim, Fussballspieler[] gast){
		double heimE =0;
		double gastE =0;
		
		
		for(int i=0;i<heim.length;i++){
			if(heim[i] instanceof Torwart){
				double gegentore=((Torwart)heim[i]).getGegentore();
				heimE-=gegentore*50;
			}else if(heim[i] instanceof Abwehrspieler){
				double roteKarten=((Abwehrspieler)heim[i]).getRoteKarten();
				heimE-= roteKarten*20;
			}else if(heim[i] instanceof Mittelfeldspieler){
				double wertpaesse=((Mittelfeldspieler)heim[i]).getPaesse();
				heimE+= wertpaesse*1;
			}else if(heim[i] instanceof Sturmspieler){
				double werttore=((Sturmspieler)heim[i]).getTore();
				heimE+= werttore*50;
			}else{
				continue;
			}
		}
		
		for(int i=0;i<gast.length;i++){
			if(gast[i] instanceof Torwart){
				double gegentore=((Torwart)gast[i]).getGegentore();
				gastE-=gegentore*50;
			}else if(gast[i] instanceof Abwehrspieler){
				double roteKarten=((Abwehrspieler)gast[i]).getRoteKarten();
				gastE-= roteKarten*20;
			}else if(gast[i] instanceof Mittelfeldspieler){
				double wertpaesse=((Mittelfeldspieler)gast[i]).getPaesse();
				gastE+= wertpaesse*1;
			}else if(gast[i] instanceof Sturmspieler){
				double werttore=((Sturmspieler)gast[i]).getTore();
				gastE+= werttore*50;
			}else{
				continue;
			}
		}
		
		if (heimE>gastE){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}else if (heimE<gastE){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}else{
			System.out.println(""Unentschieden!"");
		}
	}
  }",-
Schneider,Felix,felix.schneider@campus.tu-berlin.de,Beendet,"24. Juni 2021  00:02","27. Juni 2021  23:59","3 Tage 23 Stunden","8,95","Es wird die Methode der Sub-Klasse aufgerufen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier",super,Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{

  public static void main(String[] args){
      
    Fussballspieler[] deutschland = new Fussballspieler[11];
	for (int i = 0 ; i < 10 ; i++){
		deutschland[i] = new Sturmspieler(""Jo der ""+i+""te halt"", i, (double) i);
	}
	deutschland[10] = new Torwart(""Peter"", 10, 10.00);
	
	Fussballspieler[] ErsterSC = new Fussballspieler[11];
	for (int i = 0 ; i < 10 ; i++){
		ErsterSC[i] = new Abwehrspieler(""Japp der ""+(i+11)+""te halt"", (11+i), (double) (11+i));
	}
	ErsterSC[10]= new Torwart(""Karsten"" , 21 , 21.00);
	
	deutschland[3].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(ErsterSC));
	
    ausgeben(deutschland);

    fussballspielen(ErsterSC , deutschland);
  }
// durch explizite Konversion keine Polymorphie vorgesehen, es wird ja nur auf die Eigenschaft einer Klasse geprüft, Polymorphie wäre hier überflüssig.
  public static double roteKartenZaehlen(Fussballspieler[] Pruflinge){
    double counter = 0.0;
	Abwehrspieler Test;
	for (int i = 0 ; i < Pruflinge.length ; i++){
		if (Pruflinge[i] instanceof Abwehrspieler){
			Test = (Abwehrspieler)Pruflinge[i];
			counter += Test.getanzahlRoteKartenJeSpiel();
		}
	}
	return counter;
    }
// toString bedient sich der Polymorphie um jeweils die richtige Klassenspezifische Eigenschaft anzuzeigen  
  public static void ausgeben(Fussballspieler[] Pruflinge){
	for (int i = 0 ; i < Pruflinge.length ; i++){
		System.out.println(Pruflinge[i].toString());
	}
  }
	
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	double spielstärke1 = 0;
	double spielstärke2 = 0;
	
	
	for (int i = 0 ; i < mannschaft1.length ; i++){
		if (mannschaft1[i] instanceof Torwart){
				Torwart test = (Torwart)mannschaft1[i];
				spielstärke1 -= test.getgegentoreJeSpiel();
			}
		else if (mannschaft1[i] instanceof Abwehrspieler){
				Abwehrspieler test = (Abwehrspieler)mannschaft1[i];
				spielstärke1 -= test.getanzahlRoteKartenJeSpiel();
			}
		else if (mannschaft1[i] instanceof Sturmspieler){
				Sturmspieler test = (Sturmspieler)mannschaft1[i];
				spielstärke1 += test.gettoreJeSpiel();
			}
		else if (mannschaft1[i] instanceof Mittelfeldspieler){
				Mittelfeldspieler test = (Mittelfeldspieler)mannschaft1[i];
				spielstärke1 -= test.getpaesseJeSpiel();
			}
		}
	for (int i = 0 ; i < mannschaft2.length ; i++){
		if (mannschaft2[i] instanceof Torwart){
				Torwart test = (Torwart)mannschaft2[i];
				spielstärke2 -= test.getgegentoreJeSpiel();
			}
		else if (mannschaft2[i] instanceof Abwehrspieler){
				Abwehrspieler test = (Abwehrspieler)mannschaft2[i];
				spielstärke2 -= test.getanzahlRoteKartenJeSpiel();
			}
		else if (mannschaft2[i] instanceof Sturmspieler){
				Sturmspieler test = (Sturmspieler)mannschaft2[i];
				spielstärke2 += test.gettoreJeSpiel();
			}
		else if (mannschaft2[i] instanceof Mittelfeldspieler){
				Mittelfeldspieler test = (Mittelfeldspieler)mannschaft2[i];
				spielstärke2 -= test.getpaesseJeSpiel();
			}
		}
		
		if (spielstärke1 == spielstärke2)
			System.out.println(""Unentschieden!"");
		else if (spielstärke1 < spielstärke2)
			System.out.println(""Mannschaft 2 gewinnt!"");
		else if (spielstärke1 > spielstärke2)
			System.out.println(""Mannschaft 1 gewinnt!"");

	}
 }",-
Scholz,"Jonas Malte",jonas.scholz.1@campus.tu-berlin.de,Beendet,"24. Juni 2021  10:00","27. Juni 2021  23:59","3 Tage 13 Stunden","10,86",instanceof,Java,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {
    public static void main(String[] args) {

        Fussballspieler[] m1 = {
                new Torwart(""A"", 22, 1),
                new Abwehrspieler(""B"", 34, 1),
                new Abwehrspieler(""C"", 40, 5),
                new Abwehrspieler(""D"", 25, 0),
                new Sturmspieler(""E"", 22, 0),
                new Sturmspieler(""F"", 30, 4),
                new Abwehrspieler(""G"", 21, 1),
                new Abwehrspieler(""H"", 28, 0),
                new Mittelfeldspieler(""I"", 17, 30),
                new Mittelfeldspieler(""J"", 29, 100),
                new Mittelfeldspieler(""K"", 24, 2),
        };

        Fussballspieler[] m2 = {
                new Torwart(""L"", 37, 3),
                new Abwehrspieler(""M"", 30, 0),
                new Abwehrspieler(""N"", 35, 2),
                new Abwehrspieler(""O"", 25, 4),
                new Sturmspieler(""P"", 23, 0),
                new Sturmspieler(""Q"", 21, 3),
                new Abwehrspieler(""R"", 20, 1),
                new Abwehrspieler(""S"", 28, 2),
                new Mittelfeldspieler(""T"", 18, 10),
                new Mittelfeldspieler(""U"", 32, 66),
                new Mittelfeldspieler(""V"", 16, 45),
        };

        m1[4].geburtstagFeiern();
        System.out.println(""Rote Karten: "" + roteKartenZaehlen(m1));
        System.out.println();
        ausgeben(m1);
        System.out.println();
        fussballspielen(m1,m2);

    }

        public static double roteKartenZaehlen(Fussballspieler[]a){
            double roteInsgesamt = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Abwehrspieler)
                    roteInsgesamt += ((Abwehrspieler) a[i]).getAnzahlRoteKartenJeSpiel();
            }
            return roteInsgesamt;
        }

        public static double countPaesse(Fussballspieler[]a) {
            double passAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Mittelfeldspieler)
                    passAnzahl += ((Mittelfeldspieler) a[i]).getPaesseJeSpiel();
            }
            return passAnzahl;
        }

        public static double countTore(Fussballspieler[]a) {
            double toreAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Sturmspieler)
                    toreAnzahl += ((Sturmspieler) a[i]).getToreJeSpiel();
            }
            return toreAnzahl;
        }

        public static double countGegentore(Fussballspieler[]a) {
            double gegentoreAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Torwart)
                   gegentoreAnzahl += ((Torwart) a[i]).getGegentoreJeSpiel();
            }
            return gegentoreAnzahl;
        }

        public static void ausgeben (Fussballspieler[]o) {
            for (int i = 0; i < o.length; i++) {
                System.out.println(o[i].toString());
            }
        }

        public static void fussballspielen (Fussballspieler[]mannschaft1, Fussballspieler[]mannschaft2){
        double ergebnis1 = countTore(mannschaft1)*1000+countPaesse(mannschaft1)-countGegentore(mannschaft1)*1000-roteKartenZaehlen(mannschaft1)*10;
        double ergebnis2 = countTore(mannschaft2)*1000+countPaesse(mannschaft2)-countGegentore(mannschaft2)*1000-roteKartenZaehlen(mannschaft2)*10;
        if (ergebnis1 == ergebnis2) {
            System.out.println(""Unentschieden!"");
        }
            else {
                if (ergebnis1 < ergebnis2) {
                    System.out.println(""Mannschaft 2 gewinnt!"");
                }
                else {
                    System.out.println(""Mannschaft 1 gewinnt!"");
                }
        }
    }
}",-
Wolf,"Matilda Sophie",matilda.s.wolf@campus.tu-berlin.de,Beendet,"24. Juni 2021  10:23","27. Juni 2021  16:12","3 Tage 5 Stunden","9,44","Zeile 1 : Klasse A hat keinen Konstruktor","Es wird die Methode der Sub-Klasse aufgerufen",Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Father
__Do you wanna bang heads with me?""_
ausgegeben.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{

  public static void main(String[] args){
      
     		Fussballspieler[] deutschland = {
			new Torwart (""Hannes"", 23, 2),
			new Abwehrspieler (""Heiko"", 31, 7), 
			new Abwehrspieler (""Hajo"", 25, 0),
			new Abwehrspieler (""Hanno"", 22, 0),
			new Mittelfeldspieler (""Hans"", 17,34),
			new Mittelfeldspieler (""Hagen"", 30,22),
			new Mittelfeldspieler (""Heino"",24,14),
			new Mittelfeldspieler (""Hektor"", 27,25),
			new Sturmspieler (""Henrik"", 22, 3),
			new Sturmspieler (""Henning"", 19, 0),
			new Sturmspieler (""Henner"", 26, 9)
		};
		deutschland[3].geburtstagFeiern ();

		Fussballspieler[] england = {
			new Torwart (""Robin"", 31, 0),
			new Abwehrspieler (""Raven"", 25, 7),
			new Abwehrspieler (""Roger"", 21, 2),
			new Abwehrspieler (""Reed"", 30, 0),
			new Mittelfeldspieler (""Ridley"", 17,34),
			new Mittelfeldspieler (""Ron"", 29,22),
			new Mittelfeldspieler (""Rahan"",25,14),
			new Mittelfeldspieler (""Robbie"", 24,25),
			new Sturmspieler (""Rylan"", 22, 3),
			new Sturmspieler (""Ringo"", 24, 0),
			new Sturmspieler (""Rick"", 23, 9)
		};
		england[9].geburtstagFeiern();


   System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(england));
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, england);
	}

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1){
	   double alleRotenKarten = 0;
	   for (int i = 0; i < mannschaft1.length; i++) {
		   if (mannschaft1[i] instanceof Abwehrspieler) {
		   Abwehrspieler spieler = (Abwehrspieler)mannschaft1 [i];
		   alleRotenKarten += spieler.getAnzahlRoteKartenJeSpiel(); 
		   }
	   }
	   return alleRotenKarten;
	   
  }
  
  public static void ausgeben(Fussballspieler[] mannschaft1){
	  for (int i = 0; i < mannschaft1.length; i++) {
		  if (mannschaft1[i] instanceof Torwart) {
			  Torwart spieler = (Torwart)mannschaft1 [i];
			  System.out.println(spieler.toString());
		  }
		  else if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft1 [i];
				 System.out.println(spieler.toString());
		  }
		  else if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1 [i];
				 System.out.println(spieler.toString());
		  }
		  else {
			   Abwehrspieler spieler = (Abwehrspieler)mannschaft1 [i];
			  System.out.println(spieler.toString());
			  }
		} 
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	double alleAlter1 = 0;
	double alleGegenTore1 = 0;
	double alleTore1 = 0;
	double allePaesse1 = 0;
	double alleAlter2 = 0;
	double alleGegenTore2 = 0;
	double alleTore2 = 0;
	double allePaesse2 = 0;
	double staerke1 = 0;
	double staerke2 = 0;
		for (int i = 0; i < mannschaft1.length; i++) {
			alleAlter1 += mannschaft1[i].getAlter();
			if (mannschaft1[i] instanceof Torwart) {
				Torwart spieler = (Torwart)mannschaft1 [i];
				alleGegenTore1 +=  spieler.getGegentoreJeSpiel();
				}
			if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft1 [i];
				alleTore1 +=  spieler.getToreJeSpiel();
				}
			if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1 [i];
				allePaesse1 +=  spieler.getPaesseJeSpiel();
				}
		}
		for (int i = 0; i < mannschaft2.length; i++) {
			alleAlter2 += mannschaft2[i].getAlter();
			if (mannschaft2[i] instanceof Torwart) {
				Torwart spieler = (Torwart)mannschaft2 [i];
				alleGegenTore2 +=  spieler.getGegentoreJeSpiel();
				}
			if (mannschaft2[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft2 [i];
				alleTore2 +=  spieler.getToreJeSpiel();
				}
			if (mannschaft2[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft2 [i];
				allePaesse2 +=  spieler.getPaesseJeSpiel();
				}
			}	
				
				staerke1 = alleAlter1+allePaesse1+alleTore1-alleGegenTore1-roteKartenZaehlen(mannschaft1);
				staerke2 = alleAlter2+allePaesse2+alleTore2-alleGegenTore2-roteKartenZaehlen(mannschaft2);
				
		if (staerke1 > staerke2) {
			  System.out.println(""Mannschaft 1 gewinnt!"");
			}
			else if (staerke1 == staerke2) {
			  System.out.println(""Unentschieden!"");
			}
			else {
				System.out.println(""Mannschaft 2 gewinnt!"");
		  }
  }
}",//
Kubale,"Felice Pia Sophie",f.kubale@campus.tu-berlin.de,Beendet,"24. Juni 2021  11:45","27. Juni 2021  23:59","3 Tage 12 Stunden","20,00",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
	 
    // Arrays definieren
    Fussballspieler[] mannschaft1 = new Fussballspieler[11];
	Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	  
    //Werte einfügen
	mannschaft1[0] = new Torwart(""Bob"", 20, 4.1);
	mannschaft1[1] = new Abwehrspieler(""Jan"", 19, 0.01);
	mannschaft1[2] = new Abwehrspieler(""Karla"", 21, 0.05);
	mannschaft1[3] = new Abwehrspieler(""Hansi"", 19, 0.01);
	mannschaft1[4] = new Mittelfeldspieler(""Olaf"", 25, 78);
	mannschaft1[5] = new Mittelfeldspieler(""Üllrich"", 48, 34);
	mannschaft1[6] = new Mittelfeldspieler(""Sonja"", 25, 67);
	mannschaft1[7] = new Mittelfeldspieler(""Peter"", 16, 14);
	mannschaft1[8] = new Sturmspieler(""Lala"", 17, 1);
	mannschaft1[9] = new Sturmspieler(""Ben"", 21, 1);
	mannschaft1[10] = new Sturmspieler(""Pumba"", 23, 0);
	
	mannschaft2[0] = new Torwart(""Lisa"", 18, 1);
	mannschaft2[1] = new Abwehrspieler(""Kaya"", 24, 0.0);
	mannschaft2[2] = new Abwehrspieler(""Ursula"", 75, 2.0);
	mannschaft2[3] = new Abwehrspieler(""Leo"", 19, 6.0);
	mannschaft2[4] = new Mittelfeldspieler(""Tic"", 22, 12);
	mannschaft2[5] = new Mittelfeldspieler(""Tac"", 22, 12);
	mannschaft2[6] = new Mittelfeldspieler(""Toc"", 22, 24);
	mannschaft2[7] = new Mittelfeldspieler(""Trick"", 22, 24);
	mannschaft2[8] = new Mittelfeldspieler(""Lutz"", 17, 55);
	mannschaft2[9] = new Sturmspieler(""Anna"", 15, 0);
	mannschaft2[10] = new Sturmspieler(""Betti"", 17, 4);
	
	// Geburtstag feiern
	mannschaft2[5].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
    System.out.println();
    ausgeben(mannschaft1);
    System.out.println();
    fussballspielen(mannschaft1, mannschaft2);
  }
	//da wir vorher überprüfen, ob der Spieler ein Abwehrspieler ist,
	//können wir die entsprechende Methode für den Abwehrspieler aufrufen.
  public static double roteKartenZaehlen(Fussballspieler[] spieler){
    double roteKarten = 0.0;
	for(int i=0; i<spieler.length; i++){
		if(spieler[i] instanceof Abwehrspieler) {
			roteKarten += ((Abwehrspieler) spieler[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
  }
	//Da wird die entsprechende Methode (toString) automatisch
	//aufgerufen (Polymorphie)
  public static void ausgeben(Fussballspieler[] spieler){
	for(int i=0; i<spieler.length; i++){
		System.out.print(spieler[i]);
	}
  }
  public static int tore(Fussballspieler[] mannschaft) {
	int tore = 0;
	for(int i=0; i<mannschaft.length; i++){
		if(mannschaft[i] instanceof Sturmspieler) { 
			tore += ((Sturmspieler)mannschaft[i]).getToreJeSpiel();
		}
	}
	return tore;
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int tore1 = tore(mannschaft1);
	int tore2 = tore(mannschaft2);
	if(tore1>tore2) {
		System.out.println(""Mannschaft 1 gewinnt!"");
	} else if (tore1<tore2) {
		System.out.println(""Mannschaft 2 gewinnt!"");
	} else {
		System.out.println(""Unentschieden!"");
	}
  }
}",//
Machleidt,"Felice Josima Lunes Noah",machleidt@campus.tu-berlin.de,Beendet,"24. Juni 2021  12:21","26. Juni 2021  12:44","2 Tage","16,00","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Zeile 7 : super(); müsste this(); heißen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Father
__Do you wanna bang heads with me?""_
ausgegeben.","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen",-,"public class TestMannschaft{
  public static void main(String[] args){
    Fussballspieler[] deutschland ={new Torwart(""Neuer"",34,0.82),
                                    new Sturmspieler(""Gnarby"",25,0.3),
                                    new Sturmspieler(""Sane"",24,0.26),
                                    new Sturmspieler(""Werner"",24,0.5),
                                    new Mittelfeldspieler(""Schulz"",27,22.1),
                                    new Mittelfeldspieler(""Kroos"",31,74.9),
                                    new Mittelfeldspieler(""Kimmich"",25,71.4),
                                    new Mittelfeldspieler(""Kehrer"",24,44.2),
                                    new Abwehrspieler(""Hummels"",32,0),
                                    new Abwehrspieler(""Suele"",25,0),
                                    new Abwehrspieler(""Ginter"",27,0)};  
    Fussballspieler[] frankreich ={new Torwart(""Lloris"",34,0.97),
                                   new Sturmspieler(""Giroud"",34,0.5),
                                   new Sturmspieler(""Mbappe"",22,0.71),
                                   new Sturmspieler(""Griezmann"",29,0.38),
                                   new Sturmspieler(""Matuidi"",33,0.1),
                                   new Mittelfeldspieler(""Kante"",29,53),
                                   new Mittelfeldspieler(""Pogba"",27,47.3),
                                   new Abwehrspieler(""Pavard"",24,0),
                                   new Abwehrspieler(""Varane"",27,0),
                                   new Abwehrspieler(""Kimpembe"",25,0),
                                   new Abwehrspieler(""Hernandez"",24,0),};
                                   
    deutschland[2].geburtstagFeiern();
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    ausgeben(deutschland);
    fussballspielen(deutschland,frankreich);
  }
  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1){
     double sum=0;
     for(Fussballspieler f: mannschaft1){
        if(f instanceof Abwehrspieler){
            Abwehrspieler a=(Abwehrspieler)f;
            sum+=a.getAnzahlRoteKartenJeSpiel();
        } 
     }
     return sum;
  }
  //Durch instanceof wird die unterklasse abwehrspieler spezifische aufgerufen.
  public static void ausgeben(Fussballspieler[] mannschaft1){
    for(int i=0; i < mannschaft1.length; i++){
        System.out.print(mannschaft1[i].toString());
    } 
  }
  //Durch die for-each schleife wird alle elemente der Array aufgerufen and ausgeben.
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double TorwartSpielstaerke1=0;
    double StuermerSpielstaerke1=0;
    double Mittelfeldstaerke1=0;
    double Abwehrstaerke1=0;
    double TorwartSpielstaerke2=0;
    double StuermerSpielstaerke2=0;
    double Mittelfeldstaerke2=0;
    double Abwehrstaerke2=0;
    double Team1staerke=0;
    double Team2staerke=0;
    for(Fussballspieler f:mannschaft1){
        if(f instanceof Torwart){
            Torwart t = (Torwart)f;
            TorwartSpielstaerke1 = t.getAlter() -10 * t.getGegentoreJeSpiel();
        }
        if(f instanceof Sturmspieler){
            Sturmspieler s = (Sturmspieler)f;
            StuermerSpielstaerke1 += (s.getAlter()+10*s.getToreJeSpiel());
        }
        if(f instanceof Mittelfeldspieler){
            Mittelfeldspieler m = (Mittelfeldspieler)f;
            Mittelfeldstaerke1 += (m.getAlter()+m.getPaesseJeSpiel()/10);
        }
        if(f instanceof Abwehrspieler){
            Abwehrspieler a = (Abwehrspieler)f;
            Abwehrstaerke1 += (a.getAlter()-10*a.getAnzahlRoteKartenJeSpiel());
        }
        Team1staerke=TorwartSpielstaerke1+StuermerSpielstaerke1+Mittelfeldstaerke1+Abwehrstaerke1;
    }
    for(Fussballspieler f:mannschaft2){
        if(f instanceof Torwart){
            Torwart t = (Torwart)f;
            TorwartSpielstaerke2 = t.getAlter() -10 * t.getGegentoreJeSpiel();
        }
        if(f instanceof Sturmspieler){
            Sturmspieler s = (Sturmspieler)f;
            StuermerSpielstaerke2 += (s.getAlter()+10*s.getToreJeSpiel());
        }
        if(f instanceof Mittelfeldspieler){
            Mittelfeldspieler m = (Mittelfeldspieler)f;
            Mittelfeldstaerke2 += (m.getAlter()+m.getPaesseJeSpiel()/10);
        }
        if(f instanceof Abwehrspieler){
            Abwehrspieler a = (Abwehrspieler)f;
            Abwehrstaerke2 += (a.getAlter()-10*a.getAnzahlRoteKartenJeSpiel());
        }
        Team2staerke=TorwartSpielstaerke2+StuermerSpielstaerke2+Mittelfeldstaerke2+Abwehrstaerke2;
    }
    if(Team1staerke>Team2staerke){
        System.out.print(""Mannschaft 1 gewinnt"");
    }
    if(Team1staerke==Team2staerke){
        System.out.print(""Unentschieden!"");
    }
    if(Team1staerke<Team2staerke){
        System.out.print(""Mannschaft 2 gewinnt"");
    }
  }
}",//
Schuchardt,"Silas Samuel",schuchardt@tu-berlin.de,Beendet,"24. Juni 2021  12:22","27. Juni 2021  23:59","3 Tage 11 Stunden","8,05","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Zeile 6,7 : super(); müsste vor x=0; stehen","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{

	public static void main(String[] args){
	// Arrays definieren     
	 Fussballspieler[] heim = new Fussballspieler[11];
	 Fussballspieler[] gast = new Fussballspieler[11];
	
     
    //Werte einfügen

	gast[0] = new Torwart(""Thorsten"", 36, 2.3);
	gast[1] = new Abwehrspieler(""Torsten"", 45, 1.4);
	gast[2] = new Abwehrspieler(""Orsten"", 24, 1.3);
	gast[3] = new Abwehrspieler(""brrrr"", 29, 1.5);
	gast[4] = new Abwehrspieler(""skür"", 24, 0.7);
	gast[5] = new Mittelfeldspieler(""cüs"", 52, 50);
	gast[6] = new Mittelfeldspieler(""skia"", 10, 140.69);
	gast[7] = new Mittelfeldspieler(""Lea Bommer"", 69, 420);
	gast[8] = new Mittelfeldspieler(""Hallo ich bin die Jana aus kassel"", 28, 199.999);
	gast[9] = new Sturmspieler(""Darth Vader"", 34, 3.14);
	gast[10] = new Sturmspieler(""Ki Ai'de Mundi"", 38, 2.5);
	
	heim[0] = new Torwart(""a"", 23, 1.3);
	heim[1] = new Abwehrspieler(""b"", 32, 1.41);
	heim[2] = new Abwehrspieler(""c"", 20, 4.35);
	heim[3] = new Abwehrspieler(""sdf"", 30, 1.23);
	heim[4] = new Abwehrspieler(""Mustafi(3zuder6)"", 22, 1.5);
	heim[5] = new Mittelfeldspieler(""Schweinbesteiger"", 30, 100);
	heim[6] = new Mittelfeldspieler(""nicht ganz so Kroos"", 25, 150.6969);
	heim[7] = new Mittelfeldspieler(""mia khalifa (.)(.)"", 39, 29.34);
	heim[8] = new Mittelfeldspieler(""Zakar Zakar"",5, 4.5);
	heim[9] = new Sturmspieler(""Zies Zies"", 40, 50);
	heim[10] = new Sturmspieler(""Barack Obama"", 40, 2.1);
	
	gast[5].geburtstagFeiern();
	ausgeben(heim);
	ausgeben(gast);
	fussballspielen(heim, gast);
   	System.out.println(""Rote Karten: "" + roteKartenZaehlen(heim));

  }
  
    public static void ausgeben(Fussballspieler heim[]){
	for(int i = 0; i<heim.length; i++){
		System.out.println(heim[i]);
	}
    }

	public static double roteKartenZaehlen(Fussballspieler heim[]){
		
		double roteK = 0;
		for (int i = 0; i<heim.length; i++){
			if(heim[i] instanceof Abwehrspieler){
				roteK+=((Abwehrspieler)heim[i]).getRoteKarten();			
			}	
		}				
		return roteK;
	}
	
	 
     public static void fussballspielen(Fussballspieler[] heim, Fussballspieler[] gast){
		double heimE =0;
		double gastE =0;
		
		
		for(int i=0;i<heim.length;i++){
			if(heim[i] instanceof Torwart){
				double gegentore=((Torwart)heim[i]).getGegentore();
				heimE-=gegentore*50;
			}else if(heim[i] instanceof Abwehrspieler){
				double roteKaaaarten=((Abwehrspieler)heim[i]).getRoteKarten();
				heimE-= roteKaaaarten*20;
			}else if(heim[i] instanceof Mittelfeldspieler){
				double wertpaesse=((Mittelfeldspieler)heim[i]).getPaesse();
				heimE+= wertpaesse*1;
			}else if(heim[i] instanceof Sturmspieler){
				double werttore=((Sturmspieler)heim[i]).getTore();
				heimE+= werttore*50;
			}else{
				continue;
			}
		}
		
		for(int i=0;i<gast.length;i++){
			if(gast[i] instanceof Torwart){
				double gegentore=((Torwart)gast[i]).getGegentore();
				gastE-=gegentore*50;
			}else if(gast[i] instanceof Abwehrspieler){
				double roteKaaaarten=((Abwehrspieler)gast[i]).getRoteKarten();
				gastE-= roteKaaaarten*20;
			}else if(gast[i] instanceof Mittelfeldspieler){
				double wertpaesse=((Mittelfeldspieler)gast[i]).getPaesse();
				gastE+= wertpaesse*1;
			}else if(gast[i] instanceof Sturmspieler){
				double werttore=((Sturmspieler)gast[i]).getTore();
				gastE+= werttore*50;
			}else{
				continue;
			}
		}
		
		if (heimE>gastE){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}else if (heimE<gastE){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}else{
			System.out.println(""Unentschiede!"");
		}
	}
  }",-
Trümpler,Antonia,a.truempler@campus.tu-berlin.de,Beendet,"24. Juni 2021  13:07","27. Juni 2021  22:08","3 Tage 9 Stunden","5,36","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",Object,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen",super,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Fenner,Lisa-Marie,l.fenner@campus.tu-berlin.de,Beendet,"24. Juni 2021  14:44","27. Juni 2021  20:32","3 Tage 5 Stunden","12,50","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,//
Hecker,Henry,h.hecker@campus.tu-berlin.de,Beendet,"24. Juni 2021  14:50","27. Juni 2021  23:59","3 Tage 9 Stunden","14,77","Zeile 1 : Klasse A hat keinen Konstruktor","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Father
__Do you wanna bang heads with me?""_
ausgegeben.",-,-,Main,"Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
      
    Fussballspieler[] menschen = new Fussballspieler[11];
    Fussballspieler[] aliens = new Fussballspieler[11];

    menschen[0] = new Torwart(""a"", 0, 3.1);
    menschen[1] = new Abwehrspieler(""b"", 1, 4.1);
    menschen[2] = new Abwehrspieler(""c"", 2, 5.02);
    menschen[3] = new Abwehrspieler(""d"", 3, 1.01);
    menschen[4] = new Abwehrspieler(""e"", 4, 9.1);
    menschen[5] = new Mittelfeldspieler(""f"", 5, 505);
    menschen[6] = new Mittelfeldspieler(""g"", 6, 4);
    menschen[7] = new Mittelfeldspieler(""h"", 7, 3.85);
    menschen[8] = new Mittelfeldspieler(""i"", 8, 2.678);
    menschen[9] = new Mittelfeldspieler(""j"", 9, 4.5);
    menschen[10] = new Sturmspieler(""k"", 10, 0.763);

    aliens[0] = new Torwart(""l"", 5, 9.9);
    aliens[1] = new Abwehrspieler(""m"", 10, 6.5);
    aliens[2] = new Abwehrspieler(""n"", 20, 0.28);
    aliens[3] = new Abwehrspieler(""o"", 25, 6.41);
    aliens[4] = new Abwehrspieler(""p"", 30, 56.07);
    aliens[5] = new Mittelfeldspieler(""q"", 35, 456.67);
    aliens[6] = new Mittelfeldspieler(""r"", 40, 25.34653);
    aliens[7] = new Mittelfeldspieler(""s"", 45, 77.3123);
    aliens[8] = new Mittelfeldspieler(""t"", 50, 69.89);
    aliens[9] = new Sturmspieler(""u"", 55, 78.4);
    aliens[10] = new Sturmspieler(""v"", 60, 987.5);

    aliens[10].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(menschen));
    System.out.println();
    ausgeben(menschen);
    System.out.println();
    fussballspielen(menschen, aliens);
  }

public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
    double roteKarten = 0.0;
    for(Fussballspieler f : mannschaft){
      if(f instanceof Abwehrspieler){
        roteKarten += ((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
      }
    }
    return roteKarten;
   
   /*Erstmal haben nur Abwehspieler die Methode, deshalb die Überprüfung, 
    *dann muss man casten, da erstmal angenommen wird, 
    *dass f ein Fußballspieler ist, welcher die Methode ja nicht hat.
    * */

  }
public static void ausgeben(Fussballspieler[] mannschaft){
    for(int i = 0; i < mannschaft.length; i++){
      System.out.println(mannschaft[i]);
    }
    /* Wenn wir printen, wird toString der jeweiligen Klassen automatisch aufgerufen,
     * welches die toString der Oberklasse überschreibt, das geht, weil die toString methode eben auch
     * in der Oberklasse existiert
     */  
  }

public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
  
    double staerke1 = 0.0;
    for(Fussballspieler f : mannschaft1){
        if (f instanceof Torwart) staerke1 -= 2.5*((Torwart)f).getGegentoreJeSpiel();
        else if(f instanceof Abwehrspieler) staerke1 -= 4.9*((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
        else if(f instanceof Mittelfeldspieler) staerke1 += 0.71*((Mittelfeldspieler)f).getPaesseJeSpiel();
        else if(f instanceof Sturmspieler) staerke1 += 4.8*((Sturmspieler)f).getToreJeSpiel();
        }
        
    double staerke2 = 0.0;
    for(Fussballspieler f : mannschaft2){
        if (f instanceof Torwart) staerke2 -= 2.5*((Torwart)f).getGegentoreJeSpiel();
        else if(f instanceof Abwehrspieler) staerke2 -= 4.9*((Abwehrspieler)f).getAnzahlRoteKartenJeSpiel();
        else if(f instanceof Mittelfeldspieler) staerke2 += 0.1*((Mittelfeldspieler)f).getPaesseJeSpiel();
        else if(f instanceof Sturmspieler) staerke2 += 4.8*((Sturmspieler)f).getToreJeSpiel();
        }
        
    if (staerke1>staerke2){
        System.out.println("" gewinnt!"");} //fehler hier
    else if (staerke1<staerke2){
        System.out.println(mannschaft2+"" gewinnt!"");} //fehler hier
    else {
        System.out.println(""Unentschieden!"");}
    }
}",//
Escabache,"Pia Annick",escabache@campus.tu-berlin.de,Beendet,"24. Juni 2021  15:18","27. Juni 2021  22:24","3 Tage 7 Stunden","12,00","die Klasse Hund erbt von der Klasse Tier","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 1 : Klasse A hat keinen Konstruktor","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren  
	 //Werte einfügen

     Fussballspieler [] deutschland = new Fussballspieler [11];
     deutschland [0] = new Abwehrspieler(""Hans"", 21, 0.02);
	 deutschland [1] = new Abwehrspieler(""Peter"", 18, 0.03);
	 deutschland [2] = new Abwehrspieler(""Thomas"", 29, 2);
	 deutschland [3] = new Abwehrspieler(""Tom"", 23, 1.02);
	 
	 deutschland [4] = new Mittelfeldspieler(""Albert"", 24, 10);
	 deutschland [5] = new Mittelfeldspieler(""Albert1"", 25, 15);   
	 deutschland [6] = new Mittelfeldspieler(""Albert2"", 26, 3);
	 deutschland [7] = new Mittelfeldspieler(""Albert3"", 18, 20);
	 
	 deutschland [8] = new Sturmspieler(""Lukas"", 24, 0); 
	 deutschland [9] = new Sturmspieler(""Richard"", 19, 1);
	 
	 deutschland [10] = new Torwart(""Manuel"", 35, 2);
	 
	(deutschland[10]).geburtstagFeiern();
	
	
	
	 Fussballspieler [] frankreich = new Fussballspieler [11];
     frankreich [0] = new Abwehrspieler(""Hugo"", 21, 1);
	 frankreich [1] = new Abwehrspieler(""Steve"", 19, 4);
	 frankreich [2] = new Abwehrspieler(""Karim"", 32, 1);
	 frankreich[3] = new Abwehrspieler(""Walter"", 23, 1);
	 
	 frankreich [4] = new Mittelfeldspieler(""Hubert"", 24, 11);
	 frankreich [5] = new Mittelfeldspieler(""Hubert1"", 25, 9);   
	 frankreich [6] = new Mittelfeldspieler(""Hubert2"", 26, 3);
	 frankreich [7] = new Mittelfeldspieler(""Hubert3"", 18, 23);
	 
	  
	 frankreich [8] = new Sturmspieler(""Wolfgang"", 24, 0); 
	 frankreich [9] = new Sturmspieler(""Heinrich"", 19, 1);
	 
	 frankreich [10] = new Torwart(""Noah"", 19, 0);
  
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(frankreich));
    System.out.println();
	ausgeben (deutschland);
	System.out.println();
	fussballspielen(deutschland,frankreich);
  
  }
  public static double roteKartenZaehlen(Fussballspieler arr1[]){
		double sum = 0; 
		for ( int i=0; i<arr1.length ; i++)
			if (arr1[i]  instanceof Abwehrspieler )
			sum+=((Abwehrspieler)arr1[i]).getAnzahlRoteKartenJeSpiel();
			return sum;
			//Pollymorphie, da Typ der Variable nicht eindeutig
			//Umwandeln eines Objekttyps, Umwandlung möglich, da Fussballspieler Oberklasse und Abwhrspieler Unterklasse
   
  }
  public static void ausgeben(Fussballspieler arr2[]){
	  for (int i=0; i< arr2.length; i++)
	  System.out.println(arr2[i].toString());  
  }
  // Polymorphie, da erst zur Laufzeit entschieden wird, welche Methode (toString) aufgerufen wird, Methode in Oberklasse und Unterklasse vorhanden  
  //Methode wird in den Unterklassen überschrieben, aber der Methodeninhalt der Klasse Fussballspieler wird übernommen 
 
 public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	
  }                                               
}",-
Agung,"Naufal Radhana",n.agung@campus.tu-berlin.de,Beendet,"24. Juni 2021  17:05","27. Juni 2021  23:59","3 Tage 6 Stunden","14,49",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {10. <sub>int} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){

     // Arrays definieren
     Fussballspieler[] Stars = {
          new Torwart(""Stuart"", 24, 1.3),
          new Abwehrspieler(""Hoenes"", 31, 0.2),
          new Abwehrspieler(""Eriksson"", 22, 0.4),
          new Abwehrspieler(""Drews"", 28, 0.0),
          new Abwehrspieler(""Andio"", 24, 0.1),
          new Mittelfeldspieler(""Wijsman"", 27, 52.3),
          new Mittelfeldspieler(""Stutte"", 33, 78.8),
          new Mittelfeldspieler(""Andres"", 26, 49.9),
          new Sturmspieler(""Jankowski"", 22, 2.3),
          new Sturmspieler(""Zinho"", 31, 0.6),
          new Sturmspieler(""Almualim"", 28, 1.2)
     };

     Fussballspieler[] Stripes = {
          new Torwart(""Thiess"", 32, 0.8),
          new Abwehrspieler(""Honne"", 25, 0.1),
          new Abwehrspieler(""Selvig"", 33, 0.3),
          new Abwehrspieler(""Wisie"", 29, 0.1),
          new Mittelfeldspieler(""Hendricks"", 30, 69.4),
          new Mittelfeldspieler(""Azim"", 27, 56.3),
          new Mittelfeldspieler(""Larsson"", 19, 74.5),
          new Mittelfeldspieler(""Kennedy"", 21, 45.9),
          new Sturmspieler(""Lim"", 22, 0.6),
          new Sturmspieler(""Adriansky"", 25, 1.2),
          new Sturmspieler(""Fedorov"", 28, 0.8)
     };

    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(Stripes));
    System.out.println(""roteKartenZaehlen() wird nur fuer abwehrspieler aufgerufen\n"");
    int funny = (int)Math.random()*10;
    Stars[funny].geburtstagFeiern();
    ausgeben(Stars);
    System.out.println(""ausgeben() ruft fuer alle spieler in seiner jeweiligen Rolle an\n"");
    fussballspielen(Stars, Stripes);
  }

  public static double roteKartenZaehlen(Fussballspieler[] s){
    double rk=0;
    for(Fussballspieler i : s){
      if (i instanceof Abwehrspieler){
        Abwehrspieler p = (Abwehrspieler)i;
        rk += p.getRoteKarte();
        /* */
    }
    }
    return rk;
   /* bitte implementieren */
  }
  public static void ausgeben(Fussballspieler[] t){
    for(Fussballspieler y : t){
      System.out.println(y);
    }
    /* ruft füre alle spieler an auch in seiner jeweiligen Rolle*/
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double go1=0.0;
    double go2=0.0;
    double re1=0.0;
    double re2=0.0;
    double ps1=0.0;
    double ps2=0.0;
    double sc1=0.0;
    double sc2=0.0;
    int a=0;
    int b=0;
    int c=0;
    int d=0;
    for(Fussballspieler w : mannschaft1){
      if (w instanceof Torwart){
        Torwart n = (Torwart)w;
         go1 += n.getGegentor();
    }
      if (w instanceof Abwehrspieler){
        Abwehrspieler v = (Abwehrspieler)w;
         re1 += v.getRoteKarte();
    }
    if (w instanceof Mittelfeldspieler){
      Mittelfeldspieler h = (Mittelfeldspieler)w;
       ps1 += h.getPaesse();
  }
  if (w instanceof Sturmspieler){
    Sturmspieler f = (Sturmspieler)w;
     sc1 += f.getTore();
}
}
for(Fussballspieler u : mannschaft2){
  if (u instanceof Torwart){
    Torwart e = (Torwart)u;
     go2 += e.getGegentor();
}
  else if (u instanceof Abwehrspieler){
    Abwehrspieler l = (Abwehrspieler)u;
     re2 += l.getRoteKarte();
}
else if (u instanceof Mittelfeldspieler){
  Mittelfeldspieler t = (Mittelfeldspieler)u;
   ps2 += t.getPaesse();
}
else if (u instanceof Sturmspieler){
Sturmspieler m = (Sturmspieler)u;
 sc2 += m.getTore();
}
}
if(go2>go1){
  a+=1;
}
if(re2>re1){
  b+=1;
}
if(ps1>ps2){
  c+=1;
}
if(sc1>sc2){
  d+=1;
}
int res = a+b+c+d;
switch (res) {
    case 0: System.out.println(""Mannschaft 2 gewinnt!\n""); break;
    case 1: System.out.println(""Unentschieden!\n""); break;
    case 2: System.out.println(""Unentschieden!\n""); break;
    case 3: System.out.println(""Unentschieden!\n""); break;
    case 4: System.out.println(""Mannschaft 1 gewinnt!\n""); break;
    default: break;
}
}
}",//
Krebs,"Florian Anselm",florian.krebs@campus.tu-berlin.de,Beendet,"25. Juni 2021  10:54","27. Juni 2021  23:59","2 Tage 13 Stunden","14,21","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",extends,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft {
	
  public static void main(String[] args){
      
     // Arrays definieren
	 Fussballspieler[11] deutschland ;
    
	 
	 spieler1 = new Torwart(""Neuer"",28,5);
	 spieler2 = new Abwehrspieler(""Rüdiger"",24,0.1);
	 spieler5 = new Abwehrspieler(""Hummels"",29,0);
	 spieler4 = new Abwehrspieler(""Ginter"",23,0.001);
	 spieler20 = new Mittelfeldspieler(""Gosens"",20,30);
	 spieler8 = new Mittelfeldspieler(""Kroos"",29,70);
	 spieler18 = new Mittelfeldspieler(""Goretzka"",24,50);
	 spieler6 = new Mittelfeldspieler(""Kimmich"",20,40);
	 spieler25 = new Mittelfeldspieler(""Müller"",30,60);
	 spieler7 = new Mittelfeldspieler(""Havertz"",21,30);
	 spieler22 = new Sturmspieler(""Klose"",35,2);
	 
	 f1 = new Torwart(""lloris"",28,5);
	 f2 = new Abwehrspieler(""Pavard"",24,1);
	 f5 = new Abwehrspieler(""Varane"",29,0);
	 f4 = new Abwehrspieler(""Kimpembe"",23,1);
	 f20 = new Mittelfeldspieler(""Hernandez"",20,30);
	 f8 = new Mittelfeldspieler(""Pogba"",29,70);
	 f18 = new Mittelfeldspieler(""Kante"",24,50);
	 f6 = new Mittelfeldspieler(""Rabiot"",20,40);
	 f25 = new Strumspieler(""Griezmann"",30,1);
	 f7 = new Sturmspieler(""Benzema"",21,1);
	 f22 = new Sturmspieler(""Mbappe"",19,1);
	 
	 deutschland[0]= spieler1;
	 deutschland[1]= spieler2;
	 deutschland[2]= spieler5;
	 deutschland[3]= spieler4;
	 deutschland[4]= spieler20;
	 deutschland[5]= spieler8;
	 deutschland[6]= spieler18;
	 deutschland[7]= spieler6;
	 deutschland[8]= spieler25;
	 deutschland[9]= spieler7;
	 deutschland[10]= spieler22;
	 
	 frankreich[0]= spieler1;
	 frankreich[1]= spieler2;
	 frankreich[2]= spieler5;
	 frankreich[3]= spieler4;
	 frankreich[4]= spieler20;
	 frankreich[5]= spieler8;
	 frankreich[6]= spieler18;
	 frankreich[7]= spieler6;
	 frankreich[8]= spieler25;
	 frankreich[9]= spieler7;
	 frankreich[10]= spieler22;
	 
	 spieler22.geburtstagFeiern();
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    //fussballspielen(................);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
	  double summeRoteKarten=0;
	  for (i=0;i<11;i++){
		  if (mannschaft[i] instanceof Abwehrspieler){
		  	summeRoteKarten += mannschaft[i].getAnzahlRoteKartenJeSpiel();
		  }
	  }
  }
  
  public static void ausgeben(Fussballspieler[] mannschaft){
	  for (i=0;i<11;i++){
		  mannschaft[i].toString();
	  }
   
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
  }
}",//
Mirrafati,"Nima Lucius",n.mirrafati@campus.tu-berlin.de,Beendet,"25. Juni 2021  14:35","27. Juni 2021  23:59","2 Tage 9 Stunden","6,71","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",extends,"Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
    Fussballspieler[] m1 = new Fussballspieler[11];
    Fussballspieler[] m2 = new Fussballspieler[11];
    m1[0] = new Torwart(""Neuer"", 32, 0.2);
    m1[1] = new Abwehrspieler(""Hummels"", 30, 0.6);
    m1[2] = new Abwehrspieler(""Ruediger"", 26, 0.4);
    m1[3] = new Abwehrspieler(""Vincent"", 20, 0.2);
    m1[4] = new Mittelfeldspieler(""Kroos"", 30, 100.2);
    m1[5] = new Mittelfeldspieler(""Kimmich"", 28, 250.6);
    m1[6] = new Mittelfeldspieler(""Reus"", 32, 125.6);
    m1[7] = new Mittelfeldspieler(""Max"", 19, 300.6);
    m1[8] = new Sturmspieler(""Mueller"", 30, 0.6);
    m1[9] = new Sturmspieler(""Goretzka"", 22, 0.8);
    m1[10] = new Sturmspieler(""Robben"", 34, 0.4);

    m2[0] = new Torwart(""Keeper"", 34, 0.4);
    m2[1] = new Abwehrspieler(""Torbjorn"", 36, 0.1);
    m2[2] = new Abwehrspieler(""Bastion"", 26, 0.4);
    m2[3] = new Abwehrspieler(""Vincenz"", 20, 0.6);
    m2[4] = new Mittelfeldspieler(""Junkrat"", 28, 80.6);
    m2[5] = new Mittelfeldspieler(""Mccree"", 36, 200.2);
    m2[6] = new Mittelfeldspieler(""Roadhog"", 24, 180.6);
    m2[7] = new Mittelfeldspieler(""Echo"", 20, 222.6);
    m2[8] = new Sturmspieler(""Genji"", 24, 0.8);
    m2[9] = new Sturmspieler(""Hanzo"", 24, 0.8);
    m2[10] = new Sturmspieler(""Reinhardt"", 38, 0.2);

    m1[2].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(m1));
    System.out.println();
    ausgeben(m1);
    System.out.println();
    fussballspielen(m1, m2);
  }

  public static double roteKartenZaehlen(Fussballspieler[] a) {
    double r;
    for (int i = 0; i < a.length; i++) {
      if (a[i] instanceof Abwehrspieler) {
        r += a[i].getAnzahlRoteKartenJeSpiel();
      }
    }
    return r;
    //da getAnzahlRoteKartenJeSpiel eine Methode einer speziellen Unterklasse (Abwehrspieler) ist, wird sie direkt aufgerufen
  }
  public static void ausgeben(Fussballspieler[] a){
    for (int i = 0; i < a.length; i++) {
      a[i].toString();
      //Bei gleichnamigen Methoden wird laut VL bei Ausführung die Methode der Unterklasse ausgeführt. (solange man nicht super davor schreibt)
    }
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double s1 = 0;
    double s2 = 0;
    for (int i = 0; i < 11; i++) {
      if (mannschaft1[i] instanceof Torwart) {
        s1 -= mannschaft1[i].getGegentoreJeSpiel();
      }
      else if (mannschaft1[i] instanceof Abwehrspieler) {
        s1 -= mannschaft1[i].getAnzahlRoteKartenJeSpiel();
      }
      else if (mannschaft1[i] instanceof Mittelfeldspieler) {
        s1 += mannschaft1[i].getPaesseJeSpiel();
      }
      else if (mannschaft1[i] instanceof Sturmspieler) {
        s1 += mannschaft1[i].getToreJeSpiel();
      }
    }
    for (int i = 0; i < 11; i++) {
      if (mannschaft2[i] instanceof Torwart) {
        s2 -= mannschaft2[i].getGegentoreJeSpiel();
      }
      else if (mannschaft2[i] instanceof Abwehrspieler) {
        s2 -= mannschaft2[i].getAnzahlRoteKartenJeSpiel();
      }
      else if (mannschaft2[i] instanceof Mittelfeldspieler) {
        s2 += mannschaft2[i].getPaesseJeSpiel();
      }
      else if (mannschaft2[i] instanceof Sturmspieler) {
        s2 += mannschaft2[i].getToreJeSpiel();
      }
    }
    if (s1 < s2) {
      System.out.println(""Mannschaft 2 gewinnt!"");
    }
    else if (s1 > s2) {
      System.out.println(""Mannschaft 1 gewinnt!"");
    }
    else if (s1 == s2) {
      System.out.println(""Unentschieden!"");
    }
  }
}",-
Gorny,Leonid,l.gorny@campus.tu-berlin.de,Beendet,"25. Juni 2021  15:42","27. Juni 2021  23:59","2 Tage 8 Stunden","5,96",Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Zeile 6,7 : super(); müsste vor x=0; stehen",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {13. <sub>spannweite:} Dropzone 8 -> {10. <sub>int} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {12. <sub>schnabelfarbe:} Dropzone 11 -> {3. <sub>String} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {15. <sub>kannSprechen:} Dropzone 16 -> {16. <sub>boolean} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {10. <sub>int} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){

     // Arrays definieren
     Fussballspieler[] mannschaft1 = new Fussballspieler[11];
     Fussballspieler bernd = new Torwart(""bernd"", 25, 1.2);
     Fussballspieler hans = new Abwehrspieler(""hans"", 29, 0.6);
     Fussballspieler diego = new Abwehrspieler(""diego"", 18, 0.1);
     Fussballspieler karl = new Abwehrspieler(""karl"", 27, 0.7);
     Fussballspieler mustafa = new Mittelfeldspieler(""mustafa"", 19, 20);
     Fussballspieler ahmed = new Mittelfeldspieler(""ahmed"", 25, 34);
     Fussballspieler tarik = new Mittelfeldspieler(""tarik"", 28, 37);
     Fussballspieler franchesko = new Sturmspieler(""franchesko"", 16, 5);
     Fussballspieler tim = new Sturmspieler(""tim"", 23, 3);
     Fussballspieler tom = new Sturmspieler(""tom"", 13, 4);
     Fussballspieler max = new Sturmspieler(""max"", 26, 3);
mannschaft1[0]= bernd;
mannschaft1[1]=hans;
mannschaft1[2]=diego;
mannschaft1[3]=karl;
mannschaft1[4]=mustafa;
mannschaft1[5]=ahmed;
mannschaft1[6]=tarik;
mannschaft1[7]=franchesko;
mannschaft1[8]=tim;
mannschaft1[9]=tom;
mannschaft1[10]=max;


Fussballspieler[] mannschaft2 = new Fussballspieler[11];
Fussballspieler hauke = new Torwart(""hauke"", 25, 1.1);
Fussballspieler ali = new Abwehrspieler(""ali"", 19, 1.4);
Fussballspieler justin= new Abwehrspieler(""justin"", 26, 1.3);
Fussballspieler benni= new Abwehrspieler(""benni"", 28, 1.4);
Fussballspieler mohamed= new Abwehrspieler(""mohamed"", 25, 1.4);
Fussballspieler korean= new Mittelfeldspieler(""korean"", 17, 23);
Fussballspieler curtis=new Mittelfeldspieler(""curtis"", 28, 26);
Fussballspieler sasuke= new Mittelfeldspieler(""sasuke"", 19, 14);
Fussballspieler naruto=new Sturmspieler(""naruto"", 29, 3);
Fussballspieler takashi=new Sturmspieler(""takashi"", 31, 4);
Fussballspieler madeira=new Sturmspieler(""madeira"", 40, 10);
mannschaft2[0]=hauke;
mannschaft2[1]=ali;
mannschaft2[2]=justin;
mannschaft2[3]=benni;
mannschaft2[4]=mohamed;
mannschaft2[5]=korean;
mannschaft2[6]=curtis;
mannschaft2[7]=sasuke;
mannschaft2[8]=naruto;
mannschaft2[9]=takashi;
mannschaft2[10]=madeira;

madeira.geburtstagFeiern();




//Werte einfügen
System.out.println(""Rote Karten mannschaft 1: "" + TestMannschaft.roteKartenZaehlen(mannschaft1));
System.out.println(""Rote Karten mannschaft 2: "" + TestMannschaft.roteKartenZaehlen(mannschaft2));
TestMannschaft.ausgeben(mannschaft1);
TestMannschaft.ausgeben(mannschaft2);
fussballspielen(mannschaft1, mannschaft2);

}

public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
  double karten = 0;
  for(int i=0; i<mannschaft.length; i++){
    if(mannschaft[i] instanceof Abwehrspieler){
      karten = karten + ((Abwehrspieler)mannschaft[i]).getKarten();
      ((Fussballspieler)mannschaft[i]).geburtstagFeiern();
    }
  }
return karten;
/* bitte implementieren */
}
public static void ausgeben(Fussballspieler[] mannschaft){
for(int i =0; i<mannschaft.length; i++){
  System.out.println(mannschaft[i]);
}
/* bitte implementieren */
}
public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
  double paesse1 = 0;
  double paesse2 = 0;
  for(int i=0; i<mannschaft1.length; i++){

    if( mannschaft1[i] instanceof Mittelfeldspieler){
    paesse1 = paesse1 +  ((Mittelfeldspieler)mannschaft1[i]).getPaesse();

    }
    if( mannschaft2[i] instanceof Mittelfeldspieler){
      paesse2 = paesse2 + ((Mittelfeldspieler)mannschaft2[i]).getPaesse();
    }}
    if(paesse1>paesse2){
      System.out.println(""Mannschaft 1 gewinnt!"");
    }
      if(paesse1<paesse2){
        System.out.println(""Mannschaft 2 gewinnt!"");
      }
      if(paesse1==paesse2){
        System.out.println(""Unentschieden!"");
      }
}
}",-
Venn,"Arthur Raymond",venn@campus.tu-berlin.de,Beendet,"25. Juni 2021  17:34","27. Juni 2021  23:59","2 Tage 6 Stunden","10,51","Zeile 7 : super(); müsste this(); heißen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Es wird die Methode der Super-Klasse aufgerufen","Dies ruft innerhalb einer Superklasse den Konstruktor einer Subklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",Java,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
	 
    // Arrays definieren
    Fussballspieler[] mannschaft1 = new Fussballspieler[11];
	Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	  
    //Werte einfügen
	mannschaft1[0] = new Torwart(""Maxim"", 33, 4.1);
	mannschaft1[1] = new Abwehrspieler(""Jan"", 18, 0.01);
	mannschaft1[2] = new Abwehrspieler(""Leon"", 21, 0.05);
	mannschaft1[3] = new Abwehrspieler(""Jack"", 18, 0.01);
	mannschaft1[4] = new Mittelfeldspieler(""Timi"", 25, 78);
	mannschaft1[5] = new Mittelfeldspieler(""Pedros"", 47, 34);
	mannschaft1[6] = new Mittelfeldspieler(""Estefano"", 33, 67);
	mannschaft1[7] = new Mittelfeldspieler(""Lucas"", 25, 14);
	mannschaft1[8] = new Sturmspieler(""Maycolo"", 22, 1);
	mannschaft1[9] = new Sturmspieler(""Benjamin"", 22, 1);
	mannschaft1[10] = new Sturmspieler(""Frank"", 24, 0);
	
	mannschaft2[0] = new Torwart(""Nike"", 20, 1);
	mannschaft2[1] = new Abwehrspieler(""Collin"", 35, 0.0);
	mannschaft2[2] = new Abwehrspieler(""Picu"", 40, 2.0);
	mannschaft2[3] = new Abwehrspieler(""Federer"", 36, 6.0);
	mannschaft2[4] = new Mittelfeldspieler(""Harlow"", 26, 12);
	mannschaft2[5] = new Mittelfeldspieler(""Lech"", 18, 12);
	mannschaft2[6] = new Mittelfeldspieler(""Herman"", 26, 24);
	mannschaft2[7] = new Mittelfeldspieler(""Klaus"", 22, 24);
	mannschaft2[8] = new Mittelfeldspieler(""Lukas"", 18, 55);
	mannschaft2[9] = new Sturmspieler(""Marion"", 16, 0);
	mannschaft2[10] = new Sturmspieler(""Gael"", 19, 4);
	
	// Geburtstag feiern
	mannschaft2[5].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
    System.out.println();
    ausgeben(mannschaft1);
    System.out.println();
    fussballspielen(mannschaft1, mannschaft2);			
  }
	//da wir vorher überprüfen, ob der Spieler ein Abwehrspieler ist,
	//können wir die entsprechende Methode für den Abwehrspieler aufrufen.
  public static double roteKartenZaehlen(Fussballspieler[] spieler){
    double roteKarten = 0.0;
	for(int i=0; i<spieler.length; i++){
		if(spieler[i] instanceof Abwehrspieler) {
			roteKarten += ((Abwehrspieler) spieler[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
  }
	//Da wird die entsprechende Methode (toString) automatisch
	//aufgerufen (Polymorphie)
  public static void ausgeben(Fussballspieler[] spieler){
	for(int i=0; i<spieler.length; i++){
		System.out.print(spieler[i]);
	}
  }
  public static int tore(Fussballspieler[] mannschaft) {
	int tore = 0;
	for(int i=0; i<mannschaft.length; i++){
		if(mannschaft[i] instanceof Sturmspieler) { 
			tore += ((Sturmspieler)mannschaft[i]).getToreJeSpiel();
		}
	}
	return tore;
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int tore1 = tore(mannschaft1);
	int tore2 = tore(mannschaft2);
	if(tore1>tore2) {
		System.out.println(""Mannschaft 1 gewinnt!"");
	} else if (tore1<tore2) {
		System.out.println(""Mannschaft 2 gewinnt!"");
	} else {
		System.out.println(""Unentschieden!"");
	}
  }
}",//
"Van den Wyenbergh",Timo,vandenwyenbergh@campus.tu-berlin.de,Beendet,"26. Juni 2021  13:17","27. Juni 2021  23:42","1 Tag 10 Stunden","11,50","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Super-Klasse aufgerufen",Java,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{

Fussballspieler[] team = new Fussballspieler[11];



    public static void main(String[] args) {


        // Arrays definieren
        TestMannschaft heim = new TestMannschaft();
        heim.team[0] = new Torwart(""T"", 13, 3);

        TestMannschaft aus = new TestMannschaft();
        aus.team[0] = new Torwart(""T"", 13, 4);

        for (int i = 1; i < 9; i++) {
            heim.team[i] = new Abwehrspieler(""T"", 13, 2);
        }
        heim.team[9] = new Mittelfeldspieler(""T"", 13, 1);

        heim.team[10] = new Sturmspieler(""T"", 13, 1);

        aus.team[0] = new Torwart(""T"", 13, 5);

        for (int i = 1; i < 9; i++) {
            aus.team[i] = new Abwehrspieler(""T"", 13, 2);
        }
        aus.team[9] = new Mittelfeldspieler(""T"", 13, 1);

        aus.team[10] = new Sturmspieler(""T"", 13, 4);
        aus.team[10].geburtstagFeiern();
        heim.team[10].geburtstagFeiern();


        //Werte einfügen

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(heim.team));
        System.out.println();
        ausgeben(heim.team);
        System.out.println();
        fussballspielen(heim.team,aus.team);
    }

    public static double roteKartenZaehlen(Fussballspieler[] team) {
        Abwehrspieler[] abwehr = new Abwehrspieler[11];
        int x = 0;
        double rot = 0;
        for (int i = 0; i < team.length; i++) {
            if (team[i] instanceof Abwehrspieler) {
                abwehr[x] = (Abwehrspieler) team[i];
                x++;
            }
        }
        for (int i = 0; i < x; i++) {
            rot = rot + abwehr[i].getAnzahlRoteKartenJeSpiel();
        }


        return rot;
    }

    public static void ausgeben(Fussballspieler[] team) {
        for (int i = 0; i < team.length; i++) {
            System.out.println(team[i].toString());
        }


    }

    /* bitte implementieren */


    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
        int x1 = 0;
        int x2 = 0;
        int x3 = 0;
        int x4 = 0;

        double rot = 0;
        double rot2 = 0;
        Abwehrspieler[] abwehr1 = new Abwehrspieler[11];
        Abwehrspieler[] abwehr2 = new Abwehrspieler[11];
        Torwart[] Tor1 = new Torwart[11];
        Torwart[] Tor2 = new Torwart[11];
        Mittelfeldspieler[] Mitte1 = new Mittelfeldspieler[11];
        Mittelfeldspieler[] Mitte2 = new Mittelfeldspieler[11];
        Sturmspieler[] Sturm1 = new Sturmspieler[11];
        Sturmspieler[] Sturm2 = new Sturmspieler[11];


        for (int i = 0; i < mannschaft1.length; i++) {
            if (mannschaft1[i] instanceof Abwehrspieler) {
                abwehr1[x1] = (Abwehrspieler) mannschaft1[i];
                x1++;
            }
            if (mannschaft1[i] instanceof Mittelfeldspieler) {
                Mitte1[x2] = (Mittelfeldspieler) mannschaft1[i];
                x2++;
            }
            if (mannschaft1[i] instanceof Sturmspieler) {
                Sturm1[x3] = (Sturmspieler) mannschaft1[i];
                x3++;
            }
            if (mannschaft1[i] instanceof Torwart) {
                Tor1[x4] = (Torwart) mannschaft1[i];
                x4++;
            }
        }
        for (int i = 0; i < x1; i++) {
            rot = rot + abwehr1[i].getAnzahlRoteKartenJeSpiel();
        }
        for (int i = 0; i < x2; i++) {
            rot = rot + Mitte1[i].getPaesseJeSpiel();
        }
        for (int i = 0; i < x3; i++) {
            rot = rot + Sturm1[i].getToreJeSpiel();
        }
        for (int i = 0; i < x4; i++) {
            rot = rot + Tor1[i].getGegentoreJeSpiel();
        }
        x1 = 0;
        x2 = 0;
        x3 = 0;
        x4 = 0;


        //frsdfffffffffffffffffffffffffffffffffff
        for (int i = 0; i < mannschaft2.length; i++) {
            if (mannschaft2[i] instanceof Abwehrspieler) {
                abwehr2[x1] = (Abwehrspieler) mannschaft2[i];
                x1++;
            }
            if (mannschaft2[i] instanceof Mittelfeldspieler) {
                Mitte2[x2] = (Mittelfeldspieler) mannschaft2[i];
                x2++;
            }
            if (mannschaft2[i] instanceof Sturmspieler) {
                Sturm2[x3] = (Sturmspieler) mannschaft2[i];
                x3++;
            }
            if (mannschaft2[i] instanceof Torwart) {
                Tor2[x4] = (Torwart) mannschaft2[i];
                x4++;
            }
        }
        for (int i = 0; i < x2; i++) {
            rot2 = rot2 + abwehr2[i].getAnzahlRoteKartenJeSpiel();
        }
        for (int i = 0; i < x2; i++) {
            rot2 = rot2 + Mitte2[i].getPaesseJeSpiel();
        }
        for (int i = 0; i < x3; i++) {
            rot2 = rot2 + Sturm2[i].getToreJeSpiel();
        }
        for (int i = 0; i < x4; i++) {
            rot2 = rot2 + Tor2[i].getGegentoreJeSpiel();
        }
        if(rot2>rot){
            System.out.println(""Mannschaft 1 gewinnt!"");
        }
        if(rot2<rot){
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
        if(rot2==rot){
            System.out.println(""Unentschieden!"");
        }


    }
}",-
Heritz,Faris,f.heritz@campus.tu-berlin.de,Beendet,"26. Juni 2021  14:55","27. Juni 2021  23:59","1 Tag 9 Stunden","4,86",Object,"die Klasse Hund erbt von der Klasse Tier",instanceof,"Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Zeile 1 : Klasse A hat keinen Konstruktor","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Ruffo,Max,ruffo@campus.tu-berlin.de,Beendet,"26. Juni 2021  15:32","27. Juni 2021  23:59","1 Tag 8 Stunden","6,69","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.",Object,"die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
    Fussballspieler[] deutschland = new Fussballspieler[5];
    Fussballspieler[] suedkorea = new Fussballspieler[5];
    deutschland[0] = new Torwart(""Neuer"", 20, 1.2);
    deutschland[1] = new Abwehrspieler(""Hector"", 21, 0.05);
    deutschland[2] = new Abwehrspieler(""Hummels"", 22, 0.02);
    deutschland[3] = new Mittelfeldspieler(""Goretzka"", 29, 45);
    deutschland[4] = new Sturmspieler(""Werner"", 30, 0.3);
    suedkorea[0] = new Torwart(""Cho"", 30, 0.9); 
    suedkorea[1] = new Abwehrspieler(""Lee"", 29, 0.03);
    suedkorea[2] = new Mittelfeldspieler(""Jang"", 23, 55);
    suedkorea[3] = new Sturmspieler(""Son"", 21, 0.4);
    suedkorea[4] = new Sturmspieler(""Koo"", 20, 0.5);
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben();
    System.out.println();
    fussballspielen(deutschland,suedkorea);
  }

  public static double roteKartenZaehlen(Fussballspieler[] a){
   int r=0;
    for(int i=0;i<a.length;i++){
      return r;
   }
   return r;
    
   /* bitte implementieren */
  }
  public static void ausgeben(){
    
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int zahl = (int)(Math.random() * 4 + 1);
    if(zahl==1){
      System.out.println(""Mannschaft 1 gewinnt!""); 
    }else if(zahl==2){
      System.out.println("" Unentschieden!"" );
    }else{
      System.out.println(""Mannschaft 2 gewinnt!"");
    }  /* bitte implementieren */
  }
}",//
Theo,Yovan,yovan.theo@campus.tu-berlin.de,Beendet,"26. Juni 2021  17:20","27. Juni 2021  23:59","1 Tag 6 Stunden","14,75","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {
	
	public static void main (String[] args) {
		Fussballspieler[] manchester = new Fussballspieler[11];
		Fussballspieler[] bayern = new Fussballspieler[11];
		manchester[0] = new Torwart(""Steffen"",24,3);
		manchester[1] = new Abwehrspieler(""Walker"",27,0);
		manchester[2] = new Abwehrspieler(""Dias"",28,1);
		manchester[3] = new Abwehrspieler(""Mendy"",30,0);
		manchester[4] = new Mittelfeldspieler(""Gundogan"",31,6);
		manchester[5] = new Mittelfeldspieler(""Zinchenko"",22,4);
		manchester[6] = new Mittelfeldspieler(""Silva"",32,5);
		manchester[7] = new Mittelfeldspieler(""Mahrez"",25,9);
		manchester[8] = new Sturmspieler(""Sterling"",26,1);
		manchester[9] = new Sturmspieler(""Jesus"",24,1);
		manchester[10] = new Sturmspieler(""Torres"",29,1);
		bayern[0] = new Torwart(""Neuer"",27,3);
		bayern[1] = new Abwehrspieler(""Boateng"",27,1);
		bayern[2] = new Abwehrspieler(""Davies"",28,0);
		bayern[3] = new Abwehrspieler(""Pavard"",30,0);
		bayern[4] = new Mittelfeldspieler(""Kimmich"",31,6);
		bayern[5] = new Mittelfeldspieler(""Martinez"",22,4);
		bayern[6] = new Mittelfeldspieler(""Dantas"",32,5);
		bayern[7] = new Mittelfeldspieler(""Tolisso"",25,9);
		bayern[8] = new Sturmspieler(""Gnabry"",26,1);
		bayern[9] = new Sturmspieler(""Souza"",24,1);
		bayern[10] = new Sturmspieler(""Lewandowski"",29,1);
		roteKartenZaehlen(bayern);
		roteKartenZaehlen(manchester);
		ausgeben(bayern);
		fussballspielen(bayern, manchester);
	}
	
	public static double roteKartenZaehlen(Fussballspieler[] mannschaft) {
		double summe = 0;
		for(int i = 0; i<mannschaft.length; i++) {
			if (mannschaft[i] instanceof Abwehrspieler) {
				summe += ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return summe;
	}
	
	public static void ausgeben(Fussballspieler[] mannschaft) {
		for(int i = 0; i<mannschaft.length; i++) {
			System.out.println(mannschaft[i].toString());
		}
	}
	
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double punkte1 = 0;
		double punkte2 = 0;
		for(int i = 0; i<mannschaft1.length; i++) {
			if (mannschaft1[i] instanceof Sturmspieler) {
				punkte1 += ((Sturmspieler) mannschaft1[i]).getToreJeSpiel();
			}
		}
		for(int i = 0; i<mannschaft2.length; i++) {
			if (mannschaft2[i] instanceof Sturmspieler) {
				punkte2 += ((Sturmspieler) mannschaft2[i]).getToreJeSpiel();
			}
		}
		if (punkte1 > punkte2) {
			System.out.println(mannschaft1+"" gewinnt!"");
		} else if (punkte2 > punkte1) {
			System.out.println(mannschaft2+"" gewinnt!"");
		} else if (punkte1 == punkte2)
			System.out.println(""Unentschieden!"");
	}
}",//
Xu,Lili,l.xu@campus.tu-berlin.de,Beendet,"26. Juni 2021  18:15","27. Juni 2021  23:01","1 Tag 4 Stunden","13,00",Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

import jdk.jshell.spi.ExecutionControl;

public class TestMannschaft{
    public static void main(String[] args){

        // Arrays definieren
        Fussballspieler[] deutschland = new Fussballspieler[11];
        Fussballspieler[] niederlande = new Fussballspieler[11];

        //Werte einfügen
        deutschland[0] = new Torwart(""neuer"", 30, 2);
        deutschland[1] = new Abwehrspieler(""ginter"", 21, 0.1);
        deutschland[2] = new Abwehrspieler(""hummels"", 27, 0.2);
        deutschland[3] = new Abwehrspieler(""lahm"", 34, 0.05);
        deutschland[4] = new Abwehrspieler(""ruediger"", 24, 0.12);
        deutschland[5] = new Mittelfeldspieler(""gosens"", 26, 75);
        deutschland[6] = new Mittelfeldspieler(""kroos"", 32, 108);
        deutschland[7] = new Mittelfeldspieler(""guendogan"", 28, 99);
        deutschland[8] = new Mittelfeldspieler(""kimmich"", 24, 112);
        deutschland[9] = new Sturmspieler(""havertz"", 25, 2);
        deutschland[10] = new Sturmspieler(""gnabry"", 26, 3);

        niederlande[0] = new Torwart(""AA"", 21, 1);
        niederlande[1] = new Abwehrspieler(""BB"", 22, 0.2);
        niederlande[2] = new Abwehrspieler(""CC"", 23, 0.001);
        niederlande[3] = new Abwehrspieler(""DD"", 24, 1);
        niederlande[4] = new Mittelfeldspieler(""EE"", 25, 10);
        niederlande[5] = new Mittelfeldspieler(""FF"", 26, 103);
        niederlande[6] = new Mittelfeldspieler(""GG"", 27, 39);
        niederlande[7] = new Mittelfeldspieler(""HH"", 28, 78);
        niederlande[8] = new Sturmspieler(""II"", 29, 3.4);
        niederlande[9] = new Sturmspieler(""JJ"", 30, 2.2);
        niederlande[10] = new Sturmspieler(""KK"", 31, 2.6);

        deutschland[3].geburtstagFeiern();

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
        System.out.println();
        ausgeben(deutschland);
        System.out.println();
        fussballspielen(deutschland, niederlande);
    }

    public static double roteKartenZaehlen(Fussballspieler[] w) {
        double sum = 0;
        for (int i = 0; i < w.length; i++) {
            if (w[i] instanceof Abwehrspieler) {
                sum += ((Abwehrspieler)w[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return sum;
    }
    public static void ausgeben(Fussballspieler[] f){
        for(int j=0; j<f.length; j++) {
            System.out.println(f[j].toString());
        }
    }
    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
        double spielstaerke;
        spielstaerke = roteKartenZaehlen(mannschaft1) * -100 + passZ(mannschaft1)/50 + toreZ(mannschaft1) * 10 - gegenZ(mannschaft1);
        double spielstaerkee;
        spielstaerkee = roteKartenZaehlen(mannschaft2) * -100 + passZ(mannschaft2)/50 + toreZ(mannschaft2) * 10 - gegenZ(mannschaft2);

        System.out.println(spielstaerke);
        System.out.println(spielstaerkee);

        if(spielstaerke > spielstaerkee) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        }
        else if(spielstaerke < spielstaerkee) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
        else if (spielstaerke == spielstaerkee) {
            System.out.println(""Unentschieden!"");
        }

    }

    public static double passZ(Fussballspieler[] t) {
        double sum = 0;
        for (int i = 0; i < t.length; i++) {
            if (t[i] instanceof Mittelfeldspieler) {
                sum += ((Mittelfeldspieler) t[i]).getPaesseJeSpiel();
            }
        }
        return sum;
    }

    public static double toreZ(Fussballspieler[] u) {
        double sum = 0;
        for (int i = 0; i < u.length; i++) {
            if (u[i] instanceof Sturmspieler) {
                sum += ((Sturmspieler) u[i]).getToreJeSpiel();
            }
        }
        return sum;
    }

    public static double gegenZ(Fussballspieler[] s) {
        double sum = 0;
        for (int i = 0; i < s.length; i++) {
            if (s[i] instanceof Torwart) {
                sum += ((Torwart) s[i]).getGegentoreJeSpiel();
            }
        }
        return sum;
    }
}",-
Khatiwada,Aayush,khatiwada@campus.tu-berlin.de,Beendet,"26. Juni 2021  18:27","27. Juni 2021  23:59","1 Tag 5 Stunden","4,68","die Klasse Hund erbt von der Klasse Tier","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.",Object,extends,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Baumann,"Felix Elmar Gerd",f.baumann@campus.tu-berlin.de,Beendet,"26. Juni 2021  20:05","27. Juni 2021  23:59","1 Tag 3 Stunden","7,43",Object,"Zeile 7 : super(); müsste this(); heißen","die Klasse Hund erbt von der Klasse Tier","Dies zeigt an, dass der folgende Codeabschnitt superwichtig ist.",super,"Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {} Dropzone 3 -> {} Dropzone 4 -> {} Dropzone 5 -> {} Dropzone 6 -> {} Dropzone 7 -> {} Dropzone 8 -> {} Dropzone 9 -> {} Dropzone 10 -> {} Dropzone 11 -> {} Dropzone 12 -> {} Dropzone 13 -> {} Dropzone 14 -> {} Dropzone 15 -> {} Dropzone 16 -> {} Dropzone 17 -> {} Dropzone 18 -> {} Dropzone 19 -> {} Dropzone 20 -> {} Dropzone 21 -> {} Dropzone 22 -> {}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
    Fussballspieler spieler1 = new Torwart(""Schwolow"", 29, 0.1);
    Fussballspieler spieler2 = new Abwehrspieler(""Netz"", 18, 0.2);
    Fussballspieler spieler3 = new Abwehrspieler(""Stark"", 26, 0.98);
    Fussballspieler spieler4 = new Abwehrspieler(""Dardai"", 19, 0.5);
    Fussballspieler spieler5 = new Abwehrspieler(""Zeefuik"", 23, 0.99);
    Fussballspieler spieler6 = new Mittelfeldspieler(""Tousart"", 24, 50.2);
    Fussballspieler spieler7 = new Mittelfeldspieler(""Maier"", 22, 60.1);
    Fussballspieler spieler8 = new Mittelfeldspieler(""Cunha"", 22, 1.1);
    Fussballspieler spieler9 = new Sturmspieler(""Piatek"", 25, 1000.2);
    Fussballspieler spieler10 = new Sturmspieler(""Redan"", 20, 0.5);
    Fussballspieler spieler11 = new Sturmspieler(""Lukebakio"", 23, 1.5);

    // B-Elf
    Fussballspieler spieler22 = new Torwart(""Koerber"", 24, 0.2);
    Fussballspieler spieler12 = new Abwehrspieler(""Mittelstaedt"", 24, 0.9);
    Fussballspieler spieler13 = new Abwehrspieler(""Boyata"", 30, 0.1);
    Fussballspieler spieler14 = new Abwehrspieler(""Alderete"", 24, 0.7);
    Fussballspieler spieler15 = new Abwehrspieler(""Pekarik"", 34, 0.3);
    Fussballspieler spieler16 = new Mittelfeldspieler(""Serdar"", 24, 70.2);
    Fussballspieler spieler17 = new Mittelfeldspieler(""Ascacibar"", 24, 61.1);
    Fussballspieler spieler18 = new Mittelfeldspieler(""Prince"", 34, 20.8);
    Fussballspieler spieler19 = new Sturmspieler(""Cordoba"", 28, 0.0);
    Fussballspieler spieler20 = new Sturmspieler(""Dilrosun"", 23, 1.2);
    Fussballspieler spieler21 = new Sturmspieler(""Ngankam"", 20, 1.7);

    Fussballspieler[] mannschaft1 = {spieler1,spieler2,spieler3,spieler4,spieler5,spieler6,spieler7,spieler8,spieler9,spieler10,spieler11};
    Fussballspieler[] mannschaft2 = {spieler22,spieler12,spieler13,spieler14,spieler15,spieler16,spieler17,spieler18,spieler19,spieler20,spieler21};
    spieler1.geburtstagFeiern();
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft2));
    System.out.println();
    ausgeben(mannschaft1);
    System.out.println();
    fussballspielen(mannschaft1, mannschaft2);
  }
  // Wenn man eine Variable als Typ der Superklasse deklariert, dann kann man nur die public Methoden und Variablen der Superklasse durch die Variablen benutzen oder diese an einen Typ übergeben, von der man weiß, dass es der konkrete Typ ist.
  public static double roteKartenZaehlen(Fussballspieler[]mannschaft){
    double count = 0.0;
    for (Fussballspieler fussballspieler : mannschaft) {
        if (fussballspieler instanceof Abwehrspieler) {
            count=count+((Abwehrspieler)fussballspieler).getAnzahlRoteKarten();
        }
    }
    return count;
  }
  // Wenn man eine Variable als Typ der Superklasse deklariert, dann kann man nur die public Methoden und Variablen der Superklasse durch die Variablen benutzen oder diese an einen Typ übergeben, von der man weiß, dass es der konkrete Typ ist.
  public static void ausgeben(Fussballspieler[]mannschaft){
    
    for (Fussballspieler fussballspieler : mannschaft) {
        if (fussballspieler instanceof Torwart) {
            System.out.println((Torwart)fussballspieler);
        }
        else if (fussballspieler instanceof Abwehrspieler) {
            System.out.println((Abwehrspieler)fussballspieler);
        }
        else if (fussballspieler instanceof Mittelfeldspieler) {
            System.out.println((Mittelfeldspieler)fussballspieler);
        }
        else if (fussballspieler instanceof Sturmspieler) {
            System.out.println((Sturmspieler)fussballspieler);
        }
    }    
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double spielstaerke1 = 0.0;
    for (Fussballspieler fussballspieler : mannschaft1) {
        if (fussballspieler instanceof Torwart) {
            spielstaerke1=spielstaerke1-((Torwart)fussballspieler).getGegentoreJeSpiel();
        }
        else if (fussballspieler instanceof Abwehrspieler) {
            spielstaerke1=spielstaerke1-((Abwehrspieler)fussballspieler).getAnzahlRoteKarten();
        }
        else if (fussballspieler instanceof Mittelfeldspieler) {
            spielstaerke1=spielstaerke1+((Mittelfeldspieler)fussballspieler).getPaesseJeSpiel();
        }
        else if (fussballspieler instanceof Sturmspieler) {
            spielstaerke1=spielstaerke1+((Sturmspieler)fussballspieler).getToreJeSpiel();
        }
    }
    double spielstaerke2 = 0.0;
    for (Fussballspieler fussballspieler : mannschaft2) {
        if (fussballspieler instanceof Torwart) {
            spielstaerke2=spielstaerke2-((Torwart)fussballspieler).getGegentoreJeSpiel();
        }
        else if (fussballspieler instanceof Abwehrspieler) {
            spielstaerke2=spielstaerke2-((Abwehrspieler)fussballspieler).getAnzahlRoteKarten();
        }
        else if (fussballspieler instanceof Mittelfeldspieler) {
            spielstaerke2=spielstaerke2+((Mittelfeldspieler)fussballspieler).getPaesseJeSpiel();
        }
        else if (fussballspieler instanceof Sturmspieler) {
            spielstaerke2=spielstaerke2+((Sturmspieler)fussballspieler).getToreJeSpiel();
        }
    }
    if (spielstaerke1==spielstaerke2) {
        System.out.println(""Unentschieden!"");
    }
    else if (spielstaerke1>spielstaerke2) {
        System.out.println(""Mannschaft 1 gewinnt!"");
    }
    else {
        System.out.println(""Mannschaft 2 gewinnt!"");
    }
  }
}",-
Volkmann,Maximilian,m.volkmann@campus.tu-berlin.de,Beendet,"26. Juni 2021  20:17","27. Juni 2021  23:59","1 Tag 3 Stunden","7,21","Zeile 6,7 : super(); müsste vor x=0; stehen",extends,"Es wird die Methode der Sub-Klasse aufgerufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
    Fussballspieler [] deu = new Fussballspieler [11];
    Fussballspieler [] eng = new Fussballspieler[11];
    // Arrays definieren


    //Werte einfügen
    deu [0] = new Torwart(""Neuer"", 22, 2);
    deu [1] = new Abwehrspieler(""Lahm"", 35, 0);
    deu [2] = new Abwehrspieler(""Ruediger"", 25, 0.5);
    deu [3] = new Abwehrspieler(""Schweinsteiger"", 36, 1.2);
    deu [4] = new Abwehrspieler(""Hinz"", 24, 0.1);
    deu [5] = new Abwehrspieler(""Kunz"", 24, 0.2);
    deu [6] = new Mittelfeldspieler(""Ballack"", 38, 200);
    deu [7] = new Mittelfeldspieler(""Kros"", 28, 160);
    deu [8] = new Mittelfeldspieler(""Reus"", 27, 180);
    deu [9] = new Sturmspieler(""Mueller"", 35, 2);
    deu [10] = new Sturmspieler(""Klose"", 40, 3);

    eng [0] = new Torwart(""Reuen"", 22, 2);
    eng [1] = new Abwehrspieler(""Mahl"", 53, 1);
    eng [2] = new Abwehrspieler(""Regiduer"", 52, 1.5);
    eng [3] = new Abwehrspieler(""Schweini"", 63, 2.1);
    eng [4] = new Abwehrspieler(""Znih"", 42, 0.1);
    eng [5] = new Abwehrspieler(""Znuk"", 42, 0.2);
    eng [6] = new Mittelfeldspieler(""Barrack"", 83, 20);
    eng [7] = new Mittelfeldspieler(""Sork"", 82, 16);
    eng [8] = new Mittelfeldspieler(""Seur"", 72, 18);
    eng [9] = new Sturmspieler(""Johnson"", 53, 1);
    eng [10] = new Sturmspieler(""Selok"", 04, 2);

    eng[0].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deu));
    System.out.println();
    ausgeben(deu);
    System.out.println();
    fussballspielen(deu, eng);
  }

  public static double roteKartenZaehlen(Fussballspieler[] k){
    double a = 0;
    for(int i = 0; i < k.length; i++){
      if(k[i] instanceof Abwehrspieler){
      a += k[i].getAnzahlRoteKartenJeSpiel();
      //Polymorphie spielt keine Rolle
      //da die Einträge des Arrays Fussballspieler die Subklassen sind, werden die entsprechenden Methoden aufgerufen
    }
    }
    return a;
   /* bitte implementieren */
  }
  public static void ausgeben(Fussballspieler [] c){
    for(int i = 0; i < c.length; i++ ){
      c[i].toString();
    }
    //Polymorphie spielt keine Rolle
    //da die Einträge des Arrays Fussballspieler die Subklassen sind, werden die entsprechenden Methoden aufgerufen
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double p1 = 0;
    double t1 = 0;
    double p2 = 0;
    double t2 = 0;
    double g1 = 0;
    double g2 = 0;
    for(int i = 0; i < mannschaft1.length; i++){
      if(mannschaft1[i]  instanceof Mittelfeldspieler){
      p1 += mannschaft1[i].getPaesseJeSpiel();
      }
      if(mannschaft1[i]  instanceof Sturmspieler){
      t1 += mannschaft1[i].getToreJeSpiel();
      }
      if(mannschaft1[i]  instanceof Torwart){
      g1 += mannschaft1[i].getGegentoreJeSpiel();
      }
    }
    for(int i = 0; i < mannschaft2.length; i++){
      if(mannschaft2[i]  instanceof Mittelfeldspieler){
      p2 += mannschaft2[i].getPaesseJeSpiel();
      }
      if(mannschaft2[i]  instanceof Sturmspieler){
      t2 += mannschaft2[i].getToreJeSpiel();
      }
      if(mannschaft2[i]  instanceof Torwart){
      g2 += mannschaft2[i].getGegentoreJeSpiel();
      }
    }
    double d = (p1+t1+roteKartenZaehlen(mannschaft1)-g1);
    double e = (p2+t2+roteKartenZaehlen(mannschaft2)-g2);

    if(d > e){
      System.out.println(""Mannschaft 1 gewinnt!"");
    }
    if(e > d){
      System.out.println(""Mannschaft 2 gewinnt!"");
    }
    else{
      System.out.println(""Unentschieden"");
    }
   /* bitte implementieren */
  }
}",-
Weimer,David,d.weimer@campus.tu-berlin.de,Beendet,"27. Juni 2021  12:58","27. Juni 2021  23:59","11 Stunden","6,71","die Klasse Hund erbt von der Klasse Tier","Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Do you wanna bang heads with me?""_
ausgegeben.","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird 
_""__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {

	public static void main(String[] args) {

		Fussballspieler[] fb = {
			new Torwart( ""Michael Muellers"", 26, 1.5),
			new Abwehrspieler( ""Tante Mary"", 57, 4.5),
			new Abwehrspieler( ""Onkel Lukas"", 54, 1.2),
			new Abwehrspieler( ""Enkel Maxim"", 13, 0.7),
			new Mittelfeldspieler( ""Stuermischer Raudi"", 21, 0.2),
			new Mittelfeldspieler( ""Netter Nachbar"", 39, 11.3),
			new Mittelfeldspieler( ""EISERNE WILLE"", 879, 7.8),
			new Mittelfeldspieler( ""Versager des Teams"", 23, 0.3),
			new Sturmspieler(""Gerald der Langbart"", 49, 1.9),
			new Sturmspieler(""Die Fluessige Kuehnheit"", 401, 1.1),
			new Sturmspieler(""Der wachsame Wolf"", 27, 2.9)
		};
		Fussballspieler[] fk = {
			new Torwart(""Bálint Tamara"", 32, 1.4),
			new Abwehrspieler(""Martha Hewie Freeman"", 104, 1.1),
			new Abwehrspieler(""Granit Sakshi Virgiliu"", 84, 10.1),
			new Abwehrspieler(""Pavla Engman"", 131, 5.3),
			new Mittelfeldspieler(""Daw Dilipa Orla Keighley McNiven"", 10, 2.7),
			new Mittelfeldspieler(""Gabriela Qinglong"", 32, 0.6),
			new Mittelfeldspieler(""Kenya Elva Rao"", 70, 1.9),
			new Sturmspieler(""Godafrid Apoorva Vencel"", 50, 6.3),
			new Sturmspieler(""Rut Everly"", 56, 11.3),
			new Sturmspieler(""Iulianus Adrian"", 13, 3.9),
			new Sturmspieler(""Anoop MacCallion"", 24, 10.9)
		};
		fb[3].geburtstagFeiern();

	static void ausgeben(Fussballspieler[] a) {
		for (int i = 0; i < a.length; i++) {
		System.out.println(a.toString());
		};
	}
}",-
Türk,Selin,selin.tuerk@campus.tu-berlin.de,Beendet,"27. Juni 2021  17:43","27. Juni 2021  23:59","6 Stunden 15 Minuten","8,00","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",this,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:4: error: cannot find symbol_"",
weil _System_ nicht im selben Ordner liegt.",Java,"Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können",-,"// Kommentar zur Polymorphie: in der ausgeben()-Methode wird ein Array übergeben, welcher wiederrum Unterklassen hat.
// Da alle Objekte der Unterklassen eine toString-Methode haben ist ein cast hier überflüssig.
// Das liegt daran, dass Java objektorientiert arbeitet. Es wird erst zur Laufzeit entschieden, welche Methode aufgerufen wird.
// Dabei wird danach entschieden welche Methode dem Objekt am nächsten ist. In RoteKartenZaehlen() soll nur die Unterklasse Abwehrspieler
// angesprochen werden. Aus diesem Grund ist hier ein Cast zur speziellen Unterklasse notwendig.
//

public class TestMannschaft {
    public static void main(String[] args) {

        Fussballspieler[] m1 = {
                new Torwart(""A"", 22, 1),
                new Abwehrspieler(""B"", 34, 1),
                new Abwehrspieler(""C"", 40, 5),
                new Abwehrspieler(""D"", 25, 0),
                new Sturmspieler(""E"", 22, 0),
                new Sturmspieler(""F"", 30, 4),
                new Abwehrspieler(""G"", 21, 1),
                new Abwehrspieler(""H"", 28, 0),
                new Mittelfeldspieler(""I"", 17, 30),
                new Mittelfeldspieler(""J"", 29, 100),
                new Mittelfeldspieler(""K"", 24, 2),
        };

        Fussballspieler[] m2 = {
                new Torwart(""L"", 37, 3),
                new Abwehrspieler(""M"", 30, 0),
                new Abwehrspieler(""N"", 35, 2),
                new Abwehrspieler(""O"", 25, 4),
                new Sturmspieler(""P"", 23, 0),
                new Sturmspieler(""Q"", 21, 3),
                new Abwehrspieler(""R"", 20, 1),
                new Abwehrspieler(""S"", 28, 2),
                new Mittelfeldspieler(""T"", 18, 10),
                new Mittelfeldspieler(""U"", 32, 66),
                new Mittelfeldspieler(""V"", 16, 45),
        };

        m1[4].geburtstagFeiern();
        System.out.println(""Rote Karten: "" + roteKartenZaehlen(m1));
        System.out.println();
        ausgeben(m1);
        System.out.println();
        fussballspielen(m1,m2);

    }

        public static double roteKartenZaehlen(Fussballspieler[]a){
            double roteInsgesamt = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Abwehrspieler)
                    roteInsgesamt += ((Abwehrspieler) a[i]).getAnzahlRoteKartenJeSpiel();
            }
            return roteInsgesamt;
        }

        public static double countPaesse(Fussballspieler[]a) {
            double passAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Mittelfeldspieler)
                    passAnzahl += ((Mittelfeldspieler) a[i]).getPaesseJeSpiel();
            }
            return passAnzahl;
        }

        public static double countTore(Fussballspieler[]a) {
            double toreAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Sturmspieler)
                    toreAnzahl += ((Sturmspieler) a[i]).getToreJeSpiel();
            }
            return toreAnzahl;
        }

        public static double countGegentore(Fussballspieler[]a) {
            double gegentoreAnzahl = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] instanceof Torwart)
                   gegentoreAnzahl += ((Torwart) a[i]).getGegentoreJeSpiel();
            }
            return gegentoreAnzahl;
        }

        public static void ausgeben (Fussballspieler[]o) {
            for (int i = 0; i < o.length; i++) {
                System.out.println(o[i].toString());
            }
        }

        public static void fussballspielen (Fussballspieler[]mannschaft1, Fussballspieler[]mannschaft2){
        double ergebnis1 = countTore(mannschaft1)*1000+countPaesse(mannschaft1)-countGegentore(mannschaft1)*1000-roteKartenZaehlen(mannschaft1)*10;
        double ergebnis2 = countTore(mannschaft2)*1000+countPaesse(mannschaft2)-countGegentore(mannschaft2)*1000-roteKartenZaehlen(mannschaft2)*10;
        if (ergebnis1 == ergebnis2) {
            System.out.println(""Unentschieden!"");
        }
            else {
                if (ergebnis1 < ergebnis2) {
                    System.out.println(""Mannschaft 2 gewinnt!"");
                }
                else {
                    System.out.println(""Mannschaft 1 gewinnt!"");
                }
        }
    }
}",-
Pürschel,"Kanta Fabian",k.puerschel@campus.tu-berlin.de,Beendet,"27. Juni 2021  20:36","27. Juni 2021  23:59","3 Stunden 22 Minuten","9,59","Es wird die Methode der Sub-Klasse aufgerufen","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Wenn ein ""Child""-Objekt erzeugt wird (new Child();), wird
_""Mother
__Tell your children not to walk my way""_
ausgegeben.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args) {
      
     // Arrays definieren und Werte einfuegen
    Fussballspieler[] deutschland = new Fussballspieler[11];
    deutschland[0] = new Torwart(""Aaron"", 20, 0.5);
    deutschland[1] = new Abwehrspieler(""Ben"", 21, 0.7);
    deutschland[2] = new Abwehrspieler(""Can"", 22, 0.5);
    deutschland[3] = new Abwehrspieler(""Dennis"", 23, 0.8);
    deutschland[4] = new Mittelfeldspieler(""Emil"", 24, 25.2);
    deutschland[5] = new Mittelfeldspieler(""Felix"", 25, 34.8);
    deutschland[6] = new Mittelfeldspieler(""Georg"", 26, 18.5);
    deutschland[7] = new Mittelfeldspieler(""Heiner"", 27, 15.6);
    deutschland[8] = new Sturmspieler(""Igor"", 28, 0.6);
    deutschland[9]= new Sturmspieler(""Jan"", 29, 0.8);
    deutschland[10] = new Sturmspieler(""Kevin"", 30, 0.5);

    Fussballspieler[] mannschaftB = new Fussballspieler[11];
    mannschaftB[0] = new Torwart(""Lukas"", 30, 0.8);
    mannschaftB[1] = new Abwehrspieler(""Moriz"", 31, 0.8);
    mannschaftB[2] = new Abwehrspieler(""Niko"", 32, 0.7);
    mannschaftB[3] = new Abwehrspieler(""Olaf"", 33, 0.9);
    mannschaftB[4] = new Mittelfeldspieler(""Paul"", 34, 30.2);
    mannschaftB[5] = new Mittelfeldspieler(""Quentin"", 35, 25.8);
    mannschaftB[6] = new Mittelfeldspieler(""Rudolf"", 36, 12.5);
    mannschaftB[7] = new Mittelfeldspieler(""Sven"", 37, 11.6);
    mannschaftB[8] = new Sturmspieler(""Tom"", 38, 0.3);
    mannschaftB[9] = new Sturmspieler(""Unar"", 39, 0.5);
    mannschaftB[10] = new Sturmspieler(""Viktor"", 40, 0.1);

    deutschland[10].geburtstagFeiern();
    
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, mannschaftB);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1) {
    double roteKarten = 0;
    for (int i = 0; i < mannschaft1.length; i++) {
      if (mannschaft1[i] instanceof Abwehrspieler) {
        roteKarten += ((Abwehrspieler)mannschaft1[i]).getRoteKarten();
      }
    }
    return roteKarten;
    /* Hier spielt Polymorphie eine wichtige Rolle, da da nur Abwehrspieler das 
    rote Karten Atribut haben. (weird aber okay) Deshalb ist es wichtig, nur Werte 
    der Abwehrspieler abzufragen. */
  }
  
  public static void ausgeben(Fussballspieler[] mannschaft1) {
    for (int i = 0; i < mannschaft1.length; i++) {
      System.out.print(mannschaft1[i].toString());
    }
    /* Hier spielt Polymorphie insofern eine rolle, dass individualle Ausgaben 
    gefordert sind. Da aber eine ausgeben-Methode in der Fussballspieler-Klasse, 
    so wie in allen Unterklassen existiert, ist keine mauelle Umwandlung erforderlich. */
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
    double odds, strength1 = 0, strength2 = 0;

    strength1 -= roteKartenZaehlen(mannschaft1);
    for (int i = 0; i < mannschaft1.length; i++) {
      if (mannschaft1[i] instanceof Torwart) {
          strength1 -= ((Torwart)mannschaft1[i]).getGegentore();
        } else if (mannschaft1[i] instanceof Mittelfeldspieler) {
          strength1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesse();
        } else if (mannschaft1[i] instanceof Sturmspieler) {
          strength1 += ((Sturmspieler)mannschaft1[i]).getTore();
        } else {
          break;
        }
      }

    strength2 -= roteKartenZaehlen(mannschaft2);
    for (int i = 0; i < mannschaft2.length; i++) {
      if (mannschaft2[i] instanceof Torwart) {
          strength2 -= ((Torwart)mannschaft2[i]).getGegentore();
        } else if (mannschaft2[i] instanceof Mittelfeldspieler) {
          strength2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesse();
        } else if (mannschaft2[i] instanceof Sturmspieler) {
          strength2 += ((Sturmspieler)mannschaft2[i]).getTore();
        } else {
          break;
        }
      }

    odds = strength1 - strength2;
    if (odds > 0) {
      System.out.println(""Mannschaft 1 gewinnt!"");
    } else if (odds == 0 ) {
      System.out.println(""Unentschieden!"");
    } else {
      System.out.println(""Mannschaft 2 gewinnt!"");
    }
  }
}",-
Ismailoglu,Ece,e.ismailoglu@campus.tu-berlin.de,Beendet,"27. Juni 2021  21:41","27. Juni 2021  23:59","2 Stunden 17 Minuten","12,00","die Klasse Hund erbt von der Klasse Tier","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".","Zeile 7 : super(); müsste this(); heißen","Es wird die Methode der Sub-Klasse aufgerufen",Java,super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
	 
    // Arrays definieren
    Fussballspieler[] mannschaft1 = new Fussballspieler[11];
	Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	  
    //Werte einfügen
	mannschaft1[0] = new Torwart(""Ismael"", 30, 4.1);
	mannschaft1[1] = new Abwehrspieler(""Ece"", 31, 0.01);
	mannschaft1[2] = new Abwehrspieler(""Maxi"", 25, 0.05);
	mannschaft1[3] = new Abwehrspieler(""Oswald"", 23, 0.01);
	mannschaft1[4] = new Mittelfeldspieler(""Paul"", 27, 78);
	mannschaft1[5] = new Mittelfeldspieler(""Messi"", 40, 34);
	mannschaft1[6] = new Mittelfeldspieler(""Griezmann"", 23, 67);
	mannschaft1[7] = new Mittelfeldspieler(""Estefan"", 16, 14);
	mannschaft1[8] = new Sturmspieler(""Pedrinho"", 18, 1);
	mannschaft1[9] = new Sturmspieler(""Mota"", 29, 1);
	mannschaft1[10] = new Sturmspieler(""Pablo"", 28, 0);
	
	mannschaft2[0] = new Torwart(""Kiko"", 17, 1);
	mannschaft2[1] = new Abwehrspieler(""Ray"", 30, 0.0);
	mannschaft2[2] = new Abwehrspieler(""Gary"", 40, 2.0);
	mannschaft2[3] = new Abwehrspieler(""Medel"", 32, 6.0);
	mannschaft2[4] = new Mittelfeldspieler(""Irina"", 24, 12);
	mannschaft2[5] = new Mittelfeldspieler(""Tadeo"", 23, 12);
	mannschaft2[6] = new Mittelfeldspieler(""Dario"", 27, 24);
	mannschaft2[7] = new Mittelfeldspieler(""Ivan"", 20, 24);
	mannschaft2[8] = new Mittelfeldspieler(""Holan"", 21, 55);
	mannschaft2[9] = new Sturmspieler(""Mitchel"", 19, 0);
	mannschaft2[10] = new Sturmspieler(""Pablito"", 17, 4);
	
	// Geburtstag feiern
	mannschaft2[5].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
    System.out.println();
    ausgeben(mannschaft1);
    System.out.println();
    fussballspielen(mannschaft1, mannschaft2);			
  }
	//da wir vorher überprüfen, ob der Spieler ein Abwehrspieler ist,
	//können wir die entsprechende Methode für den Abwehrspieler aufrufen.
  public static double roteKartenZaehlen(Fussballspieler[] spieler){
    double roteKarten = 0.0;
	for(int i=0; i<spieler.length; i++){
		if(spieler[i] instanceof Abwehrspieler) {
			roteKarten += ((Abwehrspieler) spieler[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
  }
	//Da wird die entsprechende Methode (toString) automatisch
	//aufgerufen (Polymorphie)
  public static void ausgeben(Fussballspieler[] spieler){
	for(int i=0; i<spieler.length; i++){
		System.out.print(spieler[i]);
	}
  }
  public static int tore(Fussballspieler[] mannschaft) {
	int tore = 0;
	for(int i=0; i<mannschaft.length; i++){
		if(mannschaft[i] instanceof Sturmspieler) { 
			tore += ((Sturmspieler)mannschaft[i]).getToreJeSpiel();
		}
	}
	return tore;
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int tore1 = tore(mannschaft1);
	int tore2 = tore(mannschaft2);
	if(tore1>tore2) {
		System.out.println(""Mannschaft 1 gewinnt!"");
	} else if (tore1<tore2) {
		System.out.println(""Mannschaft 2 gewinnt!"");
	} else {
		System.out.println(""Unentschieden!"");
	}
  }
}",-
Nasralla,"Kerolus Nasser Nagi",k.nasralla@campus.tu-berlin.de,Beendet,"27. Juni 2021  22:20","27. Juni 2021  23:59","1 Stunde 38 Minuten","11,23","Dies ruft innerhalb einer Superklasse den Konstruktor einer Subklasse auf.","Beim Kompilieren erscheint die Fehlermeldung
""_Child.java:3: error: constructor Parent in class Parent cannot be applied to given types;_"".",super,"Es wird die Methode der Super-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",Java,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {10. <sub>int} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
	 
    // Arrays definieren
    Fussballspieler[] mannschaft1 = new Fussballspieler[11];
	Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	  
    //Werte einfügen
	mannschaft1[0] = new Torwart(""Fran"", 20, 4.1);
	mannschaft1[1] = new Abwehrspieler(""Raymond"", 19, 0.01);
	mannschaft1[2] = new Abwehrspieler(""Majd"", 21, 0.05);
	mannschaft1[3] = new Abwehrspieler(""Andrew"", 19, 0.01);
	mannschaft1[4] = new Mittelfeldspieler(""Mina"", 25, 78);
	mannschaft1[5] = new Mittelfeldspieler(""Emad"", 48, 34);
	mannschaft1[6] = new Mittelfeldspieler(""Kero"", 25, 67);
	mannschaft1[7] = new Mittelfeldspieler(""Armia"", 16, 14);
	mannschaft1[8] = new Sturmspieler(""Robert"", 17, 1);
	mannschaft1[9] = new Sturmspieler(""Josef"", 21, 1);
	mannschaft1[10] = new Sturmspieler(""PePe"", 23, 0);
	
	mannschaft2[0] = new Torwart(""Laurenz"", 18, 1);
	mannschaft2[1] = new Abwehrspieler(""Floyd"", 24, 0.0);
	mannschaft2[2] = new Abwehrspieler(""Vladimir"", 75, 2.0);
	mannschaft2[3] = new Abwehrspieler(""Nasser"", 19, 6.0);
	mannschaft2[4] = new Mittelfeldspieler(""Nagi"", 22, 12);
	mannschaft2[5] = new Mittelfeldspieler(""Nasralla"", 22, 12);
	mannschaft2[6] = new Mittelfeldspieler(""Venn"", 22, 24);
	mannschaft2[7] = new Mittelfeldspieler(""Cabral"", 22, 24);
	mannschaft2[8] = new Mittelfeldspieler(""Arthur"", 17, 55);
	mannschaft2[9] = new Sturmspieler(""Vidal"", 15, 0);
	mannschaft2[10] = new Sturmspieler(""Messi"", 17, 4);
	
	// Geburtstag feiern
	mannschaft2[5].geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
    System.out.println();
    ausgeben(mannschaft1);
    System.out.println();
    fussballspielen(mannschaft1, mannschaft2);
	
		
//Wurde die Methode ausgeben korrekt implementiert
Fussballspieler[] deutschland = new Fussballspieler[5];
Fussballspieler[] suedkorea = new Fussballspieler[5];
deutschland[0] = new Torwart(""Neuer"", 20, 1.2);
deutschland[1] = new Abwehrspieler(""Hector"", 21, 0.05);
deutschland[2] = new Abwehrspieler(""Hummels"", 22, 0.02);
deutschland[3] = new Mittelfeldspieler(""Goretzka"", 29, 45);
deutschland[4] = new Sturmspieler(""Werner"", 30, 0.3);
suedkorea[0] = new Torwart(""Cho"", 30, 0.9);
suedkorea[1] = new Abwehrspieler(""Lee"", 29, 0.03);
suedkorea[2] = new Mittelfeldspieler(""Jang"", 23, 55);
suedkorea[3] = new Sturmspieler(""Son"", 21, 0.4);
suedkorea[4] = new Sturmspieler(""Koo"", 20, 0.5);
System.out.println(""Deutschland: "");
TestMannschaft.ausgeben(deutschland);
System.out.println(""Suedkorea: "");
TestMannschaft.ausgeben(suedkorea);
  }
	//da wir vorher überprüfen, ob der Spieler ein Abwehrspieler ist,
	//können wir die entsprechende Methode für den Abwehrspieler aufrufen.
  public static double roteKartenZaehlen(Fussballspieler[] spieler){
    double roteKarten = 0.0;
	for(int i=0; i<spieler.length; i++){
		if(spieler[i] instanceof Abwehrspieler) {
			roteKarten += ((Abwehrspieler) spieler[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
  }
	//Da wird die entsprechende Methode (toString) automatisch
	//aufgerufen (Polymorphie)
  public static void ausgeben(Fussballspieler[] spieler){
	for(int i=0; i<spieler.length; i++){
		System.out.print(spieler[i]);
	}
  }
  public static int tore(Fussballspieler[] mannschaft) {
	int tore = 0;
	for(int i=0; i<mannschaft.length; i++){
		if(mannschaft[i] instanceof Sturmspieler) { 
			tore += ((Sturmspieler)mannschaft[i]).getToreJeSpiel();
		}
	}
	return tore;
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int tore1 = tore(mannschaft1);
	int tore2 = tore(mannschaft2);
	if(tore1>tore2) {
		System.out.println(""Mannschaft 1 gewinnt!"");
	} else if (tore1<tore2) {
		System.out.println(""Mannschaft 2 gewinnt!"");
	} else {
		System.out.println(""Unentschieden!"");
	}
  }
}",-
