Nachname,Vorname,Antwort 8,Antwort 9
Name_230,VName_230,//,"// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
    
     Fussballspieler[] deutschland = new Fussballspieler[11];
		deutschland[0] = new Torwart(""Luise"", 25, 3.0);
		deutschland[1] = new Abwehrspieler(""Anna"", 30, 1.5);
		deutschland[2] = new Abwehrspieler(""Helga"", 75, 0.0);
		deutschland[3] = new Abwehrspieler(""Susi"", 12, 0.6);
		deutschland[4] = new Mittelfeldspieler(""Hans"", 65, 23);
		deutschland[5] = new Mittelfeldspieler(""Paul"", 27, 103);
		deutschland[6] = new Mittelfeldspieler(""Georg"", 87, 37);
		deutschland[7] = new Mittelfeldspieler(""Lukas"", 10, 45);
		deutschland[8] = new Sturmspieler(""Johanna"", 26, 3);
		deutschland[9] = new Sturmspieler(""Rodrigo"", 45, 1);
		deutschland[10] = new Sturmspieler(""Hannelore"", 15, 6);
		
		Fussballspieler[] frankreich = new Fussballspieler[11];
		frankreich[0] = new Torwart(""Stefan"", 47, 1.0);
		frankreich[1] = new Abwehrspieler(""Hanna"", 31, 2.5);
		frankreich[2] = new Abwehrspieler(""Barbara"", 77, 1.0);
		frankreich[3] = new Abwehrspieler(""Bine"", 17, 0.6);
		frankreich[4] = new Mittelfeldspieler(""Holger"", 32, 20.0);
		frankreich[5] = new Mittelfeldspieler(""Peter"", 49, 13.5);
		frankreich[6] = new Mittelfeldspieler(""Gregor"", 70, 26.4);
		frankreich[7] = new Mittelfeldspieler(""Basti"", 16, 54.9);
		frankreich[8] = new Sturmspieler(""Kathi"", 18, 2.6);
		frankreich[9] = new Sturmspieler(""Samuel"", 85, 6.5);
		frankreich[10] = new Sturmspieler(""Herbert"", 64, 2.3);

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Das ist die Aufstellung von Deutschland:\n"");
    ausgeben(deutschland);
    System.out.println(""Ein Fussballspiel zwischen Deutschland und Frankreich geht wie folgt aus:\n"");
    fussballspielen(deutschland, frankreich);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){ //Hier spielt Polymorphie keine große Rolle, da es die Methode getAnzahlRoteKartenJeSpiel()
		double sum = 0.0;													// nur in einer Klasse gibt und zwar in der Unterklasse Abwehrspieler. 
		for(int i = 0; i<mannschaft.length; i++) {							//Mit der vorgeschalteten Abfrage ""instanceof"" wird sichergestellt, dass kein
			if(mannschaft[i] instanceof Abwehrspieler) {					//Compilerfehler entsteht, da die Methode in den anderen Unterklassen nicht exisitert.
			sum += ((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return sum;
  }
  public static void ausgeben(Fussballspieler[] mannschaft){ //Hier existiert eine Polymorphie, da die Methode toString() sowohl in der java-Klasse Object, 
		String out = mannschaft[0].toString();										//als auch in der Oberklasse Fussballspieler und in jeder Unterklasse implementiert ist. 
		for(int i = 1; i<mannschaft.length; i++) {				//Es wird dann immer die toString()-Methode der Klasse verwendet, die am nächsten an
			out = out + ""\n"" + mannschaft[i].toString();					// dem Objekt dran ist. In diesem Fall ist das je nach Datentyp die Klasse Torwart,
		}														// Abwehrspieler etc., da die Objekte direkt aus diesen Klassen kommen und dort eine 
		System.out.println(out);								// toString()-Methode haben.
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double spielstaerke1 = 0;
		for(int i = 0; i<mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Torwart) {
				Torwart t = (Torwart) mannschaft1[i];
				spielstaerke1 -= t.getGegentoreJeSpiel();
			}
			else if(mannschaft1[i] instanceof Abwehrspieler) {
				Abwehrspieler a = (Abwehrspieler) mannschaft1[i];
				spielstaerke1 -= a.getAnzahlRoteKartenJeSpiel();
			}
			else if(mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler m = (Mittelfeldspieler) mannschaft1[i];
				spielstaerke1 += m.getPaesseJeSpiel();
			}
			else if(mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler s = (Sturmspieler) mannschaft1[i];
				spielstaerke1 += s.getToreJeSpiel();
			}
		}
		
	double spielstaerke2 = 0;
		for(int i = 0; i<mannschaft1.length; i++) {
			if(mannschaft2[i] instanceof Torwart) {
				Torwart t = (Torwart) mannschaft2[i];
				spielstaerke2 -= t.getGegentoreJeSpiel();
			}
			else if(mannschaft2[i] instanceof Abwehrspieler) {
				Abwehrspieler a = (Abwehrspieler) mannschaft2[i];
				spielstaerke2 -= a.getAnzahlRoteKartenJeSpiel();
			}
			else if(mannschaft2[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler m = (Mittelfeldspieler) mannschaft2[i];
				spielstaerke2 += m.getPaesseJeSpiel();
			}
			else if(mannschaft2[i] instanceof Sturmspieler) {
				Sturmspieler s = (Sturmspieler) mannschaft2[i];
				spielstaerke2 += s.getToreJeSpiel();
			}
		}
		
		if(spielstaerke1 < spielstaerke2) System.out.println(""Mannschaft 1 gewinnt!"");
		else if(spielstaerke1 == spielstaerke2) System.out.println(""Unentschieden!"");
		else System.out.println(""Mannschaft 2 gewinnt!"");
  }
}"
Name_6,VName_6,//,"public class TestBus {
	public static void main (String []args){
		
		//Array erzeugen
		Bus [] flotte = new Bus [5];
		flotte[0] = new Bus(50,2);
		flotte[1] = new Reisebus (100,3,true);
		flotte[2] = new Linienbus (40,2,true,30);
		flotte[3] = new Linienbus (30,2,true,20);
		//ein paar Tueren oeffnen
		flotte[0].tuerOeffnen(1);
		flotte[0].istFahrbereit();
		flotte[1].tuerOeffnen(2);
		flotte[1].istFahrbereit();
		flotte[2].tuerOeffnen(2);
		flotte[2].istFahrbereit();
		//alle Busse fahrbereit machen
		flotte[0].tuerSchliessen(1);
		flotte[0].tuerSchliessen(2);
		flotte[1].tuerSchliessen(1);
		flotte[1].tuerSchliessen(2);
		flotte[1].tuerSchliessen(3);
		//Linienbus vergleich
		flotte[2].equals(flotte[0]);
		flotte[2].equals(flotte[1]);
		//neuen Bus mit Flotte vergleichen
		flotte[4] = new Reisebus (80,3,true);
		for (int i =0;i<flotte.length-1;i++){
			flotte[4].equals(flotte[i]);
		}
	}
}"
Name_231,VName_231,"public class TestBus {

    public static void main(String[] args){
        Bus[] busse = new Bus[4];
        busse[0] = new Bus(20,2);
        busse[1] = new Linienbus(80,4,false,100);
        busse[2] = new Reisebus(40,3,true);
        busse[3] = new Linienbus(40,2,true,20);

        busse[0].tuerOeffnen(2);
        busse[1].tuerOeffnen(4);
        busse[2].tuerOeffnen(1);
        busse[2].tuerOeffnen(3);

        busse[2].istFahrbereit();
        busse[0].istFahrbereit(); //Fahrbereit immer true
        busse[1].istFahrbereit();


        for (int i = 1; i <= busse[2].getAnzahlTueren(); i ++){
            busse[2].tuerSchliessen(i);
        }

        busse[2].istFahrbereit();
        busse[0].istFahrbereit(); //Fahrbereit immer true
        busse[1].istFahrbereit();






        busse[3].equals(busse[0]);
        busse[3].equals(busse[2]);


        Reisebus berlin = new Reisebus(30,1,true);

        berlin.equals(busse[0]);
        berlin.equals(busse[1]);
        berlin.equals(busse[2]);
        berlin.equals(busse[3]);
    }
}",//
Name_232,VName_232,"public class TestBus{

	public static void main(String[] args){
		Bus[] bs = {
			new Bus(10, 4),                  //0
 			new Reisebus(50, 2, false),      //1
			new Reisebus(50, 2, false),      //2
			new Reisebus(50, 2, true),       //3
			new Linienbus(40, 5, true, 50),  //4
			new Linienbus(40, 4, true, 50),  //5
			new Linienbus(40, 2, false, 50)  //6
		}; 


		
		//Oeffnet tueren von Bussen.
		
		bs[1].tuerSchliessen(3);
		bs[1].tuerOeffnen(3);
		

		
		bs[3].tuerSchliessen(1);
		bs[3].tuerOeffnen(1);
		

		for (int i = 1; i < bs.length; i++){
			bs[i].tueren[0].oeffnen();
			bs[i].tueren[1].oeffnen();
		}

		//Prueft ob fahrbereit
		System.out.println(bs[1].istFahrbereit());
		System.out.println(bs[3].istFahrbereit());
		
		//Macht Alle Busse Fahrbereit
		for (int i = 0; i < bs.length; i++){
			for (int j = 0; j < bs[i].tueren.length; j++){
				bs[i].tueren[j].schliessen();
			}
		}

		//Prueft ob fahrbereit
		for (int i = 0; i < bs.length; i++){
			System.out.println(bs[i].istFahrbereit());
		}
		
		//Vergleicht Linienbus mit Bus & Reisebus
		System.out.println(bs[4].equals(bs[0]));
		System.out.println(bs[4].equals(bs[3]));

		//Erzeugt ein weiteres Linienbus
		Bus lnbs = new Linienbus(40, 4, true, 50);

		
		//Vergleicht lnbs mit alle in dem array bs
		for (int i = 0; i < bs.length; i++){
			System.out.println(lnbs.equals(bs[i]));
		}


	}
}","public class TestMannschaft{

	public static int randomage(){
		//Age
		double ager = Math.random();
		ager *= 40;
		ager += 1;
		int age = (int) ager;
		return age;
	}
	public static double randomsaves(){
		//Goalie
		double saves = Math.random();
		saves *= 20;
		saves += 1;
		return saves;
	}
	public static int randomredcard(){
		//Defense
		double redcardr = Math.random();
		redcardr *= 3;
		redcardr += 1;
		int redcard = (int) redcardr;
		return redcard;
	}
	public static double randompasses(){
		//Midfield
		double passes = Math.random();
		passes *= 50;
		passes += 1;
		return passes;
	}
	public static double randomgoals(){
		//Attack
		double goals = Math.random();
		goals *= 20;
		goals += 1;
		return goals;	
	}
	public static int randomplayer(){
		double playerselection = Math.random();
		playerselection *= 3;
		playerselection += 1;
		int playerselected = (int) playerselection;
		return playerselected;
	}
	public static int randombirthday(){
		double playerbirthdayr = Math.random();
		playerbirthdayr *= 10;
		playerbirthdayr += 1;
		int playerbirthday = (int) playerbirthdayr;
		return playerbirthday;
	}
	public static String randomname(){
		String playername = """";
		double playernamer = Math.random();
		playernamer *= 2;
		playernamer += 1;
		int playernamei = (int) playernamer;
		if (playernamei == 1){
			playername += ""LoooongName"";
		}
		if (playernamei == 2){
			playername += ""Short"";
		}
		return playername;
	}


	public static void main(String[] args){

		

		Fussballspieler[] team1 = new Fussballspieler[11];
		Fussballspieler[] team2 = new Fussballspieler[11];

		team1[0] = new Torwart(randomname(), randomage(), randomsaves());
		for (int i = 1; i < 11; i++){
			int playertype = randomplayer();
			if (playertype == 1){
				team1[i] = new Abwehrspieler(randomname(), randomage(), randomredcard());
			}
			if (playertype == 2){
				team1[i] = new Mittelfeldspieler(randomname(), randomage(), randompasses());
			}
			if (playertype == 3){
				team1[i] = new Sturmspieler(randomname(), randomage(), randomgoals());
			}	
		}

		team1[randombirthday()].geburtstagFeiern();

		team2[0] = new Torwart(randomname(), randomage(), randomsaves());
		for (int i = 1; i < 11; i++){
			int playertype = randomplayer();
			if (playertype == 1){
				team2[i] = new Abwehrspieler(randomname(), randomage(), randomredcard());
			}
			if (playertype == 2){
				team2[i] = new Mittelfeldspieler(randomname(), randomage(), randompasses());
			}
			if (playertype == 3){
				team2[i] = new Sturmspieler(randomname(), randomage(), randomgoals());
			}	
		}

		team2[randombirthday()].geburtstagFeiern();




		/*
		//Define Arrays
		Fussballspieler[] team1 = {
			new Torwart(""Goalie1"", 19, 4.5),
			new Abwehrspieler(""Defense1.1"", 20, 1.0),
			new Abwehrspieler(""Defense2.1"", 20, 1.0),
			new Abwehrspieler(""Defense3.1"", 20, 1.0),
			new Abwehrspieler(""Defense4.1"", 20, 1.0),
			new Mittelfeldspieler(""Midfield1.1"", 22, 50.0),
			new Mittelfeldspieler(""Midfield2.1"", 22, 50.0),
			new Mittelfeldspieler(""Midfield3.1"", 22, 50.0),
			new Sturmspieler(""Attacker1.1"", 23, 1.0),
			new Sturmspieler(""Attacker2.1"", 23, 1.0),
			new Sturmspieler(""Attacker3.1"", 23, 1.0)

		};

		team1[0].geburtstagFeieren();

		Fussballspieler[] team2 = {
			new Torwart(""Goalie2.2"", 20, 4.5),
			new Abwehrspieler(""Defense1.2"", 20, 1.0),
			new Abwehrspieler(""Defense2.2"", 20, 1.0),
			new Abwehrspieler(""Defense3.2"", 20, 1.0),
			new Abwehrspieler(""Defense4.2"", 20, 1.0),
			new Mittelfeldspieler(""Midfield1.2"", 22, 50.0),
			new Mittelfeldspieler(""Midfield2.2"", 22, 50.0),
			new Mittelfeldspieler(""Midfield3.2"", 22, 50.0),
			new Sturmspieler(""Attacker1.2"", 23, 1.0),
			new Sturmspieler(""Attacker2.2"", 23, 1.0),
			new Sturmspieler(""Attacker3.2"", 23, 1.0)

		};

		team2[5].geburtstagFeieren();
*/
		System.out.println(roteKartenZaehlen(team2));
		ausgeben(team1);
		fussballspielen(team1 ,team2);
		//Werte einfügen

/*		System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    	System.out.println();
    	ausgeben(......);
    	System.out.println();
    	fussballspielen(................);
    	*/
	}


	public static double roteKartenZaehlen(Fussballspieler[] team){
    	double redcard = 0;
    	for (int i=0; i<team.length; i++){
    		if (team[i] instanceof Abwehrspieler){ //da nur Abwehrspieler die rote Karte attribute haben, wird hiermit nur die Abwehrspielern ausgewaehlt
    			redcard += ((Abwehrspieler) team[i]).getAnzahlRoteKartenJeSpiel(); //Wenn der ausgewaehlte spieler team[i] ein Abwehrspieler ist, wird die referenz team[i] downcasted auf Abwehrspeiler und dann darauf die getAnzahlRotekartenJeSpiel() methode gerufen. Da ich explizit team[i] auf Abwehrspieler downcast, heisst es das die methode immer gehen wird da sie ein teil der Abwehspieler classe ist. 
    		}
    	}
    	return redcard;
  	}

  	public static void ausgeben(Fussballspieler[] team){
    	String roster = """";
    	for (int i=0; i<team.length; i++){
    		if(i<team.length-1){
    			roster += team[i].toString()+""\n""; //Da jeder team mitglied seine eigene toString() methode hat, und fuer jeden spieler art das passende toString() methode definiert wurde, und via polymorphie ich die toString() methode von the Superclass Fussballspieler fuer die privaten attribute von Fussballspieler aufrufen kann, ist das die richtige Methode.
    		}
    		else{
    			roster += team[i].toString(); //Da jeder team mitglied seine eigene toString() methode hat, und fuer jeden spieler art das passende toString() methode definiert wurde, und via polymorphie ich die toString() methode von the Superclass Fussballspieler fuer die privaten attribute von Fussballspieler aufrufen kann, ist das die richtige Methode.  
    		}
    		
    	}
    	System.out.println(roster);
   
  	}

  	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    	//Attributes of mannschaft1
    	double totalscore1 = 0; //Total Score of team based on following attributes:
    	double age1 = 0; //
    	double communication1 = 0; //How easy players name is to say based on length of player name, if name.length() > 4 --> -1 
    	double saves1 = 0; //How many saves goalie makes
    	double playsunfair1 = 0; //How many fouls defense makes
    	double teamwork1 = 0; //How many passes each midfielder makes
    	double goals1 = 0; //How many goals are scored by atackers

    	//Attributes of mannschaft2
    	double totalscore2 = 0; //Total Score of team based on following attributes:
    	double age2 = 0;
    	double communication2 = 0; //How easy players name is to say based on length of player name, if name.length() > 4 --> -1 
    	double saves2 = 0; //How many saves goalie makes
    	double playsunfair2 = 0; //How many fouls defense makes
    	double teamwork2 = 0; //How many passes each midfielder makes
    	double goals2 = 0; //How many goals are scored by attackers
    	
    	//Team1//
    	for (int i=0; i<mannschaft1.length; i++){
    		//Age Factor
    		if(((Fussballspieler)mannschaft1[i]).getAlter() > 30){
    			age1 -= 1;
    		}
    		if(((Fussballspieler)mannschaft1[i]).getAlter() < 18){
    			age1 -= 1;
    		}
    		if(((Fussballspieler)mannschaft1[i]).getAlter() >= 18 && ((Fussballspieler)mannschaft1[i]).getAlter() <= 30){
    			age1 += 1;
    		}

    		//Communication Factor (longer name takes longer to say)
    		if(((Fussballspieler)mannschaft1[i]).getName().length() > 6){
    			communication1 -= 1;
    		}

    		//Torwart Score
    		if(mannschaft1[i] instanceof Torwart){
    			saves1 += ((Torwart) mannschaft1[i]).getGegentoreJeSpiel();
    		}

    		//Defense Score
    		if(mannschaft1[i] instanceof Abwehrspieler){
    			playsunfair1 -= ((Abwehrspieler) mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
    		}

    		//Midfield Score
    		if(mannschaft1[i] instanceof Mittelfeldspieler){
    			teamwork1 += ((Mittelfeldspieler) mannschaft1[i]).getPaesseJeSpiel();
    		}

    		//Offense Score
    		if(mannschaft1[i] instanceof Sturmspieler){
    			goals1 += ((Sturmspieler) mannschaft1[i]).getToreJeSpiel();
    		}
    	}

    	totalscore1 = (age1/5) + (communication1/10) + saves1 + (playsunfair1/4) + (teamwork1/2) + goals1;

    	//Team2//
    	for (int i=0; i<mannschaft2.length; i++){
    		//Age Factor
    		if(((Fussballspieler)mannschaft2[i]).getAlter() > 30){
    			age2 -= 1;
    		}
    		if(((Fussballspieler)mannschaft2[i]).getAlter() < 18){
    			age2 -= 1;
    		}
    		if(((Fussballspieler)mannschaft2[i]).getAlter() >= 18 && ((Fussballspieler)mannschaft2[i]).getAlter() <= 30){
    			age2 += 1;
    		}

    		//Communication Factor (longer name takes longer to say)
    		if(((Fussballspieler)mannschaft2[i]).getName().length() > 6){
    			communication2 -= 1;
    		}

    		//Torwart Score
    		if(mannschaft2[i] instanceof Torwart){
    			saves2 += ((Torwart) mannschaft2[i]).getGegentoreJeSpiel();
    		}

    		//Defense Score
    		if(mannschaft2[i] instanceof Abwehrspieler){
    			playsunfair2 -= ((Abwehrspieler) mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
    		}

    		//Midfield Score
    		if(mannschaft2[i] instanceof Mittelfeldspieler){
    			teamwork2 += ((Mittelfeldspieler) mannschaft2[i]).getPaesseJeSpiel();
    		}

    		//Offense Score
    		if(mannschaft2[i] instanceof Sturmspieler){
    			goals2 += ((Sturmspieler) mannschaft2[i]).getToreJeSpiel();
    		}
    	}
    	
    	totalscore2 = (age2/5) + (communication2/10) + saves2 + (playsunfair2/4) + (teamwork2/2) + goals2;

    	//Who Wins//

    	if(totalscore1 == totalscore2){
    		System.out.println(""Unentschieden!"");
    	}
    	if (totalscore1 > totalscore2){
    		System.out.println(""Mannschaft 1 gewinnt!"");
    	}
    	if (totalscore1 < totalscore2){
    		System.out.println(""Mannschaft 2 gewinnt!"");
    	}

    		
    		
    
  	}



}"
Name_235,VName_235,"// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{

	public static void main(String[] args){

		// Arrays definieren
		Fussballspieler[] mannschaftA = new Fussballspieler[11];
		Fussballspieler[] mannschaftB = new Fussballspieler[11];
		mannschaftA[0] = new Torwart(""Neuer"", 69, 1.2);
		mannschaftB[0] = new Torwart(""Rotriges"", 1312, 1.2);
		for (int i = 1; i < 11; i++) {
			mannschaftA[i] = new Sturmspieler(""Sturm"", 11, 1.2);
			mannschaftB[i] = new Mittelfeldspieler(""Heer"", 1111, 1.2);
		}
		mannschaftA[6].geburtstagFeiern();
		Abwehrspieler abwehrOne = new Abwehrspieler(""Abwehr1"", 1212, 1.2);
		abwehrOne.setAnzahlRoteKartenJeSpiel(5);
		mannschaftA[1] = abwehrOne;
		
		
		Abwehrspieler abwehrTwo = new Abwehrspieler(""Abwehr2"", 122, 1.2);
		abwehrTwo.setAnzahlRoteKartenJeSpiel(4);
		mannschaftA[4] = abwehrTwo;


		System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaftA));
		System.out.println();
		ausgeben(mannschaftA);
		System.out.println();
		fussballspielen(mannschaftB, mannschaftA);
	}

	public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
		/* In dieser Methode wird über das Array welches übergeben wird iteriert.
		 * Da eine Mannschaft per Definition nicht nur aus Abwehrspielern besteht,
		 * weshalb angenommen werden darf, dass nicht jedes Element 
		 * wird beim Schleifendurchlauf die Klasse des Elements mit getClass abgefragt.
		 * Erst wenn der Vergleich mit der Klasseninformation der Klasse Abwehrspieler true ergibt,
		 * wird die Methode getAnzahlRoteKartenJeSpiel des Elements aufgerufen, 
		 * welches vorher in eine lokale Variable des Typs Abwehrgspieler umgewandelt wurde.
		 * Der Rückgabewert wird zur Gesamtzahl roteKarten addiert.
		 */
		double roteKarten = 0;
		for (int i = 0; i < mannschaft.length; i++) {
			if (mannschaft[i].getClass() == Abwehrspieler.class) {
				Abwehrspieler sp = (Abwehrspieler) mannschaft[i];
				roteKarten += sp.getAnzahlRoteKartenJeSpiel();
			}
		}
		return roteKarten;
	}
	public static void ausgeben(Fussballspieler[] mannschaft){
		/* Hier muss in der Schleife die Klasse nicht überprüft werden, da Fussballspieler
		 * immer eine Methode toString besitzt. In den Spielerklassen welche von Fussballspieler erben,
		 * wird die Methode toString überschrieben welches dem Compiler mit @Override mitgeteilt wird,
		 * sodass für jedes Element der korrekte String auf der konsole ausgegeben wird.
		 */
		for (int i = 0; i < mannschaft.length; i++) {
			System.out.println(mannschaft[i].toString());
		}
	}
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		if (calcRating(mannschaft1) > calcRating(mannschaft2)) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		} else if (calcRating(mannschaft1) < calcRating(mannschaft2)) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		} else {
			System.out.println(""Unentschieden!"");
		}
		

	
		
	}
	
	private static int calcRating(Fussballspieler[] mannschaft) {
		int rating = 0;
		for (int i = 0; i < mannschaft.length; i++) {
			if (mannschaft[i].getAlter() <= 30) {
				rating++;
			}
			Class<?> spielertyp = mannschaft[i].getClass();
			if (spielertyp == Abwehrspieler.class) {
				Abwehrspieler sp = (Abwehrspieler) mannschaft[i];
				if (sp.getAnzahlRoteKartenJeSpiel() >= 1) { rating--; }
			} else if (spielertyp == Mittelfeldspieler.class) {
				Mittelfeldspieler sp = (Mittelfeldspieler) mannschaft[i];
				if (sp.getPaesseJeSpiel() > 34) { rating++; }
			} else if (spielertyp == Sturmspieler.class) {
				Sturmspieler sp = (Sturmspieler) mannschaft[i];
				if (sp.getToreJeSpiel() > 2) { rating++; }
			} else { //Muss Torwart sein, nach Ausschlussverfahren
				Torwart sp = (Torwart) mannschaft[i];
				if (sp.getGegentoreJeSpiel() > 2) { rating--; }
			}
		}
		return rating;
	}
}","public class TestBus {

	public static void main(String[] args) {
		Bus[] busse =  {new Bus(55, -5), new Bus(55, 2), new Reisebus(55, 5, true), new Reisebus(55, 3, false), new Reisebus(55, 2, true), new Linienbus(55, 3, true, 30), new Linienbus(55, 3, false, 30)};
	
		
		busse[0].tuerOeffnen(1);
		busse[2].tuerOeffnen(1);
		busse[2].tuerOeffnen(2);
		
		System.out.println(""Fahrbereit: ""+busse[0].istFahrbereit()+"" - ""+busse[1].istFahrbereit()+"" - ""+busse[2].istFahrbereit());
		for(int b=0; b<busse.length; b++) {
		for(int i=1; i<busse[b].getAnzahlTueren(); i++) {
			busse[b].tuerSchliessen(i);
		}
		}
		System.out.println(busse[5].equals(busse[0]));
		System.out.println(busse[5].equals(busse[2]));
		
		Bus bigBus = new Reisebus(55, 5, true);
		for(int i=0; i<busse.length; i++) {
			System.out.println(""Vergleich: ""+bigBus.equals(busse[i]));
		}
	}
}"
Name_257,VName_257,-,-
Name_252,VName_252,-,-
Name_241,VName_241,"public class TestBus {
    public static void main(String[] args) {
        Bus[] bis = new Bus[3];
        Reisebus jalan = new Reisebus(10, 4, true);
        Linienbus lini = new Linienbus(20, 2, true, 40);
        Bus biskota = new Bus(30, 6);

        bis[0] = jalan;
        bis[1] = lini;
        bis[2] = biskota;


        jalan.tuerOeffnen(2);
        jalan.tuerOeffnen(4);
        jalan.istFahrbereit();
        //System.out.println(""test 1"");
        //System.out.println(jalan.istFahrbereit());

        for(int i = 0; i < bis.length; i++) {
            for (int j = 0; j < bis[i].getAnzahlTueren(); j++) {
                bis[i].tuerSchliessen(j+1);
            }
            bis[i].istFahrbereit();
            //System.out.println(""test"" + i + 1);
            //System.out.println(bis[i].istFahrbereit());
        }

        lini.equals(biskota);
        //System.out.println(""test 5"");
        //System.out.println(lini.equals(biskota));
        lini.equals(jalan);
        //System.out.println(""test 6"");
        //System.out.println(lini.equals(jalan));

        Reisebus liburan = new Reisebus(10, 4, true);
        for (int i = 0; i < bis.length; i++) {
           liburan.equals(bis[i]);
           //System.out.println(""test"" + 7 + i);
           //System.out.println(liburan.equals(bis[i]));
        }
    }
}","public class TestMannschaft {
    public static void main(String[] args) {

        // Arrays definieren
        Fussballspieler[] mannschaft1 = new Fussballspieler[11];
        Fussballspieler[] mannschaft2 = new Fussballspieler[11];

        // Werte einfügen
        // mannschaft1[0] = new Abwehrspieler(""Heinz"", 99, 2.3);
        // mannschaft1[1] = new Abwehrspieler(""Heineken"", 89, 1.5);
        // mannschaft1[2] = new Abwehrspieler(""Juergen"", 69, 0.9);
        // mannschaft1[3] = new Mittelfeldspieler(""Joerg"", 66, 56);
        // mannschaft1[4] = new Mittelfeldspieler(""Mark"", 34, 96);
        // mannschaft1[5] = new Mittelfeldspieler(""Jaafar"", 16, 87);
        // mannschaft1[6] = new Mittelfeldspieler(""Ronnie"", 33, 13);
        // mannschaft1[7] = new Sturmspieler(""Mahmoud"", 28, 3.3);
        // mannschaft1[8] = new Sturmspieler(""Carlos"", 19, 0.4);
        // mannschaft1[9] = new Sturmspieler(""Ivan"", 32, 25.9);
        // mannschaft1[10] = new Torwart(""Jana"", 21, 12);

        mannschaft1[0] = new Abwehrspieler(""Heinz"", 99, 2.3);
        mannschaft1[1] = new Abwehrspieler(""Heineken"", 89, 1.5);
        mannschaft1[2] = new Abwehrspieler(""Juergen"", 69, 0.9);
        mannschaft1[3] = new Mittelfeldspieler(""Joerg"", 66, 0);
        mannschaft1[4] = new Mittelfeldspieler(""Mark"", 34, 0);
        mannschaft1[5] = new Mittelfeldspieler(""Jaafar"", 16, 0);
        mannschaft1[6] = new Mittelfeldspieler(""Ronnie"", 33, 0);
        mannschaft1[7] = new Sturmspieler(""Mahmoud"", 28, 0);
        mannschaft1[8] = new Sturmspieler(""Carlos"", 19, 0);
        mannschaft1[9] = new Sturmspieler(""Ivan"", 32, 0);
        mannschaft1[10] = new Torwart(""Jana"", 21, 0);

        mannschaft2[0] = new Abwehrspieler(""Heinz"", 99, 0);
        mannschaft2[1] = new Abwehrspieler(""Heineken"", 89, 0);
        mannschaft2[2] = new Abwehrspieler(""Juergen"", 69, 0);
        mannschaft2[3] = new Mittelfeldspieler(""Joerg"", 66, 99);
        mannschaft2[4] = new Mittelfeldspieler(""Mark"", 34, 99);
        mannschaft2[5] = new Mittelfeldspieler(""Jaafar"", 16, 99);
        mannschaft2[6] = new Mittelfeldspieler(""Ronnie"", 33, 99);
        mannschaft2[7] = new Sturmspieler(""Mahmoud"", 28, 3.3);
        mannschaft2[8] = new Sturmspieler(""Carlos"", 19, 0.4);
        mannschaft2[9] = new Sturmspieler(""Ivan"", 32, 25.9);
        mannschaft2[10] = new Torwart(""Jana"", 21, 12);

        // mannschaft2[0] = new Abwehrspieler(""Pierre"", 21, 12);
        // mannschaft2[1] = new Abwehrspieler(""Ling Mao"", 45, 3);
        // mannschaft2[2] = new Abwehrspieler(""Boris"", 24, 71.4);
        // mannschaft2[3] = new Mittelfeldspieler(""Dimitri"", 35, 32.4);
        // mannschaft2[4] = new Mittelfeldspieler(""Ranjid"", 23, 56.2);
        // mannschaft2[5] = new Mittelfeldspieler(""Alperen"", 16, 0);
        // mannschaft2[6] = new Mittelfeldspieler(""winfried"", 54, 13.2);
        // mannschaft2[7] = new Sturmspieler(""Herrmann"", 62, 29);
        // mannschaft2[8] = new Sturmspieler(""Aladin Achman Jafra El Saddam Hussein al
        // Halifi"", 65, 0);
        // mannschaft2[9] = new Sturmspieler(""Yoshi Kodai"", 23, 21);
        // mannschaft2[10] = new Torwart(""Ruben"", 107, 010);

        mannschaft1[10].geburtstagFeiern();

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft2));
        System.out.println();
        ausgeben(mannschaft1);
        System.out.println();
        fussballspielen(mannschaft2, mannschaft1);
    }

    /*
     * Justification: This method takes as argument an array of type
     * Fussballspieler, but because of polymorphism, this array will contain objects
     * of types referring to the subclasses of Fussballspieler. And since only one
     * subclass (Abwehrspieler) has a method that returns the number of red cards
     * and could be only used by this class, this is why we have to check if this
     * object is of type Abwehrspieler, if yes, we have to downcast it before
     * calling the method.
     * 
     */

    public static double roteKartenZaehlen(Fussballspieler[] players) {
        double roteKarten = 0;
        for (int i = 0; i < players.length; i++) {
            if (players[i] instanceof Abwehrspieler) { // checking if this player is of type Abwehrspieler
                Abwehrspieler copy = (Abwehrspieler) players[i]; // downcast to be able to apply the method
                roteKarten += copy.getAnzahlRoteKartenJeSpiel();
            }
        }
        return roteKarten;
    }

    /*
     * Justification: Each subclass of Fussballspieler overrides the method
     * toString(), that's why we can call the method without checking the object
     * type, since the compiler will do it implicitly.
     */

    public static void ausgeben(Fussballspieler[] players) {
        for (int i = 0; i < players.length; i++) {
            System.out.println(players[i].toString());
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
        double strength1 = 0;
        double strength2 = 0;

        Abwehrspieler abwehrspielerCopy1;
        Abwehrspieler abwehrspielerCopy2;

        Mittelfeldspieler mittelfeldspielerCopy1;
        Mittelfeldspieler mittelfeldspielerCopy2;

        Sturmspieler sturmspielerCopy1;
        Sturmspieler sturmspielerCopy2;

        Torwart torwartCopy1;
        Torwart torwartCopy2;

        for (int i = 0; i < mannschaft1.length; i++) {
            if (mannschaft1[i] instanceof Abwehrspieler) {
                abwehrspielerCopy1 = (Abwehrspieler) mannschaft1[i];
                strength1 -= abwehrspielerCopy1.getAnzahlRoteKartenJeSpiel();
            } else if (mannschaft1[i] instanceof Mittelfeldspieler) {
                mittelfeldspielerCopy1 = (Mittelfeldspieler) mannschaft1[i];
                strength1 += 0.5 * mittelfeldspielerCopy1.getPaesseJeSpiel();
            } else if (mannschaft1[i] instanceof Sturmspieler) {
                sturmspielerCopy1 = (Sturmspieler) mannschaft1[i];
                strength1 += sturmspielerCopy1.getToreJeSpiel();
            } else {
                torwartCopy1 = (Torwart) mannschaft1[i];
                strength1 -= torwartCopy1.getGegentoreJeSpiel();
            }
        }
        for (int i = 0; i < mannschaft2.length; i++) {
            if (mannschaft2[i] instanceof Abwehrspieler) {
                abwehrspielerCopy2 = (Abwehrspieler) mannschaft2[i];
                strength2 -= abwehrspielerCopy2.getAnzahlRoteKartenJeSpiel();
            } else if (mannschaft2[i] instanceof Mittelfeldspieler) {
                mittelfeldspielerCopy2 = (Mittelfeldspieler) mannschaft2[i];
                strength2 += 0.5 * mittelfeldspielerCopy2.getPaesseJeSpiel();
            } else if (mannschaft2[i] instanceof Sturmspieler) {
                sturmspielerCopy2 = (Sturmspieler) mannschaft2[i];
                strength2 += sturmspielerCopy2.getToreJeSpiel();
            } else {
                torwartCopy2 = (Torwart) mannschaft2[i];
                strength2 -= torwartCopy2.getGegentoreJeSpiel();
            }
        }

        if (strength1 > strength2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (strength1 < strength2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        } else {
            System.out.println(""Unentschieden!"");
        }

        /* bitte implementieren */
    }
}"
Name_240,VName_240,"public class TestBus {

	public static void main(String[] args) {

		Bus[] busse = new Bus[3];

		busse[0] = new Reisebus(6, 6, false);

		busse[1] = new Linienbus(4, 8, true, 30);

		busse[2] = new Bus(6, 6);

		// 2 Türe bei Bus 0 öffnen
		busse[0].tuerOeffnen(2);
		busse[0].tuerOeffnen(4);

		// 1 Türe bei Bus 1 öffnen
		busse[1].tuerOeffnen(5);

		// Sind die Busse fahrbereit?
		for (int i = 0; i < busse.length; i++) {
			System.out.println(""Bus "" + i + "" Fahrbereit? "" + busse[i].istFahrbereit());
		}

		System.out.println();
		// Busse Fahrbereit machen
		busse[0].tuerSchliessen(2);
		busse[0].tuerSchliessen(4);

		busse[1].tuerSchliessen(5);

		// Sind die Busse fahrbereit?
		for (int i = 0; i < busse.length; i++) {
			System.out.println(""Bus "" + i + "" Fahrbereit? "" + busse[i].istFahrbereit());
		}

		//
		System.out.println();
		// Linienbus mit Bus vergleichen
		System.out.println(""LinienBus vs Bus: "" + busse[1].equals(busse[2]));

		System.out.println();
		// Linienbus mit Reisebus vergleichen
		System.out.println(""LinienBus vs Reisebus: "" + busse[1].equals(busse[0]));

		// ein Reisebue erzeugen:
		Reisebus reisebus = new Reisebus(6, 8, true);
		for (int i = 0; i < busse.length; i++) {
			System.out.println(""busse["" + i + ""] vs neues Reisebus: "" + busse[i].equals(reisebus));
		}

	}

}",//
Name_238,VName_238,-,-
Name_236,VName_236,"public class BusTest{
	
	/*  Konstruktoren der Bus Klassen
	public Bus(int anzahlSitze, int anzahlTueren)
	public Linienbus(int anzahlSitze, int anzahlTueren, boolean hatInfoTafel, int anzahlStehplaetze)
	public Reisebus(int anzahlSitze, int anzahlTueren, boolean hatKlimaanlage)
	Tueren werden mit 1,2,3,4 angesprochen, nicht mit 0,1,2,3
	*/
	
	private static Bus[] meineBusse;
	
	
	public static void main(String[] args){
		//initialisiereBusse(8);
		meineBusse = new Bus[6];
		//Bus bus1 = new Bus(30, 0); //Bus1 sollte 1 Tuer haben
		meineBusse[0] = new Bus(30,0);
		meineBusse[1] = new Bus(36,5);
		meineBusse[2] = new Linienbus(40,3, true, 60);
		meineBusse[3] = new Linienbus(20,2, false, 40);
		meineBusse[4] = new Reisebus(60,3, true);
		meineBusse[5] = new Reisebus(27,2, false);
		
		System.out.println(""Ist eine Tür von Bus 0 offen (true) ?: "" + meineBusse[0].istTuerOffen());
		meineBusse[0].tuerSchliessen(1);
		System.out.println(""Sind alle Türen von Bus 0 geschlossen (true) ?: "" + meineBusse[0].istFahrbereit());
		System.out.println(""Ist Bus 0 fahrbereit (true) ?"" + meineBusse[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus 1 offen (true) ?"" + meineBusse[1].istTuerOffen());
		meineBusse[1].tuerOeffnen(1);
		meineBusse[1].tuerSchliessen(1);
		meineBusse[1].tuerSchliessen(2);
		meineBusse[1].tuerSchliessen(3);
		meineBusse[1].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 1 geschlossen (true) ?: "" + meineBusse[0].istFahrbereit());
		System.out.println(""Ist Bus 1 fahrbereit (true) ?"" + meineBusse[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus2 offen (true) ?: "" + meineBusse[1].istTuerOffen());
		meineBusse[2].tuerSchliessen(1);
		meineBusse[2].tuerSchliessen(2);
		meineBusse[2].tuerSchliessen(3);
		meineBusse[2].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 2 geschlossen (true) ?: "" + meineBusse[0].istFahrbereit());
		System.out.println(""Ist Bus 2 fahrbereit (true) ?"" + meineBusse[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus 3 offen (true) ?: "" + meineBusse[1].istTuerOffen());
		meineBusse[1].tuerSchliessen(1);
		meineBusse[1].tuerSchliessen(2);
		meineBusse[1].tuerSchliessen(3);
		meineBusse[1].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 3 geschlossen (true) ?: "" + meineBusse[0].istFahrbereit());
		System.out.println(""Ist Bus 3 fahrbereit (true) ?"" + meineBusse[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus 4 offen (true) ?"" + meineBusse[1].istTuerOffen());
		meineBusse[1].tuerSchliessen(1);
		meineBusse[1].tuerSchliessen(2);
		meineBusse[1].tuerSchliessen(3);
		meineBusse[1].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 4 geschlossen (true) ?: "" + meineBusse[0].istFahrbereit());
		System.out.println(""Ist Bus 4 fahrbereit (true) ?"" + meineBusse[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""ist Reisebus 1 gleich Reisebus 3 (true) ?: "" + meineBusse[2].equals(new Linienbus(40,3, true, 60)));
		System.out.println(""ist Linienbus 2 gleich Linienbus 4 (false) ?: "" + meineBusse[2].equals(meineBusse[4]));
		System.out.println(""ist Reisebus 1 gleich Linienbus 4 (false) ?: "" + meineBusse[2].equals(new Linienbus(40,3, true, 60)));
		
	}
	
	
	private void initialisiereBusse(int anzahl){
		meineBusse = new Bus[anzahl];
		for(int i = 0; i < anzahl; i++){
			meineBusse[i] = null;
		}
	}
	
	
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
	public static Fussballspieler[] heim;
	public static Fussballspieler[] gaeste;
	
	public static void main(String[] args){
		
		heim = new Fussballspieler[11];
		heim[0] = new Torwart(""TH"",20, 1.7);
		heim[1] = new Sturmspieler (""SH1"",21,0.7);
		heim[2] = new Sturmspieler (""SH2"",19,1.6);
		heim[3] = new Mittelfeldspieler(""MH1"",25,17);
		heim[4] = new Mittelfeldspieler(""MH2"",24,22);
		heim[5] = new Mittelfeldspieler(""MH3"",23,17);
		heim[6] = new Mittelfeldspieler(""MH4"",3,17);
		heim[7] = new Abwehrspieler(""AH1"",33,0.02);
		heim[8] = new Abwehrspieler(""AH2"",29,0.01);
		heim[9] = new Abwehrspieler(""AH3"",25,0.02);
		heim[10] = new Abwehrspieler(""AH4"",22,0.07);
		
		gaeste = new Fussballspieler[11];
		gaeste[0] = new Torwart(""TG"",33, 1.7);
		gaeste[1] = new Sturmspieler (""SG1"",25,0.7);
		gaeste[2] = new Sturmspieler (""SG2"",25,1.6);
		gaeste[3] = new Mittelfeldspieler(""MG1"",22,17);
		gaeste[4] = new Mittelfeldspieler(""MG2"",26,22);
		gaeste[5] = new Mittelfeldspieler(""MG3"",28,17);
		gaeste[6] = new Mittelfeldspieler(""MG4"",31,17);
		gaeste[7] = new Abwehrspieler(""AG1"",29,0.02);
		gaeste[8] = new Abwehrspieler(""AG2"",28,0.01);
		gaeste[9] = new Abwehrspieler(""AG3"",31,0.02);
		gaeste[10] = new Abwehrspieler(""AG4"",19,0.07);
		
		Fussballspieler[] sp = new Fussballspieler[6];
		sp[0] = heim[5];
		sp[1] = heim[7];
		sp[2] = heim[1];
		sp[3] = gaeste[5];
		sp[4] = gaeste[4];
		sp[5] = gaeste[8];
		
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(gaeste));
		System.out.println();
		ausgeben(sp);
		System.out.println();
		fussballspielen(heim, gaeste);
	}
	
	public static void ausgeben(Fussballspieler[] spieler){
		//die toString() Methoden der einzelnen Klassen rufen jeweils die toString() MEthode der Superklasse auf
		for (int i = 0; i < spieler.length; i++){
			System.out.println(spieler[i].toString());
		}
	}
	
	public static double roteKartenZaehlen(Fussballspieler[] spieler){
		//nur Abwehrspieler haben das Attribut rote Karte. mit instanceof werden die anderen Spieler ignoriert
		 double count = 0;
		for (int i = 0; i < spieler.length; i++){
			if(spieler[i] instanceof Abwehrspieler){
				Abwehrspieler a = (Abwehrspieler)spieler[i];
				count += a.getAnzahlRoteKartenJeSpiel();
			}
		}
		return count;
	}
	
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		int alterM1 = 0;
		int alterM2 = 0;
		
		double gegentoreM1 = 0;
		double gegentoreM2 = 0;
		
		double paesseM1 = 0;
		double paesseM2 = 0;
		
		double toreM1 = 0;
		double toreM2 = 0;
		
		double roteKartenM1 = 0;
		double roteKartenM2 = 0;
		
		for(int i = 0; i < mannschaft1.length; i++){
			alterM1 += mannschaft1[i].getAlter();
			if(mannschaft1[i] instanceof Torwart){
				Torwart t = (Torwart)mannschaft1[i];
				gegentoreM1 += t.getGegentoreJeSpiel();
			}
			if(mannschaft1[i] instanceof Abwehrspieler){
				Abwehrspieler a = (Abwehrspieler)mannschaft1[i];
				roteKartenM1 += a.getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft1[i] instanceof Mittelfeldspieler){
				Mittelfeldspieler m = (Mittelfeldspieler)mannschaft1[i];
				paesseM1 += m.getPaesseJeSpiel();
			}
			if(mannschaft1[i] instanceof Sturmspieler){
				Sturmspieler s = (Sturmspieler)mannschaft1[i];
				toreM1 += s.getToreJeSpiel();
			}
		}
 
		for(int i = 0; i < mannschaft2.length; i++){
			alterM2 += mannschaft2[i].getAlter();
			if(mannschaft2[i] instanceof Torwart){
				Torwart t = (Torwart)mannschaft2[i];
				gegentoreM2 += t.getGegentoreJeSpiel();
			}
			if(mannschaft2[i] instanceof Abwehrspieler){
				Abwehrspieler a = (Abwehrspieler)mannschaft2[i];
				roteKartenM2 += a.getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft2[i] instanceof Mittelfeldspieler){
				Mittelfeldspieler m = (Mittelfeldspieler)mannschaft2[i];
				paesseM2 += m.getPaesseJeSpiel();
			}
			if(mannschaft2[i] instanceof Sturmspieler){
				Sturmspieler s = (Sturmspieler)mannschaft2[i];
				toreM2 += s.getToreJeSpiel();
			}
		}
		
		//Auswertung
		double score1 = 0;
		double score2 = 0;
		
		score1 = ((alterM1 / 11) + (toreM1 / paesseM1) * gegentoreM1)/roteKartenM1;
		score2 = ((alterM2 / 11) + (toreM2 / paesseM2) * gegentoreM2)/roteKartenM2;
		
		//Ausgabe Ergebnis		
		if(score1 == score2){
			System.out.println(""Unentschieden!"");
		}
		else if(score1 > score2){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		else{
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
 
   
  }
	
}"
Name_243,VName_243,-,"public class TestMannschaft{
        public static void main(String[] args){

            Fussballspieler[] array1 = Fussballspieler[11];
            Fussballspieler[] array2 = Fussballspieler[11];

            array1[0] = new Torwart(""Name1"", 25, 42);
            array1[1] = new Abwehrspieler(""Name2"", 42, 11);
            array1[2] = new Abwehrspieler(""Name3"", 32, 2);
            array1[3] = new Abwehrspieler(""Name4"", 0);
            array1[4] = new Mittelfeldspieler(""Name5"", 36, 165);
            array1[5] = new Mittelfeldspieler(""Name6"", 18,59);
            array1[6] = new Mittelfeldspieler(""Name7"", 35, 100);
            array1[7] = new Mittelfeldspieler(""Name8"", 43,162);
            array1[8] = new Sturmspieler(""Name9"", 32,35);
            array1[9] = new Sturmspieler(""Name10"", 35, 32);
            array1[10] = new Sturmspieler(""Name11"", 25,57);

            array2[0] = new Torwart(""Liam"", 43, 130);
            array2[1] = new Abwehrspieler(""Noah"", 36, 5);
            array2[2] = new Abwehrspieler(""Oliver"", 23, 7);
            array2[3] = new Abwehrspieler(""William"", 19, 4);
            array2[4] = new Mittelfeldspieler(""Elijah"", 26, 134);
            array2[5] = new Mittelfeldspieler(""James"", 27, 112);
            array2[6] = new Mittelfeldspieler(""Benjamin"", 31, 89);
            array2[7] = new Mittelfeldspieler(""Lucas"", 23, 75);
            array2[8] = new Sturmspieler(""Mason"", 40, 36);
            array2[9] = new Sturmspieler(""Ethan"", 30, 52);
            array2[10] = new Sturmspieler(""Leo"", 34, 12);

            array1[1].geburtstagFeiern();

            System.out.println(""Rote Karten: "" + roteKartenZaehlen(array1));
            System.out.println();
            ausgeben(array1);
            System.out.println();
            fussballspielen(array1, array2);
        }

        public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
            int result = 0;
            for (int i = 0; i < 11; i++) {
                if (mannschaft[i] instanceof Abwehrspieler) {
                    result += ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiell();
                }
            }

            return result;
        }
        public static void ausgeben(Fussballspieler[] mannschaft1){
            for (int i = 0; i < 11; i++) {
                System.out.println(mannschaft1[i].toString());
            }
        }
        public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
            int scoreTeam1 = 0;
            int scoreTeam2 = 0;

            int goalsTeam1 = 0;
            int goalsTeam2 = 0;

            for (int i = 0; i < 11; i++) {
                //--Sturmspieler
                if (mannschaft1[i] instanceof Sturmspieler) {
                    goalsTeam1 += ((Sturmspieler) mannschaft1[i]).getToreJeSpiel();
                }

                if (mannschaft2[i] instanceof Sturmspieler) {
                    goalsTeam2 += ((Sturmspieler) mannschaft2[i]).getToreJeSpiel();
                }

                //--Torwart
                if (mannschaft1[i] instanceof Torwart) {
                    scoreTeam1 += ((Torwart) mannschaft1[i]).getGegentoreJeSpiel();
                }

                if (mannschaft2[i] instanceof Torwart) {
                    scoreTeam2 += ((Torwart) mannschaft2[i]).getGegentoreJeSpiel();
                }

                //==Abwehrspieler
                if (mannschaft1[i] instanceof Abwehrspieler) {
                    scoreTeam1 -= ((Abwehrspieler) mannschaft1[i]).getAnzahlRoteKartenJeSpiell() * 3;
                }

                if (mannschaft2[i] instanceof Abwehrspieler) {
                    scoreTeam2 -= ((Abwehrspieler) mannschaft2[i]).getAnzahlRoteKartenJeSpiell() * 3;
                }

                //--Mittelfeldspieler
                if (mannschaft1[i] instanceof Mittelfeldspieler) {
                    scoreTeam1 += ((Mittelfeldspieler) mannschaft1[i]).getPaesseJeSpiel();
                }

                if (mannschaft2[i] instanceof Mittelfeldspieler) {
                    scoreTeam2 += ((Mittelfeldspieler) mannschaft2[i]).getPaesseJeSpiel();
                }
            }

            scoreTeam1+= goalsTeam1;
            scoreTeam2+= goalsTeam2;

            if (scoreTeam1 > scoreTeam2) {
                System.out.println(""Mannschaft 1 gewinnt!"");
            } else if (scoreTeam1 < scoreTeam2) {
                System.out.println(""Mannschaft 2 gewinnt!"");
            } else {
                System.out.println(""Unentschieden!"");
			}
		}
}"
Name_244,VName_244,//,"public class TestMannschaft{
  public static void main(String[] args){
      
	Fussballspieler[] deutschland = new Fussballspieler[11];
	deutschland[0] = new Torwart(""Uwe"", 12, 1);
	deutschland[1] = new Abwehrspieler(""2"", 12, 5);
	deutschland[2] = new Abwehrspieler(""3"", 12, 3);
	deutschland[3] = new Abwehrspieler(""4"", 12, 0);
	deutschland[4] = new Abwehrspieler(""5"", 12, 0);
	deutschland[5] = new Mittelfeldspieler(""6"", 12, 10);
	deutschland[6] = new Mittelfeldspieler(""7"", 12, 22);
	deutschland[7] = new Mittelfeldspieler(""8"", 12, 30);
	deutschland[8] = new Sturmspieler(""9"", 12, 1);
	deutschland[9] = new Sturmspieler(""10"", 12, 4);
	deutschland[10] = new Sturmspieler(""11"", 12, 3);
	
	Fussballspieler[] brasilien = new Fussballspieler[11];
	brasilien[0] = new Torwart(""Manfred"", 12, 7);
	brasilien[1] = new Abwehrspieler(""20"", 12, 3);
	brasilien[2] = new Abwehrspieler(""30"", 12, 2);
	brasilien[3] = new Abwehrspieler(""40"", 12, 3);
	brasilien[4] = new Abwehrspieler(""50"", 12, 5);
	brasilien[5] = new Mittelfeldspieler(""60"", 12, 5);
	brasilien[6] = new Mittelfeldspieler(""70"", 12, 48);
	brasilien[7] = new Mittelfeldspieler(""80"", 12, 34);
	brasilien[8] = new Sturmspieler(""90"", 12, 2);
	brasilien[9] = new Sturmspieler(""100"", 12, 1);
	brasilien[10] = new Sturmspieler(""110"", 12, 3);
	
	deutschland[0].geburtstagFeiern();
	
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    //ausgeben(deutschland);
    fussballspielen(deutschland, brasilien);
  }

  public static double roteKartenZaehlen(Fussballspieler[] a){
	double roteKarten = 0;
	for(int i = 0;i<a.length;i++){
		if(a[i] instanceof Abwehrspieler){
			Abwehrspieler b = (Abwehrspieler)a[i];
			roteKarten += b.getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
  }
  public static void ausgeben(Fussballspieler[] a){
	for(int i = 0;i < a.length;i++){
		if(a[i] instanceof Torwart){
			Torwart t = (Torwart)a[i];
			System.out.println(t.toString());
		}
		if(a[i] instanceof Abwehrspieler){
			Abwehrspieler b = (Abwehrspieler)a[i];
			System.out.println(b.toString());
		}
		if(a[i] instanceof Mittelfeldspieler){
			Mittelfeldspieler m = (Mittelfeldspieler)a[i];
			System.out.println(m.toString());
		}
		if(a[i] instanceof Sturmspieler){
			Sturmspieler s = (Sturmspieler)a[i];
			System.out.println(s.toString());
		}
	}
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	int spielstaerkeTeam1 = 0;
	int spielstaerkeTeam2 = 0;
	int gegentore1 = 0;
	int roteKarten1 = 0;
	int paesse1 = 0;
	int tore1 = 0;
	int gegentore2 = 0;
	int roteKarten2 = 0;
	int paesse2 = 0;
	int tore2 = 0;
	
	for(int i = 0;i < mannschaft1.length;i++){
		if(mannschaft1[i] instanceof Torwart){
			Torwart t = (Torwart)mannschaft1[i];
			gegentore1 += t.getGegentoreJeSpiel();
		}
		if(mannschaft1[i] instanceof Abwehrspieler){
			Abwehrspieler b = (Abwehrspieler)mannschaft1[i];
			roteKarten1 += b.getAnzahlRoteKartenJeSpiel();
		}
		if(mannschaft1[i] instanceof Mittelfeldspieler){
			Mittelfeldspieler m = (Mittelfeldspieler)mannschaft1[i];
			paesse1 += m.getPaesseJeSpiel();
		}
		if(mannschaft1[i] instanceof Sturmspieler){
			Sturmspieler s = (Sturmspieler)mannschaft1[i];
			tore1 += s.getToreJeSpiel();
		}
	}
	for(int i = 0;i < mannschaft2.length;i++){
		if(mannschaft2[i] instanceof Torwart){
			Torwart t = (Torwart)mannschaft2[i];
			gegentore2 += t.getGegentoreJeSpiel();
		}
		if(mannschaft2[i] instanceof Abwehrspieler){
			Abwehrspieler b = (Abwehrspieler)mannschaft2[i];
			roteKarten2 += b.getAnzahlRoteKartenJeSpiel();
		}
		if(mannschaft2[i] instanceof Mittelfeldspieler){
			Mittelfeldspieler m = (Mittelfeldspieler)mannschaft2[i];
			paesse2 += m.getPaesseJeSpiel();
		}
		if(mannschaft2[i] instanceof Sturmspieler){
			Sturmspieler s = (Sturmspieler)mannschaft2[i];
			tore2 += s.getToreJeSpiel();
		}
	}
	if(gegentore1 > gegentore2){
		spielstaerkeTeam2++;
	}
	if(gegentore1 < gegentore2){
		spielstaerkeTeam1++;
	}
	if(roteKarten1 > roteKarten2){
		spielstaerkeTeam2++;
	}
	if(roteKarten1 < roteKarten2){
		spielstaerkeTeam1++;
	}
	if(paesse1 > paesse2){
		spielstaerkeTeam1++;
	}
	if(paesse1 < paesse2){
		spielstaerkeTeam2++;
	}
	if(tore1 > tore2){
		spielstaerkeTeam1++;
	}
	if(tore1 < tore2){
		spielstaerkeTeam2++;
	}
	if(spielstaerkeTeam1 > spielstaerkeTeam2){
		System.out.println(""Mannschaft 1 gewinnt!"");
	}
	if(spielstaerkeTeam1 < spielstaerkeTeam2){
		System.out.println(""Mannschaft 2 gewinnt!"");
	}
	if(spielstaerkeTeam1 == spielstaerkeTeam2){
		System.out.println(""Unentschieden!"");
	}
  }
}"
Name_263,VName_263,"public class TestMannschaft {
  public static void main(String[] args){

     Fussballspieler [] deutschland ={ new Torwart(""Jose"", 26, 3.0),
     new Abwehrspieler(""Tom"", 24, 1),
     new Abwehrspieler(""Ben"", 22, 3),
     new Abwehrspieler(""Tim"", 23, 4),
     new Abwehrspieler(""Carlos"", 25, 0),
     new Mittelfeldspieler(""Franz"", 30, 10),
     new Mittelfeldspieler(""Sebastian"", 21, 6),
     new Mittelfeldspieler(""Hector"", 23, 11),
     new Mittelfeldspieler(""Matt"", 20, 2),
     new Sturmspieler(""Les"", 28, 2),
     new Sturmspieler(""Otto"", 27, 10)};
     Fussballspieler [] italien ={ new Torwart(""Emil"", 24, 3.0),
     new Abwehrspieler(""Omar"", 24, 1),
     new Abwehrspieler(""Juan"", 22, 3),
     new Abwehrspieler(""Oliver"", 23, 4),
     new Abwehrspieler(""Mario"", 25, 0),
     new Mittelfeldspieler(""Alberto"", 30, 10),
     new Mittelfeldspieler(""Rodrigo"", 21, 6),
     new Mittelfeldspieler(""Genaro"", 23, 11),
     new Mittelfeldspieler(""Alex"", 20, 2),
     new Sturmspieler(""Pedro"", 28, 2),
     new Sturmspieler(""Angelo"", 27, 10)};
     deutschland[2].geburtstagFeiern();







System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    ausgeben(italien);

  System.out.println();
  fussballspielen(deutschland, italien);
  }

  public static double roteKartenZaehlen(Fussballspieler[] Mannschaft){
    double Karten=0;
    for(Fussballspieler m : Mannschaft)
		{
			if( m instanceof Abwehrspieler)
			{
				Abwehrspieler a = (Abwehrspieler)m;
				Karten+= a.getAnzahlRoteKartenJeSpiel();

		    }
		}
    return Karten;

  }

  public static void ausgeben(Fussballspieler[] Mannschaft){
    for(Fussballspieler m : Mannschaft)
		{System.out.println(m.toString());
		}


  }

  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double torMannschaft1 =0;
    double torMannschaft2 =0;
    double paesseMannschaft1 =0;
    double paesseMannschaft2 =0;
    double gegentoreMannschaft1 =0;
    double gegentoreMannschaft2 =0;
    double kartenMannschaft1 =0;
    double kartenMannschaft2 =0;
    double staerke1=0;
    double staerke2=0;
    double gewinner;
    for(Fussballspieler m : mannschaft1)
		{
       if( m instanceof Abwehrspieler)
       {
			    Abwehrspieler a = (Abwehrspieler)m;
          kartenMannschaft1+= a.getAnzahlRoteKartenJeSpiel();
	     }
       if( m instanceof Mittelfeldspieler)
       {
  				Mittelfeldspieler v = (Mittelfeldspieler)m;
          paesseMannschaft1+= v.getPaesseJeSpiel();
        }
        if( m instanceof Sturmspieler)
        {
    			Sturmspieler s = (Sturmspieler)m;
          torMannschaft1+= s.getToreJeSpiel();
		    }
        if( m instanceof Torwart)
        {
      			Torwart t = (Torwart)m;
            gegentoreMannschaft1+= t.getGegentoreJeSpiel();
		    }
		}
    staerke1= torMannschaft1 + paesseMannschaft1 + gegentoreMannschaft1 - kartenMannschaft1;

    for(Fussballspieler m : mannschaft2)
		{
       if( m instanceof Abwehrspieler)
       {
			    Abwehrspieler a = (Abwehrspieler)m;
          kartenMannschaft2+= a.getAnzahlRoteKartenJeSpiel();
	     }
       if( m instanceof Mittelfeldspieler)
       {
  				Mittelfeldspieler v = (Mittelfeldspieler)m;
          paesseMannschaft2+= v.getPaesseJeSpiel();
        }
        if( m instanceof Sturmspieler)
        {
    			Sturmspieler s = (Sturmspieler)m;
          torMannschaft2+= s.getToreJeSpiel();
		    }
        if( m instanceof Torwart)
        {
      			Torwart t = (Torwart)m;
            gegentoreMannschaft2+= t.getGegentoreJeSpiel();
            
		    }
		}
    staerke2= torMannschaft2 + paesseMannschaft2 + gegentoreMannschaft2 - kartenMannschaft2;

    if(staerke1 == staerke2){
      System.out.println(""Unentschieden!"");
    }else if (staerke1>staerke2){
      System.out.println(""Mannschaft1 gewinnt!"");
    }else{
      System.out.println(""Mannschaft2 gewinnt!"");
    }

   /* por favor implementar */
  }
}
// Die Verwendung der Polimorfie vermöglicht man die Nutzung der spezifische Eigenschaften und Methoden der Superklasse. Wenn man diese spezifische Methode der Subklasse nutzt, kann man die eigene Eigenschaften jeder Spezialität verwenden.","public class TestBus {

  public static void main(String[] args){
    Bus[] buses ={ new Bus(20, 5),
    new Reisebus(30,10, true),
  new Linienbus(15, 2, false, 10)};
// Tuer öffnen
    buses[1].tuerOeffnen(3);
    buses[2].tuerOeffnen(1);
    // überprüfen, ob der Bus fahrbereit ist.
    buses[0].istFahrbereit();
    buses[1].istFahrbereit();
    buses[2].istFahrbereit();
    for(int x=0; x<buses.length; x++) {
      for(int i=1; i<= buses[x].getAnzahlTueren(); i++) {
        buses[x].tuerSchliessen(i);
      }
      buses[x].losfahren();
    }
    if (buses[1].equals(buses[0])){
      System.out.println(""Sie sind gleich"");
    }
    if (buses[1].equals(buses[2])){
      System.out.println(""1 und 2 sind gleich"");
    }

    Linienbus l2 = new Linienbus(15, 2, false, 10);

    for(int v=0; v<buses.length; v++) {
      if (l2.equals(buses[v])){
        System.out.println(""l2 und alle sind gleich"");
    }

  }
}
}
//Hier kommt die TestBus Klasse rein"
Name_233,VName_233,-,"public class TestMannschaft{
  public static void main(String[] args){
      
     
         Fussballspieler[] FcBarcelona = {
        new Torwart (""Ter Stegen"",26,1),
        new Abwehrspieler(""Alba"",27,1),
        new Abwehrspieler(""Lenglet"",23,6),
        new Abwehrspieler(""Pique"",28,12),
        new Abwehrspieler(""Semedo"",22,0),
        new Mittelfeldspieler(""Vidal"",29,23),
        new Mittelfeldspieler(""Frenkie De Jong"",21,34),
        new Mittelfeldspieler(""Busquets"",30,27),
        new Mittelfeldspieler(""Griezmann"",26,25),
        new Sturmspieler(""Suarez"",29,27),
        new Sturmspieler(""Messi"",33,18)
         };
         
        Fussballspieler[] ManchesterUnited = {
        new Torwart (""De Gea"",27,2),
        new Abwehrspieler(""Jones"",21,7),
        new Abwehrspieler(""Smalling"",24,11),
        new Abwehrspieler(""Rojo"",22,4),
        new Abwehrspieler(""Darmian"",21,6),
        new Mittelfeldspieler(""Mata"",26,13),
        new Mittelfeldspieler(""Martial"",24,22),
        new Mittelfeldspieler(""Mkhitaryan"",29,25),
        new Mittelfeldspieler(""Pogba"",27,29),
        new Sturmspieler(""Ibrahimovic"",36,27),
        new Sturmspieler(""Rooney"",29,22)
        };

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(FcBarcelona));
    System.out.println();
    ausgeben(FcBarcelona);
    System.out.println();
    fussballspielen(FcBarcelona, ManchesterUnited);
  }

  public static double roteKartenZaehlen(Fussballspieler[] M){
      double roteKarten = 0;
    for(int i = 0; i<M.length;i++){
        if(M[i] instanceof Abwehrspieler)
        roteKarten += ((Abwehrspieler)M[i]).getAnzahlRoteKartenJeSpiel();
        }
   return roteKarten;
  }
  public static void ausgeben(Fussballspieler[] M){
      for(int i = 0; i < M.length;i++){
          System.out.println(M[i]);
      }
  
 
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double punkteM1 = 0;
    double punkteM2 = 0;
    double paesseM1 = 0;
    double paesseM2 = 0;
    double toreM1 = 0;
    double toreM2 = 0;
    double gegentoreM1 = 0;
    double gegentoreM2 = 0;
    double rk1 = roteKartenZaehlen(mannschaft1);
    double rk2 = roteKartenZaehlen(mannschaft2);
    for(int i = 0;i< mannschaft1.length;i++){
        if(mannschaft1[i] instanceof Mittelfeldspieler){
        paesseM1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
    }
    }
    for(int i = 0;i< mannschaft2.length;i++){
        if(mannschaft2[i] instanceof Mittelfeldspieler){
        paesseM2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
    }
    }
    for(int i = 0;i<mannschaft1.length;i++){
        if(mannschaft1[i] instanceof Sturmspieler){
            toreM1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
            
        }
        
    }
     for(int i = 0;i<mannschaft2.length;i++){
        if(mannschaft2[i] instanceof Sturmspieler){
            toreM2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
            
        }
        
    }
    for(int i = 0; i< mannschaft1.length;i++){
        if(mannschaft1[i] instanceof Torwart){
            gegentoreM1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
        }
    }
    for(int i = 0; i< mannschaft2.length;i++){
        if(mannschaft2[i] instanceof Torwart){
            gegentoreM2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
}
}
punkteM1 = (toreM1 + paesseM1)-(rk1+gegentoreM1);
	punkteM2 = (toreM2 + paesseM2)-(rk2+gegentoreM2);

	if(punkteM1 > punkteM2){
		System.out.println(""Mannschaft 1 gewinnt"");
	}
	else if(punkteM1 < punkteM2){
		System.out.println(""Mannschaft 2 gewinnt"");
	}
	else if(punkteM1 == punkteM2){
		System.out.println(""Unentschieden!"");
	}
}
}"
Name_234,VName_234,-,-
Name_266,VName_266,-,"public class TestMannschaft {
	
	public static void main(String[] args) {
		Fussballspieler[] fcKoeln={
		new Torwart(""Heinz"", 31, 1.5),
		new Abwehrspieler(""Peter"", 25, 0.3),
		new Abwehrspieler(""Karl"", 21, 0.2),
		new Abwehrspieler(""Dieter"", 22, 0.4),
		new Mittelfeldspieler(""Seppel"", 23, 10.1),
		new Mittelfeldspieler(""Max"", 25, 7.05),
		new Mittelfeldspieler(""Leon"", 19, 8.9),
		new Mittelfeldspieler(""Lukas"", 26, 15.3),
		new Sturmspieler(""Markus"", 22, 0.7),
		new Sturmspieler(""Lars"", 23, 0.9),
		new Sturmspieler(""Wurm"", 24, 1.3)
		};
		
		Fussballspieler[] herthaBsc= {
		new Torwart(""Niemand"", 22, 1.7),
		new Abwehrspieler(""Olli"", 27, 0.7),
		new Abwehrspieler(""Andi"", 25, 0.3),
		new Abwehrspieler(""Otto"", 22, 0.1),
		new Abwehrspieler(""Rolf"", 22, 0.4),
		new Mittelfeldspieler(""Michi"", 21, 5.9),
		new Mittelfeldspieler(""Kevin"", 27, 13.9),
		new Mittelfeldspieler(""Karsten"", 25, 12.0),
		new Mittelfeldspieler(""Timo"", 29, 6.6),
		new Sturmspieler(""Basti"", 19, 1.9),
		new Sturmspieler(""Sep"", 18, 1.1)
		};
		
		herthaBsc[7].geburtstagFeiern();
		System.out.println(""Rote Karten: ""+ roteKartenZaehlen(fcKoeln));
		ausgeben(fcKoeln);
		ausgeben(herthaBsc);
		fussballspielen(fcKoeln, herthaBsc);

	}
	//Diese methode überprüft zuerst ob an der Stelle i ein Abwehrspieler ist. 
	//Falls ja geschieht typecasting und das Objekt an dieser Stelle wird zum Abwehrspieler.
	//Dann wird überprüft wieviele rote Karten dieser Spieler hat und in einer Variable mit der Anzahl roter Karten der anderen Abwehrspieler aus dem Team.
	public static double roteKartenZaehlen(Fussballspieler[] f){
		double x=0.0;
		for(int i=0; i<f.length; i++){
			if(f[i]instanceof Abwehrspieler){
			x+=((Abwehrspieler)f[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return x;
	}
	//An der Stelle i wird die toString Methode angewannt.
	//Diese guckt was für ein Spieler dort ist und führt dementsprechend die toString Methode der Spielerklassse aus.
	public static void ausgeben(Fussballspieler[] f){
		for(int i=0;i<f.length;i++){
			System.out.println(f[i].toString());
		}
	}
	
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		int a=0;
		int b=0;
		double x=0;
		double y=0;
		double d=0;
		double e=0;
		double g=0;
		double h=0;		
		double m=0;
		double n=0;


		
		for(int i=0;i<mannschaft1.length;i++){
			if(mannschaft1[i]instanceof Torwart){
			x+=((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
			}
		}
		for(int i=0;i<mannschaft2.length;i++){
			if(mannschaft2[i]instanceof Torwart){
			y+=((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
			}
		}
		if(x>y)b=b+1;
		else if(x<y)a=a+1;
		else if(x==y)a=a+1; b=b+1;

			d=roteKartenZaehlen(mannschaft1);

			e=roteKartenZaehlen(mannschaft2);
		if(d>e)b=b+1;
		else if(d<e)a=a+1;
		else if(d==e)a=a+1; b=b+1;
		
		for(int i=0;i<mannschaft1.length;i++){
			if(mannschaft1[i]instanceof Mittelfeldspieler){
			g+=((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
			}
		}
		for(int i=0;i<mannschaft2.length;i++){
			if(mannschaft2[i]instanceof Mittelfeldspieler){
			h+=((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
			}
		}
		if(g>h)a=a+1;
		else if(g<h)b=b+1;
		else if(h==g)a=a+1; b=b+1;
		
		for(int i=0;i<mannschaft1.length;i++){
			if(mannschaft1[i]instanceof Sturmspieler){
			n+=((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			}
		}
		for(int i=0;i<mannschaft2.length;i++){
			if(mannschaft2[i]instanceof Sturmspieler){
			m+=((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
			}
		}
		if(n>m)b=b+1;
		else if(n<m)a=a+1;
		else if(n==m)a=a+1; b=b+1;

		if(b>a) System.out.println(""FcKöln gewinnt!"");
		else if(a>b) System.out.println(""HerthaBsc gewinnt!"");
		else System.out.println(""Unentschieden!"");
	}
	
	
}"
Name_5,VName_5,-,-
Name_285,VName_285,"public class TestBus {
	
	
	//1.
	public static void main (String[] args) {
		/*Tuer testtuer = new Tuer();
		System.out.println(testtuer.getOffen());*/
		Bus[] arr = {new Bus(30,2),new Reisebus(40,2,true),new Linienbus(28,3,true,40)};
	
		//2.
		arr[0].tuerOeffnen(1);
		arr[0].istFahrbereit();
		arr[1].tuerOeffnen(1);
		arr[1].tuerOeffnen(2);
		arr[1].istFahrbereit();
		arr[2].tuerOeffnen(3);
		arr[2].istFahrbereit();
		arr[2].istFahrbereit();
		
		//3.
		arr[1].tuerSchliessen(1);
		arr[1].tuerSchliessen(2);
		
		//4.
		arr[2].equals(arr[0]);
		arr[2].equals(arr[1]);
		
		//5.
		Linienbus lb = new Linienbus(30,2,true,38);
		for (int i=0; i<arr.length; i++) {
			lb.equals(arr[i]);
		}
	}
}",//
Name_255,VName_255,"public class TestBus {
	
	public static void main (String[] args) {
		Bus [] buesse = new Bus [3];
		buesse[2] = new Bus (10,1);
		buesse[0] = new Linienbus(10,2,false,20);
		buesse[1] = new Reisebus (15,1,true);
		
		buesse[0].tuerOeffnen(2);
		buesse[0].istFahrbereit();
		
		buesse[0].tuerSchliessen(1);
		buesse[0].tuerSchliessen(2);
		buesse[1].tuerSchliessen(1);
		buesse[2].tuerSchliessen(1);
		
		buesse[0].equals(buesse[2]);
		buesse[0].equals(buesse[1]);
		
		Linienbus l1 = new Linienbus (10,2,false,20);
		for (int i=0; i<3; i++) {
			System.out.println(l1.equals(buesse[i]));
		}
	}
}//Hier kommt die TestBus Klasse rein",//
Name_288,VName_288,"public class TestMannschaft{
  public static void main(String[] args){
      
    
     Fussballspieler[] deutschland = {
			new Torwart (""Dieter"", 66, 22.5),
			new Mittelfeldspieler (""Brian"", 24, 12),
			new Mittelfeldspieler (""Thorben"", 34, 14.6),
			new Mittelfeldspieler(""Manfred"", 45, 17.25),
			new Abwehrspieler (""Jan"", 42, 5.4),
			new Abwehrspieler (""Thorsten"", 53, 2.3),
			new Abwehrspieler (""Simone"", 24, 2.7),
			new Abwehrspieler (""Ursula"", 99, 4.4),
			new Sturmspieler (""Angela"", 65, 3.44),
			new Sturmspieler (""Matthew"", 23, 2.42),
			new Sturmspieler (""Juergen"", 35, 1.23)
		};
		Fussballspieler[] italien = {
			new Torwart (""Melanie"", 26, 13.7),
			new Mittelfeldspieler (""Joachim"", 36, 23.55),
			new Abwehrspieler (""Sabrina"", 666, 666),
			new Abwehrspieler (""Johanna"", 25, 2.67),
			new Abwehrspieler (""Jonas"", 7, 12),
			new Abwehrspieler (""Jeremy"", 19, 34.99),
			new Abwehrspieler (""Monika"", 45, 22.2),
			new Abwehrspieler (""Paula"", 75, 1),
			new Abwehrspieler (""Vivien"", 22, 4.1),
			new Abwehrspieler (""Gerome"", 31, 12.84),
			new Sturmspieler (""Rama"", 49, 38)
		};
	
	deutschland[7].geburtstagFeiern();
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland,italien);
  }

  public static double roteKartenZaehlen(Fussballspieler[] m){
    double roteKarten = 0;
			for(Fussballspieler f: m){
				if (f instanceof Abwehrspieler){
				Abwehrspieler a = (Abwehrspieler) f;
					roteKarten += a.getAnzahlRoteKartenJeSpiel();
				}
			}
			return roteKarten;
  }
  public static void ausgeben(Fussballspieler[] m){
   	for(Fussballspieler f: m) {
			System.out.println(f.toString());
		}
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	double torejespiel = 0;
	double gegentorejespiel = 0;
	double paessejespiel = 0;
	double roteKartenjespiel = 0;
	for(int i=0; i<mannschaft1.length; i++) {
		if(mannschaft1[i] instanceof Torwart){
			Torwart t = (Torwart) mannschaft1[i];
			gegentorejespiel += t.getGegentoreJeSpiel();
		}
		else if (mannschaft1[i] instanceof Abwehrspieler){
			Abwehrspieler a = (Abwehrspieler) mannschaft1[i];
			roteKartenjespiel += a.getAnzahlRoteKartenJeSpiel();
		}
		else if (mannschaft1[i] instanceof Mittelfeldspieler){
			Mittelfeldspieler m = (Mittelfeldspieler) mannschaft1[i];
			paessejespiel += m.getPaesseJeSpiel();
		}
		else if (mannschaft1[i] instanceof Sturmspieler){
			Sturmspieler s = (Sturmspieler) mannschaft1[i];
			torejespiel += s.getToreJeSpiel();
		}
	}
	double spielstaerkeM1 = ((torejespiel/gegentorejespiel)+(paessejespiel/roteKartenjespiel));
	
	for(int i=0; i<mannschaft2.length; i++) {
		if(mannschaft2[i] instanceof Torwart){
			Torwart t = (Torwart) mannschaft2[i];
			gegentorejespiel += t.getGegentoreJeSpiel();
		}
		else if (mannschaft2[i] instanceof Abwehrspieler){
			Abwehrspieler a = (Abwehrspieler) mannschaft2[i];
			roteKartenjespiel += a.getAnzahlRoteKartenJeSpiel();
		}
		else if (mannschaft2[i] instanceof Mittelfeldspieler){
			Mittelfeldspieler m = (Mittelfeldspieler) mannschaft2[i];
			paessejespiel += m.getPaesseJeSpiel();
		}
		else if (mannschaft2[i] instanceof Sturmspieler){
			Sturmspieler s = (Sturmspieler) mannschaft2[i];
			torejespiel += s.getToreJeSpiel();
		}
	}
	double spielstaerkeM2 = ((torejespiel/gegentorejespiel)+(paessejespiel/roteKartenjespiel));
	if (spielstaerkeM1 > spielstaerkeM2)
		System.out.println(""Mannschaft 1 gewinnt!"");
	else if (spielstaerkeM1 == spielstaerkeM2)
		System.out.println(""Unentschieden!"");
	else if (spielstaerkeM1 < spielstaerkeM2) 
		System.out.println(""Mannschaft 2 gewinnt!"");
  }
  
 /*
 * Die Polymorphie ist für roteKartenZaehlen() wichtig, da man Die Abwehrspieler aus dem Array von Fussballspielern herausfiltern kann, diese dann explizit zu abwehrspielern konvertieren,
 * und somit ganz unkompliziert die get-Methode des Abwehrspielers nutzen kann, um alle Roten Karten der Mannschaft zu zaehlen.
 *
 * Für toString() ist die Polymorphie wichtig, da dadurch, wenn eine Ausgabe erzeugt werden soll, der Compiler die toString() Methode von Abwehrspieler nutzt,
 * und man diese dann ganz einfach mit der übergeordneten Methode verknüpfen kann um alle Informationen auszugeben.
 */
}",//
Name_258,VName_258,"public class TestBus {


	public static void main(String[] args) {
		Bus [] busArr = new Bus[] {new Bus(20,3), new Reisebus(12,2,true), new Linienbus(22,1,true,2)};

		busArr[0].tuerOeffnen(3);
		busArr[1].tuerOeffnen(2);
		busArr[2].tuerOeffnen(1);  
	
		System.out.println(""Bus fahrbereit? ""+busArr[0].istFahrbereit());
		System.out.println(""Bus fahrbereit? ""+busArr[1].istFahrbereit());
		System.out.println(""Bus fahrbereit? ""+busArr[2].istFahrbereit());

		busArr[0].tuerSchliessen(3);
		busArr[0].tuerSchliessen(2);
		busArr[0].tuerSchliessen(1);
		busArr[1].tuerSchliessen(2);
		busArr[1].tuerSchliessen(1);
		busArr[2].tuerSchliessen(1);

		System.out.println(""Vergleich Linienbus - Bus: ""+busArr[2].equals(busArr[0]));
		System.out.println(""Vergleich Reisebus - Linienbus: ""+busArr[1].equals(busArr[2]));

		Linienbus l =  new Linienbus(22,1,true,3);

		for (Bus bus : busArr) {
			System.out.println(""Vergleich mit Linienbus: ""+l.equals(bus));
		}
	}
}",//
Name_247,VName_247,//,"// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(......);
    System.out.println();
    fussballspielen(................);
  }

  public static double roteKartenZaehlen(.................){
    
   /* bitte implementieren */
  }
  public static void ausgeben(...){
    
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  }
}"
Name_231,VName_231,-,-
Name_264,VName_264,//,-
Name_262,VName_262,"public class TestBus {
	
	public static void main(String[] args) {
		Bus[] busse = new Bus[3];
		busse[0] = new Bus(50, 3);
		busse[1] = new Reisebus(70, 2, true);
		busse[2] = new Linienbus(60, 3, true, 30);
		
		busse[0].tuerOeffnen(1);
		busse[0].tuerOeffnen(2);
		busse[2].tuerOeffnen(2);
		busse[0].istFahrbereit();
		busse[1].istFahrbereit();
		busse[2].istFahrbereit();
		
		busse[0].istFahrbereit();
		busse[1].tuerSchliessen(1);
		busse[1].tuerSchliessen(2);
		busse[1].istFahrbereit();
		busse[2].istFahrbereit();
		
		busse[2].equals(busse[0]);
		busse[2].equals(busse[1]);
		
		Bus vgl = new Reisebus(70, 2, true);
		vgl.equals(busse[0]);
		vgl.equals(busse[1]);
		vgl.equals(busse[2]);
	}
	
}",//
Name_242,VName_242,-,-
Name_53,VName_53,-,-
Name_253,VName_253,-,-
Name_260,VName_260,-,"public class TestMannschaft{

  public static void main(String[] args){

    Fussballspieler[] deutschland = {
      new Sturmspieler(""Jo"", 24, 1.4),
      new Sturmspieler(""Yannis"", 20, 3.5),
      new Sturmspieler(""Agne"", 20, 4.2),
      new Abwehrspieler(""Pabsch"", 18, 3.3),
      new Abwehrspieler(""Anne-Sophie"", 18, 3),
      new Abwehrspieler(""Manfred"", 18, 3.6),
      new Mittelfeldspieler(""Pieber"", 23, 2.3),
      new Mittelfeldspieler(""Anna"", 27, 1.3),
      new Mittelfeldspieler(""Julius"", 22, 2.6),
      new Mittelfeldspieler(""Karla"", 28, 3.3),
      new Torwart(""Joshua"", 30, 6.3)
      };

     Fussballspieler[] peru = {
      new Sturmspieler(""Jo"", 24, 3.3),
      new Sturmspieler(""Johannes"", 24, 6.7),
      new Sturmspieler(""Yannik"", 20, 2.4),
      new Abwehrspieler(""Agnes"", 20, 1.3),
      new Abwehrspieler(""Pablo"", 18, 1),
      new Abwehrspieler(""Anne"", 18, 0.3),
      new Abwehrspieler(""Mano"", 18, 0.6),
      new Mittelfeldspieler(""Palina"", 23, 9.3),
      new Torwart(""Derfnam"", 27, 3.3),
      new Mittelfeldspieler(""Vicente"", 22, 3.4),
      new Mittelfeldspieler(""Karlotto"", 28, 5.1)
      };
     
    deutschland[3].geburtstagFeiern();
    peru[9].geburtstagFeiern();

    System.out.println(""Rote Karten deutschland: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Rote Karten peru: "" + roteKartenZaehlen(peru));
    ausgeben(deutschland);
    ausgeben(peru);
    fussballspielen(deutschland, peru);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1) {
    double summeRoteKarten = 0;
    for (int i = 0; i < mannschaft1.length; i++) {
      if (mannschaft1[i] instanceof Abwehrspieler) {
        Abwehrspieler spieler = (Abwehrspieler) mannschaft1[i];
        summeRoteKarten += spieler.getAnzahlRoteKartenJeSpiel();
      }
    }
    return summeRoteKarten;
    // kurzer Kommentar: Polymorphie hier nicht relevant, da die Methode nicht überschrieben wird.
  }

  public static void ausgeben(Fussballspieler[] mannschaft1){
      for (int i = 0; i < mannschaft1.length; i++) {
        if(mannschaft1[i] instanceof Torwart) {
          Torwart spieler = (Torwart)mannschaft1[i];
          System.out.println(spieler.toString());
        }
        else if(mannschaft1[i] instanceof Sturmspieler) {
          Sturmspieler spieler = (Sturmspieler)mannschaft1[i];
          System.out.println(spieler.toString());
        }
        else if (mannschaft1[i] instanceof Mittelfeldspieler) {
          Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1[i];
          System.out.println(spieler.toString());
        }
        else {
          Abwehrspieler spieler = (Abwehrspieler)mannschaft1[i];
          System.out.println(spieler.toString());
        }
      }
      // kurzer Kommentar: Es werden die richtigen (spezialisierten) Methoden der jeweiligen Klasse aufgerufen durch Polymorphie. In den Subklassen von Fussballspieler werden die toString-Methode überschrieben und daher werden diese hier verwendet.
  }

  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double mannschaftsstärke1;
    double mannschaftsstärke2;
    int gesAlter1 = 0;
    int gesAlter2 = 0;
    double gesGegentore1 = 0;
    double gesGegentore2 = 0;
    double gesTore1 = 0;
    double gesTore2 = 0;
    double gesPaesse1 = 0;
    double gesPaesse2 = 0;
    for (int i = 0; i < mannschaft1.length; i++) {
      gesAlter1 += mannschaft1[i].getAlter();
      if(mannschaft1[i] instanceof Torwart) {
        Torwart spieler = (Torwart)mannschaft1[i];
        gesGegentore1 += spieler.getGegentoreJeSpiel();
      }
      if(mannschaft1[i] instanceof Sturmspieler) {
        Sturmspieler spieler = (Sturmspieler)mannschaft1[i];
        gesTore1 += spieler.getToreJeSpiel();
      }
      if(mannschaft1[i] instanceof Mittelfeldspieler) {
        Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1[i];
        gesPaesse1 += spieler.getPaesseJeSpiel();
      }
    }
    for (int i = 0; i < mannschaft2.length; i++) {
      gesAlter2 += mannschaft2[i].getAlter();
      if(mannschaft2[i] instanceof Torwart) {
        Torwart spieler = (Torwart)mannschaft2[i];
        gesGegentore2 += spieler.getGegentoreJeSpiel();
      }
      if(mannschaft2[i] instanceof Sturmspieler) {
        Sturmspieler spieler = (Sturmspieler)mannschaft2[i];
        gesTore2 += spieler.getToreJeSpiel();
      }
      if(mannschaft2[i] instanceof Mittelfeldspieler) {
        Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft2[i];
        gesPaesse2 += spieler.getPaesseJeSpiel();
      }
    }
    mannschaftsstärke1 = gesAlter1 + gesTore1 - gesGegentore1 + gesPaesse1 - roteKartenZaehlen(mannschaft1);
    mannschaftsstärke2 = gesAlter2 + gesTore2 - gesGegentore2 + gesPaesse2 - roteKartenZaehlen(mannschaft2);
    if (mannschaftsstärke1 > mannschaftsstärke2) {
      System.out.println(""Mannschaft 1 gewinnt!"");
    }
    if (mannschaftsstärke1 == mannschaftsstärke2) {
      System.out.println(""Unentschieden!"");
    }
    else System.out.println(""Mannschaft 2 gewinnt!"");
  }

}"
Name_268,VName_268,//,-
Name_274,VName_274,//,-
Name_254,VName_254,-,"public class TestMannschaft{

  public static void main(String[] args){
      
     		Fussballspieler[] deutschland = {
			new Torwart (""Torsten"", 36, 2),
			new Abwehrspieler (""Falko"", 33, 7), 
			new Abwehrspieler (""Mathias"", 31, 0),
			new Abwehrspieler (""Hanno"", 33, 0),
			new Mittelfeldspieler (""Tim"", 17,34),
			new Mittelfeldspieler (""Kim"", 37,22),
			new Mittelfeldspieler (""Jim"",25,14),
			new Mittelfeldspieler (""Tom"", 28,25),
			new Sturmspieler (""Mo"", 22, 3),
			new Sturmspieler (""No"", 12, 0),
			new Sturmspieler (""Jo"", 40, 9)
		};
		deutschland[3].geburtstagFeiern ();

		Fussballspieler[] armenien = {
			new Torwart (""Torben"", 34, 0),
			new Abwehrspieler (""Fritz"", 100, 7),
			new Abwehrspieler (""Matti"", 21, 2),
			new Abwehrspieler (""Heino"", 30, 0),
			new Mittelfeldspieler (""Fab"", 17,34),
			new Mittelfeldspieler (""Mab"", 37,22),
			new Mittelfeldspieler (""Tam"",25,14),
			new Mittelfeldspieler (""Tom"", 28,25),
			new Sturmspieler (""Jon"", 22, 3),
			new Sturmspieler (""Jim"", 24, 0),
			new Sturmspieler (""Luis"", 23, 9)
		};
		armenien[9].geburtstagFeiern();


   System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(armenien));
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, armenien);
	}

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1){
	   double alleRotenKarten = 0;
	   for (int i = 0; i < mannschaft1.length; i++) {
		   if (mannschaft1[i] instanceof Abwehrspieler) {
		   Abwehrspieler spieler = (Abwehrspieler)mannschaft1 [i];
		   alleRotenKarten += spieler.getAnzahlRoteKartenJeSpiel(); 
		   }
	   }
	   return alleRotenKarten;
	   //Kommentar: hier ist Polymorphie irrelevant, da verwendete Methode nur einmal im Package und nicht überschrieben wird.
  }
  
  public static void ausgeben(Fussballspieler[] mannschaft1){
	  for (int i = 0; i < mannschaft1.length; i++) {
		  if (mannschaft1[i] instanceof Torwart) {
			  Torwart spieler = (Torwart)mannschaft1 [i];
			  System.out.println(spieler.toString());
		  }
		  else if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft1 [i];
				 System.out.println(spieler.toString());
		  }
		  else if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1 [i];
				 System.out.println(spieler.toString());
		  }
		  else {
			   Abwehrspieler spieler = (Abwehrspieler)mannschaft1 [i];
			  System.out.println(spieler.toString());
			  }
		} //Kommentar: Polymorphie wichtig, da jede Klasse klassenspezifische Attribute hat und eigene toString Methode besitzt und diese verwendet werden sollte.
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	double alleAlter1 = 0;
	double alleGegenTore1 = 0;
	double alleTore1 = 0;
	double allePaesse1 = 0;
	double alleAlter2 = 0;
	double alleGegenTore2 = 0;
	double alleTore2 = 0;
	double allePaesse2 = 0;
	double staerke1 = 0;
	double staerke2 = 0;
		for (int i = 0; i < mannschaft1.length; i++) {
			alleAlter1 += mannschaft1[i].getAlter();
			if (mannschaft1[i] instanceof Torwart) {
				Torwart spieler = (Torwart)mannschaft1 [i];
				alleGegenTore1 +=  spieler.getGegentoreJeSpiel();
				}
			if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft1 [i];
				alleTore1 +=  spieler.getToreJeSpiel();
				}
			if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft1 [i];
				allePaesse1 +=  spieler.getPaesseJeSpiel();
				}
		}
		for (int i = 0; i < mannschaft2.length; i++) {
			alleAlter2 += mannschaft2[i].getAlter();
			if (mannschaft2[i] instanceof Torwart) {
				Torwart spieler = (Torwart)mannschaft2 [i];
				alleGegenTore2 +=  spieler.getGegentoreJeSpiel();
				}
			if (mannschaft2[i] instanceof Sturmspieler) {
				Sturmspieler spieler = (Sturmspieler)mannschaft2 [i];
				alleTore2 +=  spieler.getToreJeSpiel();
				}
			if (mannschaft2[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler spieler = (Mittelfeldspieler)mannschaft2 [i];
				allePaesse2 +=  spieler.getPaesseJeSpiel();
				}
			}	
				
				staerke1 = alleAlter1+allePaesse1+alleTore1-alleGegenTore1-roteKartenZaehlen(mannschaft1);
				staerke2 = alleAlter2+allePaesse2+alleTore2-alleGegenTore2-roteKartenZaehlen(mannschaft2);
				
		if (staerke1 > staerke2) {
			  System.out.println(""Mannschaft 1 gewinnt!"");
			}
			else if (staerke1 == staerke2) {
			  System.out.println(""Unentschieden!"");
			}
			else {
				System.out.println(""Mannschaft 2 gewinnt!"");
		  }
  }
}"
Name_271,VName_271,"public class TestBus{
	public static void main(String[] args){
		//Erstellen Sie in einem Array aus Bussen mit mindestens ein Bus, ein Reisebus und ein Linienbus darin.
		Bus[] b = new Bus[3];
		b[0] = new Bus(30,3);
		b[1] = new Reisebus(50,2,true);
		b[2] = new Linienbus(45,3,false,70);
		//Öffnen Sie von einigen Bussen ein paar Türen und überprüfen Sie dann, ob der Bus fahrbereit ist.
		b[1].tuerOeffnen(1);
		b[2].tuerOeffnen(2);
		for(int i = 0; i<b.length;i++){
			if(b[i].istFahrbereit()){
				System.out.println(""Bus "" + Integer.toString(i+1) + "" fertig."");
			
			}
			else{
				System.out.println(""Bus "" + Integer.toString(i+1) + "" nicht fertig."");
			}
		}
		//Machen Sie alle Busse fahrbereit.
		for(int i = 0; i<b.length; i++){
			for(int d = 0; d<b[i].tueren.length; d++){
				b[i].tueren[d].schliessen();
			}
		}
	//Vergleichen Sie danach ein Linienbus mit einem Bus, dann ein Linienbus mit einem Reisebus.
		if(b[0].equals(b[2])){
			System.out.println(""Bus 1 ist gleich wie Bus 3"");
			
		}
		else{
			System.out.println(""Bus 1 ist anders als Bus 3"");
		}
		
		
		if(b[2].equals(b[1])){
			System.out.println(""Bus 3 ist gleich wie Bus 2"");
			
		}
		else{
			System.out.println(""Bus 3 ist anders als Bus 2"");
		}
		//Erzeugen Sie ein weiteres Objekt von Linienbus oder Reisebus und vergleichen Sie dieses mit allen im Array.
		Linienbus l = new Linienbus(55,4,false,80);
		for(int i = 0; i<b.length;i++){
			if(l.equals(b[i])){
				System.out.println(""Dieser Bus ist gleich wie Bus ""+Integer.toString(i+1));
			}
			else{
				System.out.println(""Dieser Bus ist anders als Bus ""+Integer.toString(i+1));
			}
			
		}
	}
}","public class TestMannschaft{
  public static void main(String[] args){
      
     
	Fussballspieler[] deutschland = new Fussballspieler[11];
	Fussballspieler[] polen = new Fussballspieler[11];
    deutschland[0] = new Torwart(""Jan"", 23, 5);
	deutschland[1] = new Abwehrspieler(""Tadeusz"", 24,4);
    deutschland[2] = new Mittelfeldspieler(""Olgierd"", 24,6);
	deutschland[3] = new Sturmspieler(""Jacek"",23,2);
	deutschland[4] = new Abwehrspieler(""Bolek"", 22,5);
	deutschland[5] = new Mittelfeldspieler(""Gustaw"", 21,4);
	deutschland[6] = new Sturmspieler(""Marcin"", 22,8);
	deutschland[7] = new Abwehrspieler(""Tomasz"", 24,5);
	deutschland[8] = new Mittelfeldspieler(""Wojtek"",23,6);
	deutschland[9] = new Sturmspieler(""Karol"", 26,1);
	deutschland[10] = new Abwehrspieler(""Staszek"", 24,10);
	
	polen[0] = new Torwart(""Kazik"",24,8);
	polen[1] = new Abwehrspieler(""Borys"",25,5);
	polen[2] = new Mittelfeldspieler(""Lucjan"",22,4);
	polen[3] = new Sturmspieler(""Alan"",24,4);
	polen[4] = new Abwehrspieler (""Piotr"",25,4);
	polen[5] = new Mittelfeldspieler(""Kacper"",30,2);
	polen[6] = new Sturmspieler(""Jerzy"",28,0);
	polen[7] = new Abwehrspieler(""Adam"", 20,8);
	polen[8] = new Mittelfeldspieler(""Eustachy"",21,9);
	polen[9] = new Sturmspieler(""Edward"",25,4);
	polen[10] = new Abwehrspieler(""Ryszard"",19,2);
	

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, polen);
	
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
	
		double kartki = 0;
		for(int i = 0; i<mannschaft.length;i++){
			if(mannschaft[i].getClass().getName()== ""Abwehrspieler""){
				kartki = kartki + ((Abwehrspieler)mannschaft[i]).anzahlRoteKartenJeSpiel;
				}
		}
		return kartki;
	}
	public static double toreJeSpielZaehlen(Fussballspieler[] mannschaft){
		
		double bramki = 0;
		for(int i = 0; i<mannschaft.length;i++){
			if(mannschaft[i].getClass().getName()== ""Sturmspieler""){
				bramki = bramki + ((Sturmspieler)mannschaft[i]).toreJeSpiel;
				}
		}
		return bramki;
	}

  
  public static void ausgeben(Fussballspieler[] mannschaft){
    
	
		for(int i = 0; i<mannschaft.length;i++){
			
			System.out.println(mannschaft[i].toString());
		}
		
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
	int punktacja1 = 0;
	int punktacja2 = 0;
	if(toreJeSpielZaehlen(mannschaft1) <toreJeSpielZaehlen( mannschaft2)){
		punktacja2 = punktacja2 + 1;
	}
	if(toreJeSpielZaehlen(mannschaft1) >toreJeSpielZaehlen( mannschaft2)){
		punktacja1++;
	}
	if(roteKartenZaehlen(mannschaft1)>roteKartenZaehlen(mannschaft2)){
		punktacja1++;
	}
	if(roteKartenZaehlen(mannschaft1)<roteKartenZaehlen(mannschaft2)){
		punktacja2++;
	}
	if(punktacja1 == punktacja2){
		System.out.println(""Unentschieden!"");
	}
	if(punktacja1>punktacja2){
		System.out.println(""Mannschaft 1 gewinnt!"");
	
	}
	if(punktacja1<punktacja2){
		System.out.println(""Mannschaft 2 gewinnt!"");
	
	}
  }
}"
Name_246,VName_246,-,-
Name_269,VName_269,-,"public class TestMannschaft{

  public static void main(String[] args){
      
     		Fussballspieler[] Treptow = {
			new Torwart (""Fabian"", 28, 3),
			new Abwehrspieler (""Daniel"", 43, 7), 
			new Abwehrspieler (""Jonas"", 33, 0),
			new Abwehrspieler (""Thomas"", 38, 3),
			new Mittelfeldspieler (""Rudolf"", 43,14),
			new Mittelfeldspieler (""Olaf"", 28,4),
			new Mittelfeldspieler (""Tobi"",39,12),
			new Mittelfeldspieler (""Andy"", 42,24),
			new Sturmspieler (""Nix"", 34, 6),
			new Sturmspieler (""Los"", 19, 4),
			new Sturmspieler (""Moos"", 31, 0)
		};
		Treptow[2].geburtstagFeiern ();

		Fussballspieler[] Kreuzberg = {
			new Torwart (""Franz"", 28, 1),
			new Abwehrspieler (""Matteo"", 74, 3),
			new Abwehrspieler (""Tobi"", 29, 0),
			new Abwehrspieler (""Henry"", 25, 8),
			new Mittelfeldspieler (""Piip"", 32,28),
			new Mittelfeldspieler (""Fieb"", 42,19),
			new Mittelfeldspieler (""Mieb"", 32,8),
			new Mittelfeldspieler (""Tieb"", 39,22),
			new Mittelfeldspieler (""Simo"", 34, 13),
			new Sturmspieler (""Timo"", 30, 8),
			new Sturmspieler (""Lucas"", 25, 0)
		};
		Kreuzberg[7].geburtstagFeiern();


   System.out.println(""Rote Karten Trepi: "" + roteKartenZaehlen(Treptow));
    System.out.println(""Rote Karten Kreuz: "" + roteKartenZaehlen(Kreuzberg));
    ausgeben(Treptow);
    System.out.println();
    fussballspielen(Treptow, Kreuzberg);
	}

  public static double roteKartenZaehlen ( Fussballspieler[] mannschaft1 ){
	   double alleRotenKarten = 0;
	   for (int i = 0; i < mannschaft1.length; i++) {
		   if ( mannschaft1[i] instanceof Abwehrspieler ) {
		   Abwehrspieler sportler = (Abwehrspieler)mannschaft1 [i];
		   alleRotenKarten += sportler.getAnzahlRoteKartenJeSpiel(); 
		   }
	   }
	   return alleRotenKarten;
	   //Kommentar: keine Polymorphie, weil die Methode im Package nur 1x ist ohne überschrieben zuwerden
  }
  
  public static void ausgeben( Fussballspieler[] mannschaft1 ){
	  for (int i = 0; i < mannschaft1.length; i++) {
		  if ( mannschaft1[i] instanceof Torwart ) {
			  Torwart sportler = (Torwart)mannschaft1 [i];
			  System.out.println(sportler.toString());
		  }
		  else if ( mannschaft1[i] instanceof Sturmspieler ) {
				Sturmspieler sportler = (Sturmspieler)mannschaft1 [i];
				 System.out.println(sportler.toString());
		  }
		  else if ( mannschaft1[i] instanceof Mittelfeldspieler ) {
				Mittelfeldspieler sportler = (Mittelfeldspieler)mannschaft1 [i];
				 System.out.println(sportler.toString());
		  }
		  else {
			   Abwehrspieler sportler = (Abwehrspieler)mannschaft1 [i];
			  System.out.println(sportler.toString());
			  }
		} //Kommentar: Polymorphie relevant, aufgrund: toString Methode und klassenspezifische Attribute
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	double jedAlter1 = 0;
	double jedGegenTore1 = 0;
	double jedTore1 = 0;
	double jedPaesse1 = 0;
	double jedAlter2 = 0;
	double jedGegenTore2 = 0;
	double jedTore2 = 0;
	double jedPaesse2 = 0;
	double staerke1 = 0;
	double staerke2 = 0;
		for (int i = 0; i < mannschaft1.length; i++) {
			jedAlter1 += mannschaft1[i].getAlter();
			if (mannschaft1[i] instanceof Torwart) {
				Torwart sportler = (Torwart)mannschaft1 [i];
				jedGegenTore1 += sportler.getGegentoreJeSpiel();
				}
			if (mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler sportler = (Sturmspieler)mannschaft1 [i];
				jedTore1 +=  sportler.getToreJeSpiel();
				}
			if (mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler sportler = (Mittelfeldspieler)mannschaft1 [i];
				jedPaesse1 +=  sportler.getPaesseJeSpiel();
				}
		}
		for (int i = 0; i < mannschaft2.length; i++) {
			jedAlter2 += mannschaft2[i].getAlter();
			if (mannschaft2[i] instanceof Torwart) {
				Torwart sportler = (Torwart)mannschaft2 [i];
				jedGegenTore2 +=  sportler.getGegentoreJeSpiel();
				}
			if (mannschaft2[i] instanceof Sturmspieler) {
				Sturmspieler sportler = (Sturmspieler)mannschaft2 [i];
				jedTore2 +=  sportler.getToreJeSpiel();
				}
			if (mannschaft2[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler sportler = (Mittelfeldspieler)mannschaft2 [i];
				jedPaesse2 +=  sportler.getPaesseJeSpiel();
				}
			}	
				
				staerke1 = jedAlter1-jedGegenTore1-roteKartenZaehlen(mannschaft1)+jedPaesse1+jedTore1;
				staerke2 = jedAlter2-jedGegenTore2-roteKartenZaehlen(mannschaft2)+jedPaesse2+jedTore2;
				
		if (staerke1 > staerke2) {
			  System.out.println(""Mannschaft 1 gewinnt!"");
			}
			else if (staerke1 == staerke2) {
			  System.out.println(""Unentschieden!"");
			}
			else {
				System.out.println(""Mannschaft 2 gewinnt!"");
		  }
  }
}"
Name_250,VName_250,-,-
Name_273,VName_273,"public class TestMannschaft{
  public static void main(String[] args){
	  Fussballspieler[] deutschland={
		  new Torwart(""Torwart"",22,2.5),
		  new Abwehrspieler(""AW1"",21,1.5),
		  new Abwehrspieler(""AW2"",30,1),
		  new Abwehrspieler(""AW3"",25,1),
		  new Abwehrspieler(""AW4"",22,0),
		  new Mittelfeldspieler(""MFS1"",24,100),
		  new Mittelfeldspieler(""MFS2"",26,50.7),
		  new Mittelfeldspieler(""MFS3"",20,63),
		  new Sturmspieler(""SS1"",20,2),
		  new Sturmspieler(""SS2"",30,1.5),
		  new Sturmspieler(""SS3"",23,1.3),
	  };
	  Fussballspieler[] iran={
		  new Torwart(""2Torwart"",20,2),
		  new Abwehrspieler(""2AW1"",26,1),
		  new Abwehrspieler(""2AW2"",22,2),
		  new Abwehrspieler(""2AW3"",25,0),
		  new Abwehrspieler(""2AW4"",27,2),
		  new Mittelfeldspieler(""2MFS1"",23,55),
		  new Mittelfeldspieler(""2MFS2"",29,57.2),
		  new Mittelfeldspieler(""2MFS3"",20,120),
		  new Sturmspieler(""2SS1"",31,1),
		  new Sturmspieler(""2SS2"",22,1.8),
		  new Sturmspieler(""2SS3"",21,2),
	  };
	  for (int i=0; i<11;i++){
		  deutschland[i].geburtstagFeiern();
		  iran[i].geburtstagFeiern();
	  }
	
 

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(iran);
    System.out.println();
    fussballspielen(deutschland,iran);
  }
//Bei der folgenden Methode wurde explizites Typcasting eingesetzt.
  public static double roteKartenZaehlen(Fussballspieler[] fs){
    
   double sum =0;
   
   
	for(int i=0; i<fs.length; i++){
		if(fs[i] instanceof Abwehrspieler){
			sum+=((Abwehrspieler)fs[i]).getAnzahlRoteKartenJeSpiel();
		}
   }
   return sum;
  }
  //Bei der folgenden Methode wurde Polymorphie eingesetzt.
  public static void ausgeben(Fussballspieler[] fs){
	  for(int i=0; i<fs.length;i++){
		  System.out.println(fs[i]);
	  }
  
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	  double tore1=0;
	  double tore2=0;
	  double paesse1=0;
	  double paesse2=0;
	  double gegentore1=0;
	  double gegentore2=0;
	  for(int i=0;i<mannschaft1.length;i++){
		  if(mannschaft1[i] instanceof Sturmspieler){
			  tore1+=((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
		  }
		  if(mannschaft1[i] instanceof Mittelfeldspieler){
			  paesse1+=((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
		  }
		  if(mannschaft1[i] instanceof Torwart){
			  gegentore1+=((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
		  }
	  }
	 for(int i=0;i<mannschaft2.length;i++){
		  if(mannschaft2[i] instanceof Sturmspieler){
			  tore2+=((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
		  }
		  if(mannschaft2[i] instanceof Mittelfeldspieler){
			  paesse2+=((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
		  }
		  if(mannschaft2[i] instanceof Torwart){
			  gegentore2+=((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
		  }
	 }
	 if (tore1>tore2 && paesse1>paesse2 && gegentore1<gegentore2 && roteKartenZaehlen(mannschaft1)<roteKartenZaehlen(mannschaft2)){
		 System.out.println(""Mannschaft 1 gewinnt!"");
	 }
	 if (tore1<tore2 && paesse1<paesse2 && gegentore1>gegentore2 && roteKartenZaehlen(mannschaft1)>roteKartenZaehlen(mannschaft2)){
		 System.out.println(""Mannschaft 2 gewinnt!"");
	 }
	 else  System.out.println(""Unentschieden!"");
	 
	
  }
}",-
Name_270,VName_270,-,-
Name_248,VName_248,"public class TestBus{
	public static void main (String[] args){
	Bus[] gruppe = {    new Bus( 45, 0),
						new Reisebus( 60, 9, true),
						new Linienbus( 30, 3, true, 25)
	                };
    
	gruppe[0].tuerOeffnen(1);
	gruppe[1].tuerOeffnen(3);
	gruppe[2].tuerOeffnen(2);
	
	System.out.println(gruppe[0].istFahrbereit());
	System.out.println(gruppe[1].istFahrbereit());
	System.out.println(gruppe[2].istFahrbereit());
	
	
	gruppe[0].tuerSchliessen(1);
	
	
	for(int i = 1 ; i<=gruppe[1].getAnzahlTueren(); i++){
		gruppe[1].tuerSchliessen(i);
	}
	for(int i = 1 ; i<=gruppe[2].getAnzahlTueren(); i++){
		gruppe[2].tuerSchliessen(i);
	}
	
	
	gruppe[2].equals(gruppe[0]);
	gruppe[2].equals(gruppe[1]);
	
	Reisebus altesModell = new Reisebus(50, 3, true);
	
	for(int i = 0; i<gruppe.length; i++){
		gruppe[i].equals(altesModell);
	}
	
	}
}","public class TestMannschaft{
	public static void main(String[] args){
      
    Fussballspieler [] deutschland = {
		new Torwart(""Jens Lehmann"", 42, 0.4),
		new Abwehrspieler (""Phillip Lahm"", 35, 0.4),
		new Abwehrspieler (""Jerome Boateng"", 27, 0.2),
		new Abwehrspieler (""Arne Friedrich"", 37, 0.3),
		new Abwehrspieler (""Robert Huth"", 33, 0.6),
		new Mittelfeldspieler(""Bastian Schweinsteiger"", 29, 104.0),
		new Mittelfeldspieler(""Bernd Schneider"", 39, 121.0),
		new Mittelfeldspieler(""Torsten Frings"", 34, 87.0), 
		new Mittelfeldspieler(""Clemens Fritz"", 36, 97.0), 
	    new Sturmspieler(""Mario Gomez"", 34, 2.4), 
		new Sturmspieler(""Miroslav Klose"", 38, 3.6), 
		};
     
    Fussballspieler [] mannschaft2 = {
		new Torwart(""Timo Hildebrandt"", 24, 0.5),
		new Abwehrspieler (""Arthur Boka"", 48, 0.7),
		new Abwehrspieler (""Khalid Bhoulahrouz"", 22, 0.1),
		new Abwehrspieler (""Peter Zwegat"", 82, 0.3),
		new Abwehrspieler (""Thorsten Legat"", 43, 0.8),
		new Mittelfeldspieler(""Thomas Hitzelsberger"", 19, 134.0),
		new Mittelfeldspieler(""Marcel Jansen"", 29, 142.0),
		new Mittelfeldspieler(""Lothar Mathaeus"", 54, 87.0), 
		new Mittelfeldspieler(""Gerd Müller"", 88, 87.0), 
	    new Sturmspieler(""Patrick Helmes"", 25, 2.7), 
		new Sturmspieler(""Stefan Kiesling"", 42, 2.8), 
		};
		
	(mannschaft2[4]).geburtstagFeiern();

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, mannschaft2);
    }
    //Durch umwandeln des Objekttyps in Zeile 45 ist es möglich die Methode getAnzahlRoteKartenJeSpiel aufzurufen 
    public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
		double gesamtRoteKarten = 0;
		for(int i = 0; i<mannschaft.length; i++){
			if(mannschaft[i] instanceof Abwehrspieler){
				gesamtRoteKarten += ((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return gesamtRoteKarten;
	}
	
    //Durch überschreiben der toString Methode klappt das. 
    public static void ausgeben(Fussballspieler[] mannschaft){
		for(int i=0; i < mannschaft.length; i++){
			System.out.println(mannschaft[i]);
		}		 
    }
	
    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double roteKarten1 = 0;
		double roteKarten2 = 0;
		double paesse1 = 0;
		double paesse2 = 0;
		double tore1 = 0;
		double tore2 = 0;
		double kassiert1 = 0;
		double kassiert2 = 0;
		
		for(int i = 0; i<mannschaft1.length; i++){
			if(mannschaft1[i] instanceof Torwart){
				kassiert1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
			}
			if(mannschaft1[i] instanceof Abwehrspieler){
				roteKarten1 += ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft1[i] instanceof Mittelfeldspieler){
				paesse1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
			}
			if(mannschaft1[i] instanceof Sturmspieler){
				tore1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			}
		}
		
	    for(int i = 0; i<mannschaft2.length; i++){
			if(mannschaft2[i] instanceof Torwart){
				kassiert2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
			}
			if(mannschaft2[i] instanceof Abwehrspieler){
				roteKarten2 += ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft2[i] instanceof Mittelfeldspieler){
				paesse2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
			}
			if(mannschaft2[i] instanceof Sturmspieler){
				tore2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
			}
		}
        double spielstaerke1 = (paesse1 + tore1)/(roteKarten1+kassiert1);
	    double spielstaerke2 = (paesse2 + tore2)/(roteKarten2+kassiert2);
    
	    if (spielstaerke1>spielstaerke2){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
	    if (spielstaerke1 == spielstaerke2){
			System.out.println(""Unentschieden!"");
		}
		if (spielstaerke1<spielstaerke2){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
    }
}"
Name_245,VName_245,-,-
Name_275,VName_275,//,-
Name_272,VName_272,"public class TestBus {
	public static void main(String[] args) {
		
		Bus bus1 = new Bus(40, 3);
		Reisebus reisebus1 = new Reisebus(30, 2, true);
		Linienbus linienbus1 = new Linienbus(20, 4, true, 16);


		
		Bus[] busse = { bus1, reisebus1, linienbus1 };

		bus1.tuerOeffnen(1);
		bus1.tuerOeffnen(2);
		reisebus1.tuerOeffnen(1);
		linienbus1.tuerOeffnen(1);
		linienbus1.tuerOeffnen(2);

		bus1.istFahrbereit();
		reisebus1.istFahrbereit();
		linienbus1.istFahrbereit();

		bus1.losfahren();
		reisebus1.losfahren();
		linienbus1.losfahren();

		linienbus1.equals(bus1);
		linienbus1.equals(reisebus1);

		Reisebus reisebus2 = new Reisebus(25, 3, false);
		for (int i = 0; i < busse.length; i++) {
			reisebus2.equals(busse[i]);
		}

	}

}",//
Name_249,VName_249,//,-
Name_277,VName_277,"public class TestMannschaft {
    public static void main(String[] args) {

        // Arrays definieren
        Fussballspieler[] deutschland = new Fussballspieler[11];
        Fussballspieler[] mannschaft2 = new Fussballspieler[11];

        // Werte einfügen
        deutschland[0] = new Abwehrspieler(""Heinz"", 99, 2.3);
        deutschland[1] = new Abwehrspieler(""Heineken"", 89, 1.5);
        deutschland[2] = new Abwehrspieler(""Juergen"", 69, 0.9);
        deutschland[3] = new Mittelfeldspieler(""Joerg"", 66, 56);
        deutschland[4] = new Mittelfeldspieler(""Mark"", 34, 96);
        deutschland[5] = new Mittelfeldspieler(""Jaafar"", 16, 87);
        deutschland[6] = new Mittelfeldspieler(""Ronnie"", 33, 13);
        deutschland[7] = new Sturmspieler(""Mahmoud"", 28, 3.3);
        deutschland[8] = new Sturmspieler(""Carlos"", 19, 0.4);
        deutschland[9] = new Sturmspieler(""Ivan"", 32, 25.9);
        deutschland[10] = new Torwart(""Jana"", 21, 12);

        mannschaft2[0] = new Abwehrspieler(""Pierre"", 21, 12);
        mannschaft2[1] = new Abwehrspieler(""Ling Mao"", 45, 3);
        mannschaft2[2] = new Abwehrspieler(""Boris"", 24, 71.4);
        mannschaft2[3] = new Mittelfeldspieler(""Dimitri"", 35, 32.4);
        mannschaft2[4] = new Mittelfeldspieler(""Ranjid"", 23, 56.2);
        mannschaft2[5] = new Mittelfeldspieler(""Alperen"", 16, 0);
        mannschaft2[6] = new Mittelfeldspieler(""winfried"", 54, 13.2);
        mannschaft2[7] = new Sturmspieler(""Herrmann"", 62, 29);
        mannschaft2[8] = new Sturmspieler(""Aladin Achman Jafra El Saddam Hussein al Halifi"", 65, 0);
        mannschaft2[9] = new Sturmspieler(""Yoshi Kodai"", 23, 21);
        mannschaft2[10] = new Torwart(""Ruben"", 107, 010);

        deutschland[10].geburtstagFeiern();

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft2));
        System.out.println();
        ausgeben(deutschland);
        System.out.println();
        fussballspielen(mannschaft2, deutschland);
    }

    /*
     * Justification: This method takes as argument an array of type
     * Fussballspieler, but because of polymorphism, this array will contain objects
     * of types referring to the subclasses of Fussballspieler. And since only one
     * subclass (Abwehrspieler) has a method that returns the number of red cards
     * and could be only used by this class, this is why we have to check if this
     * object is of type Abwehrspieler, if yes, we have to downcast it before
     * calling the method.
     * 
     */

    public static double roteKartenZaehlen(Fussballspieler[] players) {
        double roteKarten = 0;
        for (int i = 0; i < players.length; i++) {
            if (players[i] instanceof Abwehrspieler) { // checking if this player is of type Abwehrspieler
                Abwehrspieler copy = (Abwehrspieler) players[i]; // downcast to be able to apply the method
                roteKarten += copy.getAnzahlRoteKartenJeSpiel();
            }
        }
        return roteKarten;
    }

    /*
     * Justification: Each subclass of Fussballspieler overrides the method
     * toString(), that's why we can call the method without checking the object
     * type, since the compiler will do it implicitly.
     */

    public static void ausgeben(Fussballspieler[] players) {
        for (int i = 0; i < players.length; i++) {
            System.out.println(players[i].toString());
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
        double strength1 = 0;
        double strength2 = 0;

        Abwehrspieler abwehrspielerCopy1;
        Abwehrspieler abwehrspielerCopy2;

        Mittelfeldspieler mittelfeldspielerCopy1;
        Mittelfeldspieler mittelfeldspielerCopy2;

        Sturmspieler sturmspielerCopy1;
        Sturmspieler sturmspielerCopy2;

        Torwart torwartCopy1;
        Torwart torwartCopy2;

        for (int i = 0; i < mannschaft1.length; i++) {
            if (mannschaft1[i] instanceof Abwehrspieler) {
                abwehrspielerCopy1 = (Abwehrspieler) mannschaft1[i];
                strength1 -= abwehrspielerCopy1.getAnzahlRoteKartenJeSpiel();
            } else if (mannschaft1[i] instanceof Mittelfeldspieler) {
                mittelfeldspielerCopy1 = (Mittelfeldspieler) mannschaft1[i];
                strength1 += 0.5 * mittelfeldspielerCopy1.getPaesseJeSpiel();
            } else if (mannschaft1[i] instanceof Sturmspieler) {
                sturmspielerCopy1 = (Sturmspieler) mannschaft1[i];
                strength1 += sturmspielerCopy1.getToreJeSpiel();
            } else {
                torwartCopy1 = (Torwart) mannschaft1[i];
                strength1 -= torwartCopy1.getGegentoreJeSpiel();
            }
        }
        for (int i = 0; i < mannschaft2.length; i++) {
            if (mannschaft2[i] instanceof Abwehrspieler) {
                abwehrspielerCopy2 = (Abwehrspieler) mannschaft2[i];
                strength2 -= abwehrspielerCopy2.getAnzahlRoteKartenJeSpiel();
            } else if (mannschaft2[i] instanceof Mittelfeldspieler) {
                mittelfeldspielerCopy2 = (Mittelfeldspieler) mannschaft2[i];
                strength2 += 0.5 * mittelfeldspielerCopy2.getPaesseJeSpiel();
            } else if (mannschaft2[i] instanceof Sturmspieler) {
                sturmspielerCopy2 = (Sturmspieler) mannschaft2[i];
                strength2 += sturmspielerCopy2.getToreJeSpiel();
            } else {
                torwartCopy2 = (Torwart) mannschaft2[i];
                strength2 -= torwartCopy2.getGegentoreJeSpiel();
            }
        }

        if (strength1 > strength2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (strength1 < strength2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        } else {
            System.out.println(""Unentschieden!"");
        }

        /* bitte implementieren */
    }
}",//
Name_17,VName_17,-,-
Name_267,VName_267,-,-
Name_261,VName_261,-,"public class TestMannschaft {
	
	
	public static void main(String[] args){
      
     // Arrays definieren
		Fussballspieler[] deutschland = {
		new Abwehrspieler( ""Thomas Muella"", 23 , 1.5),
		new Abwehrspieler(""Pascal Dietrich"", 21, 3.75 ),
		new Abwehrspieler( ""Simon Says"", 25, 6),
		new Abwehrspieler( ""Ferdinand Fernando"", 29, 4.9 ),
		new Mittelfeldspieler( ""Max Mustermann"", 22, 5.10 ),
		new Mittelfeldspieler( ""Horst Schweiger"", 33, 2.70 ),
		new Mittelfeldspieler( ""Lukas Podolski"", 21, 6.7 ),
		new Mittelfeldspieler( ""Java Oracle"", 32, 6.9 ),
		new Sturmspieler( ""Peter Maffay"", 27, 9.0 ),
		new Sturmspieler( ""Manfred Stuermer"", 28, 3.50 ),
		new Torwart( ""Mr Unstoppable"", 23, 4.25 )
		};
		
		Fussballspieler[] usa = {
		new Abwehrspieler( ""Alessandro Alles"", 22, 3.70 ),
		new Abwehrspieler(""Martin Fischer"", 29, 6.80 ),
		new Abwehrspieler( ""Linux Linor"", 45, 10.50 ),
		new Abwehrspieler( ""Apple MacOS"", 20, 0.3),
		new Mittelfeldspieler( ""Jonas Johannsen"", 21, 2.30 ),
		new Mittelfeldspieler( ""Till Schweigtnicht"", 28, 4.15 ),
		new Mittelfeldspieler( ""Spielt Nichtgut"", 18, 7.98 ),
		new Mittelfeldspieler( ""Hatkeine Motivation"", 24, 8.9 ),
		new Sturmspieler( ""Microsoft Update"", 35, 5.6 ),
		new Sturmspieler( ""Istnicht Freiwillighier"", 30, 3.1),
		new Torwart( ""Hannes HaeltjedenBall"", 25, 11.0)
		};	
			
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(usa);
    System.out.println();
    fussballspielen(deutschland, usa);
  }

  public static double roteKartenZaehlen(Fussballspieler[] m){
   double roteKartenGesamt = 0;
   for(int i = 0; i < m.length; i++) {
		if( m[i] instanceof Abwehrspieler) {
			Abwehrspieler c = (Abwehrspieler)m[i]; //nur Abwehrspieler werden gespeichert
		
		roteKartenGesamt += c.getAnzahlRoteKartenJeSpiel();
		}	
	}
return roteKartenGesamt;	
  }
  // Das Array von Fußballspielern kann verschiedene Spieler haben. Mann kann aber nur mit Abwehrspielern arbeiten,
  // wenn man mit expliziter Konversion (siehe Zeile 54) die Objekttypen anpasst.
  
  public static void ausgeben(Fussballspieler[] m){
    for(int i = 0; i < m.length; i++) {
		System.out.println(m[i].toString());
	}	
   
  } 
  // Die Methode ausgeben benutzt die jeweilige toString Methode der Unterklassen, da diese näher an der Unterklassen (Abwehrspieler, ... etc) sind.
  
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double spielstaerke1 = 0;
	double spielstaerke2 = 0;
	double roteKartenGesamt = 0;
	double toreGesamt = 0;
	double gegentoreGesamt = 0;
	double paesseGesamt = 0;
	
	for(int i = 0; i < mannschaft1.length; i++) {
		if( mannschaft1[i] instanceof Abwehrspieler) {
			Abwehrspieler c = (Abwehrspieler)mannschaft1[i]; 
		
		roteKartenGesamt += c.getAnzahlRoteKartenJeSpiel();
		}	
		
		if( mannschaft1[i] instanceof Mittelfeldspieler) {
			Mittelfeldspieler c = (Mittelfeldspieler)mannschaft1[i]; 
		
		paesseGesamt += c.getPaesseJeSpiel();
		}	
		
		if( mannschaft1[i] instanceof Sturmspieler) {
			Sturmspieler c = (Sturmspieler)mannschaft1[i]; 
		
		toreGesamt += c.getToreJeSpiel();
		}
		
		if( mannschaft1[i] instanceof Torwart) {
			Torwart c = (Torwart)mannschaft1[i]; 
		
		gegentoreGesamt += c.getGegentoreJeSpiel();
		}
	 
	}
	 spielstaerke1 = paesseGesamt + toreGesamt - gegentoreGesamt - roteKartenGesamt;
	 roteKartenGesamt = 0;
	 toreGesamt = 0;
	 gegentoreGesamt = 0;
	 paesseGesamt = 0;
			
			for(int i = 0; i < mannschaft2.length; i++) {
		if( mannschaft2[i] instanceof Abwehrspieler) {
			Abwehrspieler c = (Abwehrspieler)mannschaft2[i]; 
		
		roteKartenGesamt += c.getAnzahlRoteKartenJeSpiel();
		}	
		
		if( mannschaft2[i] instanceof Mittelfeldspieler) {
			Mittelfeldspieler c = (Mittelfeldspieler)mannschaft2[i]; 
		
		paesseGesamt += c.getPaesseJeSpiel();
		}	
		
		if( mannschaft2[i] instanceof Sturmspieler) {
			Sturmspieler c = (Sturmspieler)mannschaft2[i]; 
		
		toreGesamt += c.getToreJeSpiel();
		}
		
		if( mannschaft2[i] instanceof Torwart) {
			Torwart c = (Torwart)mannschaft2[i]; 
		
		gegentoreGesamt += c.getGegentoreJeSpiel();
		}
	 }
	 spielstaerke2 = paesseGesamt + toreGesamt - gegentoreGesamt - roteKartenGesamt;
		if(spielstaerke1 > spielstaerke2) 
			System.out.println(""Mannschaft 1 gewinnt!"");
			
		else if(spielstaerke2 > spielstaerke1) 
			System.out.println(""Mannschaft 2 gewinnt!"");
			
		else System.out.println(""Unentschieden!"");
  }
}"
Name_283,VName_283,"// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     Fussballspieler[] deutschland = new Fussballspieler[11];
	 Fussballspieler[] mannschaft2 = new Fussballspieler[11];
	
    //Werte einfügen
	//Torwart1
     deutschland[0]= new Torwart(""T1"",20,3);
	 //Abwehr1
	 deutschland[1]= new Abwehrspieler(""A1"",20,0.5);
	 deutschland[2]= new Abwehrspieler(""A2"",20,0.5);
	 deutschland[3]= new Abwehrspieler(""A3"",20,0.5);
	 deutschland[4]= new Abwehrspieler(""A4"",20,0.5);
	 //Mittelfeld1
	 deutschland[5]= new Mittelfeldspieler(""M1"",20,30);
	 deutschland[6]= new Mittelfeldspieler(""M2"",20,30);
	 deutschland[7]= new Mittelfeldspieler(""M3"",20,30);
	 deutschland[8]= new Mittelfeldspieler(""M4"",20,30);
	 //Sturm1
	 deutschland[9]= new Sturmspieler(""S1"",20,4);
	 deutschland[10]= new Sturmspieler(""S2"",20,4);
	 
	 //Torwart2
     mannschaft2[0]= new Torwart(""TW1"",20,3);
	 //Abwehr2
	 mannschaft2[1]= new Abwehrspieler(""Ab1"",20,0.5);
	 mannschaft2[2]= new Abwehrspieler(""Ab2"",20,0.5);
	 mannschaft2[3]= new Abwehrspieler(""Ab3"",20,0.5);
	 mannschaft2[4]= new Abwehrspieler(""Ab4"",20,0.5);
	 //Mittelfeld2
	 mannschaft2[5]= new Mittelfeldspieler(""Mi1"",20,30);
	 mannschaft2[6]= new Mittelfeldspieler(""Mi4"",20,30);
	 mannschaft2[7]= new Mittelfeldspieler(""Mi4"",20,30);
	 mannschaft2[8]= new Mittelfeldspieler(""Mi4"",20,30);
	 //Sturm2
	 mannschaft2[9]= new Sturmspieler(""St1"",20,6);
	 mannschaft2[10]= new Sturmspieler(""St2"",20,6);
	 
	 mannschaft2[10].geburtstagFeiern();
	 

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, mannschaft2);

  }

  public static double roteKartenZaehlen(Fussballspieler[] F){
	/* Hier spielt Polymorphie eine Rolle, da es sich um ein Array der Klasse Fussballspieler handelt welche die Oberklasse von der Klasse Abwehrspieler ist auf die zugegriffen werden soll. Aufgrund von Type-casting funktioniert diese Methode der Implementierrung*/
	double roteKarten=0;	
    for(int i=0; i<F.length; i++){
		if(F[i] instanceof Abwehrspieler){
			roteKarten+=((Abwehrspieler)F[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	return roteKarten;
   /* bitte implementieren */
  }
  
  public static void ausgeben(Fussballspieler[] F){
	  /* Hier spielt Polymorphie eine Rolle da die Oberklasse Fussballspieler die Methode toString auch enthält. Da die Objekte beim aufrufen aber näher an der gewünschten Klasse sind wird die richtige toString Methode verwendet. */
	 for(int i=0;i<F.length; i++){
		System.out.println(F[i].toString());
	 }
  }
  
  public static double toreZaehlen(Fussballspieler[] F){
	double tore=0;	
    for(int i=0; i<F.length; i++){
		if(F[i] instanceof Sturmspieler){
			tore+=((Sturmspieler)F[i]).getToreJeSpiel();
		}
	}
	return tore;
  }
  
  public static double paesseZaehlen(Fussballspieler[] F){
	double paesse=0;	
    for(int i=0; i<F.length; i++){
		if(F[i] instanceof Mittelfeldspieler){
			paesse+=((Mittelfeldspieler)F[i]).getPaesseJeSpiel();
		}
	}
	return paesse;
  }
  
  public static double gegentoreZaehlen(Fussballspieler[] F){
	double gegentore=0;	
    for(int i=0; i<F.length; i++){
		if(F[i] instanceof Torwart){
			gegentore+=((Torwart)F[i]).getGegentoreJeSpiel();
		}
	}
	return gegentore;
  }
  
	
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double spielstaerke1;
	double spielstaerke2;
	spielstaerke1=(toreZaehlen(mannschaft1)*paesseZaehlen(mannschaft1)*11)/(roteKartenZaehlen(mannschaft1)+gegentoreZaehlen(mannschaft1));
    spielstaerke2=(toreZaehlen(mannschaft2)*paesseZaehlen(mannschaft2)*11)/(roteKartenZaehlen(mannschaft2)+gegentoreZaehlen(mannschaft2));
	if(spielstaerke1>spielstaerke2){
		System.out.println(""Mannschaft 1 gewinnt!"");
	}
	else if(spielstaerke1<spielstaerke2){
		System.out.println(""Mannschaft 2 gewinnt!"");
	}
	else{
		System.out.println(""Unentschieden!"");
	}
	}
   /* bitte implementieren */
  }","public class TestBus{
	public static void main (String[] args){
		Bus[] busse = {
			new Bus(60,3),
			new Reisebus(40,2,true),
			new Linienbus(40,3,true,20)};
		
		busse[0].tuerOeffnen(2);
		((Linienbus)busse[2]).tuerOeffnen(3);
		
		for(int i=0;i<((Bus)busse[0]).tueren.length;i++){
			((Bus)busse[0]).tuerSchliessen(i);
		}
		
		for(int i=0;i<((Reisebus)busse[1]).tueren.length;i++){
			((Reisebus)busse[1]).tuerSchliessen(i);
		}
		
		((Linienbus)busse[2]).istFahrbereit();
		
		((Linienbus)busse[2]).equals((Bus)busse[0]);
		((Linienbus)busse[2]).equals((Reisebus)busse[1]);
		
		Reisebus r = new Reisebus(40,2,true);
		r.equals((Bus)busse[0]);
		r.equals((Reisebus)busse[1]);
		r.equals((Linienbus)busse[2]);
		
	}
}"
Name_282,VName_282,"//Hier kommt die TestBus Klasse rein
public class TestBus{ 
    public static void main(String[] args){ 
        Bus[] m1 = {
            new Bus(20,3),
            new Reisebus(15,2,true),
            new Linienbus(40,4,true,20)
        };
       m1[0].tueren[0].oeffnen(); 
	   ((Bus)m1[2]).tuerOeffnen(1); 
        m1[2].tueren[3].oeffnen();
        m1[0].istFahrbereit();
        ((Linienbus)m1[2]).istFahrbereit();
		
        for (int x = 0 ;x< m1.length;x++){
            for (int i = 0 ; i < m1[x].tueren.length;i++){
                m1[x].tueren[i].schliessen();
            }
        }
        
    ((Bus)m1[0]).istFahrbereit();
    ((Reisebus)m1[1]).istFahrbereit(); 
    ((Linienbus)m1[2]).istFahrbereit(); 
    
    ((Linienbus)m1[2]).equals(m1[0]);
    ((Reisebus)m1[1]).equals(m1[2]);
    
    Reisebus m2 = new Reisebus(15,2,true);
    for (int x = 0;x< m1.length;x++){
        ((Reisebus)m2).equals(m1[x]);
    }
        
    }
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
		Fussballspieler[] deutschland = {
			new Torwart(""Manuel Neuer"", 34, 3.4),
			new Abwehrspieler(""Robin Koch"", 23,  0.20),
			new Abwehrspieler(""Jonas Hector"", 30,  0.17),
			new Abwehrspieler(""Matthias Ginter"", 26,  0.4),
			new Mittelfeldspieler(""Toni Kroos"", 30, 11.2),
			new Mittelfeldspieler(""Joshua Kimmich"", 25, 7),
			new Mittelfeldspieler(""Julian Brandt"", 24, 8),
			new Mittelfeldspieler(""Sebastian Rudy"", 30, 5.5),
			new Mittelfeldspieler(""Leon Goretzka"", 25, 12),
			new Sturmspieler(""Timo Werner"", 24, 2.5),
			new Sturmspieler(""Serge Gnabry"", 24, 1.7)
			};
		
		
		Fussballspieler[] France = {
			new Torwart(""Alphonse Areola"", 27, 3.2),
			new Abwehrspieler(""Benjamin Pavard"", 24,  0.25),
			new Abwehrspieler(""Presnel Kimpembe"", 24,  0.3),
			new Abwehrspieler(""Kurt Zouma"", 25,  0.5),
			new Mittelfeldspieler(""Tanguy Ndombele"", 23, 10.4),
			new Mittelfeldspieler(""Corentin Tolisso"", 25, 6),
			new Mittelfeldspieler(""N'Golo Kanté"", 29, 7),
			new Mittelfeldspieler(""Matteo Guendouzi"", 21, 4.4),
			new Mittelfeldspieler(""Moussa Sissoko"", 30, 14),
			new Sturmspieler(""Antoine Griezmann"", 29, 1.1),
			new Sturmspieler(""Thomas Lemar"", 24, 2.7)
			}; ;
		
     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, France); 
  }

  public static double roteKartenZaehlen(Fussballspieler[] x){
    double sum = 0; 
	for (int i = 0 ; i< x.length;i++){
		if (x[i] instanceof Abwehrspieler){
			sum = sum + ((Abwehrspieler)x[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	
	return sum; 
   /* bitte implementieren */
  }
  public static void ausgeben(Fussballspieler[] x){
	  for (int i= 0; i< x.length;i++){  
		  if (x[i] instanceof Abwehrspieler){ System.out.println(((Abwehrspieler)x[i]).toString());}
		  if (x[i] instanceof Mittelfeldspieler){ System.out.println(((Mittelfeldspieler)x[i]).toString());}
		  if (x[i] instanceof Sturmspieler){ System.out.println(((Sturmspieler)x[i]).toString());}
		  if (x[i] instanceof Torwart){ System.out.println(((Torwart)x[i]).toString());}	  
		  }
	  }
    
	 public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double sum1 = 0; 
	double sum2 = 0;
	double gpasse1 = 0; 
	double gpasse2 = 0;
	double tore1 = 0; 
	double tore2 = 0; 
	double Spielstaerke1 = 0;
	double Spielstaerke2 = 0; 
	for (int i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Abwehrspieler){
			sum1 = sum1 + ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
		}	
	}
	for ( int i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Abwehrspieler){
			sum2 = sum2 + ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
		}	
	}
	if (sum1 <= sum2){ 
		if (sum1 == sum2) {}
			else { 
			Spielstaerke1 = Spielstaerke1 + 2;
			}
	}
	else { Spielstaerke2 = Spielstaerke2 + 2;
	}
	
	for (int  i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Mittelfeldspieler){
			gpasse1 = gpasse1 + ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
		}	
	}
	for ( int i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Mittelfeldspieler){
			gpasse2 = gpasse2 + ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
		}	
	}
	if (gpasse1 <= gpasse2){ 
		if (gpasse1 == gpasse2) {}
		else { Spielstaerke2 = Spielstaerke2 + 2;}
	}
	else { Spielstaerke1 = Spielstaerke1 + 2;
	}

  for ( int i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Sturmspieler){
			tore1 = tore1 + ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
		}	
	}
	for (int  i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Sturmspieler){
			tore2 = tore2 +((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
		}	
	}
  for ( int i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Torwart){
			tore2 = tore2 - ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
		}	
	}
	for ( int i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Torwart){
			tore1 = tore1 -((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
		}	
	}
  
  if (tore1 <= tore2){ 
		if (tore1 == tore2) {}
		else { Spielstaerke2 = Spielstaerke2 + 5;}
	}
	else { Spielstaerke1 = Spielstaerke1 + 5;}
  
   /* bitte implementieren */

  
  if (Spielstaerke1 <= Spielstaerke2){
	  if (Spielstaerke1 == Spielstaerke2){ 
	  System.out.println(""Unentschieden!"");
	  }
	  else {
		   System.out.println(""Mannschaft 2 gewinnt!""); 
	  }
  }
  else {
	   System.out.println(""Mannschaft 1 gewinnt!""); 
  }
  
  }
  
}"
Name_276,VName_276,"// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
    public static void main(String[] args){

        // Arrays definieren
        Fussballspieler[] deutschland = new Fussballspieler[11];
        Fussballspieler[] frankfurt = new Fussballspieler[11];


        //Werte einfügen
        deutschland[0] = new Torwart(""Neuer"", 36, 0);
        deutschland[1] = new Abwehrspieler(""Lahm"", 37, 0);
        deutschland[2] = new Abwehrspieler(""Boateng"", 32, 0.2);
        deutschland[3] = new Abwehrspieler(""Hummels"", 32, 0.1);
        deutschland[4] = new Abwehrspieler(""Kimmich"", 25, 0.3);
        deutschland[5] = new Mittelfeldspieler(""Kroos"", 31, 86.6);
        deutschland[6] = new Mittelfeldspieler(""Khedira"", 33, 80.0);
        deutschland[7] = new Mittelfeldspieler(""Oezil"", 33, 85.0);
        deutschland[8] = new Mittelfeldspieler(""Schweinsteiger"", 38, 78.00);
        deutschland[9] = new Sturmspieler(""Klose"", 40, 0.5);
        deutschland[10] = new Sturmspieler(""Müller"", 35, 1.0);

        frankfurt[0] = new Torwart(""Trapp"", 35, 1.0);
        frankfurt[1] = new Abwehrspieler(""Hinteregger"", 28, 0.5);
        frankfurt[2] = new Abwehrspieler(""Hasebe"", 37, 0.0);
        frankfurt[3] = new Abwehrspieler(""Ndicka"", 21, 0.1);
        frankfurt[4] = new Abwehrspieler(""Toure"", 24, 0.2);
        frankfurt[5] = new Mittelfeldspieler(""Kostic"", 26, 70.0);
        frankfurt[6] = new Mittelfeldspieler(""Sow"", 25, 80.0);
        frankfurt[7] = new Mittelfeldspieler(""Rode"", 28, 75.0);
        frankfurt[8] = new Mittelfeldspieler(""Kamada"", 23, 80.0);
        frankfurt[9] = new Sturmspieler(""Silva"", 25, 2);
        frankfurt[10] = new Sturmspieler(""Jovic"", 24, 2);


        System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
        System.out.println();
        ausgeben(frankfurt);
        System.out.println();
        fussballspielen(frankfurt, deutschland);
    }

    public static double roteKartenZaehlen(Fussballspieler[] team){

        // hier soll auf die getter-Methode von Abwehrspieler zugegriffen werden und
        // die anderen Spiele haben die nicht, daher wird hier ein type cast gemacht
        // um keinen Laufzeitfehler zu bekommen.

        double roteKarten = 0.0;

        for (int i = 0; i < team.length; i++){

            if (team[i] instanceof Abwehrspieler){


                roteKarten += ((Abwehrspieler) team[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return roteKarten;
    }

    public static double paesseZaehlen(Fussballspieler[] team){
        double paesse = 0.0;

        for (int i = 0; i < team.length; i++){

            if (team[i] instanceof Mittelfeldspieler){

                paesse += ((Mittelfeldspieler) team[i]).getPaesseJeSpiel();
            }
        }
        return paesse;
    }

    public static double toreZaehlen(Fussballspieler[] team){
        double tore = 0.0;

        for (int i = 0; i < team.length; i++){

            if (team[i] instanceof Sturmspieler){

                tore += ((Sturmspieler) team[i]).getToreJeSpiel();
            }
        }
        return tore;
    }

    public static double gegentoreZaehlen(Fussballspieler[] team){
        double gegentore = 0.0;

        for (int i = 0; i < team.length; i++){

            if (team[i] instanceof Torwart){

                gegentore += ((Torwart) team[i]).getGegentoreJeSpiel();
            }
        }
        return gegentore;
    }


    public static void ausgeben(Fussballspieler[] team){

        // hier muss kein type cast gemacht werden, da in jeder Klasse die Methode toString
        // definiert wurde udn selbst wenn sie nicht definiert wäre, ist sie immer noch
        // in der Überklasse definiert.
        for (int i = 0; i < team.length; i ++){
            System.out.println(team[i].toString());
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){

        double score1 = 0.0;
        double score2 = 0.0;
        double[] values1 = new double[4], values2 = new double[4];

        values1[0] = -1*roteKartenZaehlen(mannschaft1);
        values2[0] = -1*roteKartenZaehlen(mannschaft2);

        values1[1] = -1*gegentoreZaehlen(mannschaft1);
        values2[1] = -1*gegentoreZaehlen(mannschaft2);

        values1[2] = toreZaehlen(mannschaft1);
        values2[2] = toreZaehlen(mannschaft2);

        values1[3] = paesseZaehlen(mannschaft1);
        values2[3] = paesseZaehlen(mannschaft2);



        for (int i = 0; i < values1.length; i ++){

            if (values1[i] * values1[i] > values2[i] * values2[i]){

                score1 += values1[i];
            } else if (values1[i] == values2[i]){
                continue;
            } else {

                score2 += values2[i];
            }
        }

        if (score1 > score2){

            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (score1 == score2){

            System.out.println(""Unentschieden!"");
        } else {

            System.out.println(""Mannschaft 2 gewinnt!"");
        }


    }
}",//
Name_278,VName_278,-,-
Name_280,VName_280,"public class TestMannschaft{
  public static void main(String[] args){
    Fussballspieler[] deutschland ={new Torwart(""Neuer"",34,0.82),
                                    new Sturmspieler(""Gnarby"",25,0.3),
                                    new Sturmspieler(""Sane"",24,0.26),
                                    new Sturmspieler(""Werner"",24,0.5),
                                    new Mittelfeldspieler(""Schulz"",27,22.1),
                                    new Mittelfeldspieler(""Kroos"",31,74.9),
                                    new Mittelfeldspieler(""Kimmich"",25,71.4),
                                    new Mittelfeldspieler(""Kehrer"",24,44.2),
                                    new Abwehrspieler(""Hummels"",32,0),
                                    new Abwehrspieler(""Suele"",25,0),
                                    new Abwehrspieler(""Ginter"",27,0)};  
    Fussballspieler[] frankreich ={new Torwart(""Lloris"",34,0.97),
                                   new Sturmspieler(""Giroud"",34,0.5),
                                   new Sturmspieler(""Mbappe"",22,0.71),
                                   new Sturmspieler(""Griezmann"",29,0.38),
                                   new Sturmspieler(""Matuidi"",33,0.1),
                                   new Mittelfeldspieler(""Kante"",29,53),
                                   new Mittelfeldspieler(""Pogba"",27,47.3),
                                   new Abwehrspieler(""Pavard"",24,0),
                                   new Abwehrspieler(""Varane"",27,0),
                                   new Abwehrspieler(""Kimpembe"",25,0),
                                   new Abwehrspieler(""Hernandez"",24,0),};
                                   
    deutschland[2].geburtstagFeiern();
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    ausgeben(deutschland);
    fussballspielen(deutschland,frankreich);
  }
  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1){
     double sum=0;
     for(Fussballspieler f: mannschaft1){
        if(f instanceof Abwehrspieler){
            Abwehrspieler a=(Abwehrspieler)f;
            sum+=a.getAnzahlRoteKartenJeSpiel();
        } 
     }
     return sum;
  }
  //Durch instanceof wird die unterklasse abwehrspieler spezifische aufgerufen.
  public static void ausgeben(Fussballspieler[] mannschaft1){
    for(int i=0; i < mannschaft1.length; i++){
        System.out.print(mannschaft1[i].toString());
    } 
  }
  //Durch die for-each schleife wird alle elemente der Array aufgerufen and ausgeben.
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double TorwartSpielstaerke1=0;
    double StuermerSpielstaerke1=0;
    double Mittelfeldstaerke1=0;
    double Abwehrstaerke1=0;
    double TorwartSpielstaerke2=0;
    double StuermerSpielstaerke2=0;
    double Mittelfeldstaerke2=0;
    double Abwehrstaerke2=0;
    double Team1staerke=0;
    double Team2staerke=0;
    for(Fussballspieler f:mannschaft1){
        if(f instanceof Torwart){
            Torwart t = (Torwart)f;
            TorwartSpielstaerke1 = t.getAlter() -10 * t.getGegentoreJeSpiel();
        }
        if(f instanceof Sturmspieler){
            Sturmspieler s = (Sturmspieler)f;
            StuermerSpielstaerke1 += (s.getAlter()+10*s.getToreJeSpiel());
        }
        if(f instanceof Mittelfeldspieler){
            Mittelfeldspieler m = (Mittelfeldspieler)f;
            Mittelfeldstaerke1 += (m.getAlter()+m.getPaesseJeSpiel()/10);
        }
        if(f instanceof Abwehrspieler){
            Abwehrspieler a = (Abwehrspieler)f;
            Abwehrstaerke1 += (a.getAlter()-10*a.getAnzahlRoteKartenJeSpiel());
        }
        Team1staerke=TorwartSpielstaerke1+StuermerSpielstaerke1+Mittelfeldstaerke1+Abwehrstaerke1;
    }
    for(Fussballspieler f:mannschaft2){
        if(f instanceof Torwart){
            Torwart t = (Torwart)f;
            TorwartSpielstaerke2 = t.getAlter() -10 * t.getGegentoreJeSpiel();
        }
        if(f instanceof Sturmspieler){
            Sturmspieler s = (Sturmspieler)f;
            StuermerSpielstaerke2 += (s.getAlter()+10*s.getToreJeSpiel());
        }
        if(f instanceof Mittelfeldspieler){
            Mittelfeldspieler m = (Mittelfeldspieler)f;
            Mittelfeldstaerke2 += (m.getAlter()+m.getPaesseJeSpiel()/10);
        }
        if(f instanceof Abwehrspieler){
            Abwehrspieler a = (Abwehrspieler)f;
            Abwehrstaerke2 += (a.getAlter()-10*a.getAnzahlRoteKartenJeSpiel());
        }
        Team2staerke=TorwartSpielstaerke2+StuermerSpielstaerke2+Mittelfeldstaerke2+Abwehrstaerke2;
    }
    if(Team1staerke>Team2staerke){
        System.out.print(""Mannschaft 1 gewinnt"");
    }
    if(Team1staerke==Team2staerke){
        System.out.print(""Unentschieden!"");
    }
    if(Team1staerke<Team2staerke){
        System.out.print(""Mannschaft 2 gewinnt"");
    }
  }
}",//
Name_251,VName_251,"public class TestMannschaft{
	public static void main (String[] args){
		// Arrays definieren
		Fussballspieler[] Hertha = new Fussballspieler[11];
		Fussballspieler[] Bayern = new Fussballspieler[11];
		
		//Werte einfügen
		Hertha[0] = new Torwart(""Jarstein"", 36, 0.8);
		Hertha[1] = new Abwehrspieler(""Pekarik"", 34, 0.0);
		Hertha[2] = new Abwehrspieler(""Torunarigha"", 23, 0.3);
		Hertha[3] = new Abwehrspieler(""Boyata"", 30, 0.2);
		Hertha[4] = new Abwehrspieler(""Mittelstädt"", 23, 0.1);
		Hertha[5] = new Mittelfeldspieler(""Tousart"", 23, 60);
		Hertha[6] = new Mittelfeldspieler(""Guendouzi"", 21, 90);
		Hertha[7] = new Mittelfeldspieler(""Darida"", 30, 120);
		Hertha[8] = new Sturmspieler(""Cunha"", 21, 1.4);
		Hertha[9] = new Sturmspieler(""Cordoba"", 27, 1.6);
		Hertha[10] = new Sturmspieler(""Piatek"", 25, 0.9);
				
		Bayern[0] = new Torwart(""Neuer"", 34, 0.9);
		Bayern[1] = new Abwehrspieler(""Alaba"", 28, 0.3);
		Bayern[2] = new Abwehrspieler(""Süle"", 25, 0.2);
		Bayern[3] = new Abwehrspieler(""Boateng"", 32, 0.4);
		Bayern[4] = new Abwehrspieler(""Davies"", 20, 0.1);
		Bayern[5] = new Mittelfeldspieler(""Kimmich"", 25, 120);
		Bayern[6] = new Mittelfeldspieler(""Goretzka"", 25, 85);
		Bayern[7] = new Mittelfeldspieler(""Gnabry"", 25, 58);
		Bayern[8] = new Sturmspieler(""Müller"", 31, 1.0);
		Bayern[9] = new Sturmspieler(""Lewandowski"", 32, 1.9);
		Bayern[10] = new Sturmspieler(""Coman"", 24, 0.4);
		
		System.out.println(""Rote Karten: "" +roteKartenZaehlen(Hertha));
		System.out.println();
		ausgeben(Hertha);
		System.out.println();
		fussballspielen(Hertha, Bayern);
		
	}
	/* In der Methode ""roteKartenZaehlen"" erfolgt durch explizites Casting auf die Objektklasse ""Abwehrspieler"" der korrekte Aufruf der Methode ""getKarten""
	aus der Klasse Abwehrspieler. Ohne das Casting würde beim Kompilieren ein Fehler auftreten, da die Klasse ""Fussballspieler"" aus der das der Methode
	übergebene Objekt stammt, keine Methode ""getKarten"" besitzt.*/
	public static double roteKartenZaehlen(Fussballspieler[] x){
		Fussballspieler[] m = x;
		double roteKartenGesamt = 0.0;
		for(int i = 0; i < m.length; i++){
			if(m[i] instanceof Abwehrspieler){
				roteKartenGesamt += ((Abwehrspieler)m[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return roteKartenGesamt;
	}
	/* Die Methode ""ausgeben"" ruft hier jeweils die toString-Methode welche ""am nächsten"" am Objekt ist auf. Also z.B. für jeden Abwehrspieler die toString-Methode
	aus der Klasse Abwehrspieler. In den toString-Methoden der einzelnen Positionsklassen wird zusätzlich zur Ausgabe der Position individuellen Attributen
	durch super.toString() noch die toString-Methode der Oberklasse (Fussballspieler) aufgerufen welche die anderen, allgemeinen, relevanten Spielerdaten ausgibt.*/
	public static void ausgeben(Fussballspieler[] m){
		for(int i = 0; i<m.length; i++){
			System.out.println(m[i]);
		}
	}
	
	public static void fussballspielen (Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double spielstaerke1 = spielstaerke(mannschaft1);
		double spielstaerke2 = spielstaerke(mannschaft2);
		if(spielstaerke1 > spielstaerke2){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		else if(spielstaerke1 == spielstaerke2){
			System.out.println(""Unentschieden!"");
		}
		else
		System.out.println(""Mannschaft 2 gewinnt!"");
	}
	
	public static double spielstaerke(Fussballspieler[] x){
		double spielstaerke = 0.0;
		double t = 0.0;
		double a = 0.0;
		double m = 0.0;
		double s = 0.0;
		for(int i = 0; i< x.length; i++){
			if(x[i] instanceof Torwart){
				t += ((Torwart)x[i]).getGegentoreJeSpiel();
			}
			else if(x[i] instanceof Abwehrspieler){
				a += ((Abwehrspieler)x[i]).getAnzahlRoteKartenJeSpiel();
			}
			else if(x[i] instanceof Mittelfeldspieler){
				m += ((Mittelfeldspieler)x[i]).getPaesseJeSpiel();
			}
			else s += ((Sturmspieler)x[i]).getToreJeSpiel();			
		}
		return spielstaerke = 2*t+1*a+0.1*m+2*s;
	}
	
}","public class TestBus{
	public static void main(String[] args){
		Bus[] b = new Bus[3];
		b[0] = new Bus(80,2);
		b[1] = new Reisebus(60,2,true);
		b[2] = new Linienbus(80,4,false,100);
		
		b[0].tuerOeffnen(1);
		b[0].tuerOeffnen(2);
		b[0].tuerOeffnen(1);
		b[1].tuerOeffnen(1);
		b[1].tuerOeffnen(5);
		
		istFahrbereit(b[0]);
		/*
		b[0].istFahrbereit();
		b[1].istFahrbereit();
		b[2].istFahrbereit();
		*/
		/*
		machFahrbereit(b);
		b[2].equals(b[0]);
		b[2].equals(b[1]);*/
		
		
	}
	
	public static void machFahrbereit(Bus[] x){
		Bus [] y = x;
		for(int i = 0; i< y.length; i++){
			if(!((Bus)y[i]).istFahrbereit()){
				for(int j=1; j<=y.length;j++){
					y[i].tuerSchliessen(j);
				}
			}
		}
	}
	
	//1. Erstellen Sie in einem Array aus Bussen mit mindestens ein Bus, ein Reisebus und ein Linienbus darin.
	//2. Öffnen Sie von einigen Bussen ein paar Türen und überprüfen Sie dann, ob der Bus fahrbereit ist.
	//3. Machen Sie alle Busse fahrbereit
	//4. Vergleichen Sie danach ein Linienbus mit einem Bus, dann ein Linienbus mit einem Reisebus.
	//5. Erzeugen Sie ein weiteres Objekt von Linienbus oder Reisebus und vergleichen Sie dieses mit allen im Array
}"
Name_279,VName_279,-,-
Name_284,VName_284,//,"public class TestBus {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

        Bus[] bus_array = new Bus[] {new Bus(17, 3), new Reisebus(32, 2, false), new Linienbus(26, 4, true, 18)};

        bus_array[0].tuerOeffnen(1);
        bus_array[0].tuerOeffnen(2);
        bus_array[2].tuerOeffnen(3);
        bus_array[2].tuerOeffnen(4);

        bus_array[0].istFahrbereit();
        bus_array[2].istFahrbereit();


        for(int c = 0; c<bus_array.length; c++) {
            for(int i=0; i<bus_array[c].tueren.length; i++ ) {
                bus_array[c].tueren[i].schliessen();
            }
        }

        bus_array[0].equals(bus_array[2]);
        bus_array[1].equals(bus_array[2]);

        Linienbus l1 = new Linienbus(26, 4, true, 18);

        for(int c = 0; c<bus_array.length; c++) {
            l1.equals(bus_array[c]);
        }

    }

}"
Name_281,VName_281,-,-
Name_259,VName_259,"// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft {
    public static void main(String[] args) {
        
        Fussballspieler[] deutschland = new Fussballspieler[11];
        Fussballspieler[] italien = new Fussballspieler[11];
        deutschland[0] = new Torwart(""Manuel Neuer"", 30, 0.7);
        deutschland[1] = new Abwehrspieler(""Benedikt Hoewedes"", 28, 0.05);
        deutschland[2] = new Abwehrspieler(""Jerome Boateng"", 28, 0.03);
        deutschland[3] = new Abwehrspieler(""Mats Hummels"", 28, 0.06);
        deutschland[4] = new Mittelfeldspieler(""Joshua Kimmich"", 21, 58.0);
        deutschland[5] = new Mittelfeldspieler(""Sami Khedira"", 29, 51.8);
        deutschland[6] = new Mittelfeldspieler(""Toni Kroos"", 26, 62.5);
        deutschland[7] = new Mittelfeldspieler(""Jonas Hector"", 25, 47.2);
        deutschland[8] = new Sturmspieler(""Thomas Mueller"", 26, 0.8);
        deutschland[9] = new Sturmspieler(""Mesut Oezil"", 27, 0.3);
        deutschland[10] = new Sturmspieler(""Mario Gomez"", 31, 0.6);
        italien[0] = new Torwart(""Gianluigi Buffon"", 38, 0.6);
        italien[1] = new Abwehrspieler(""Giorgio Chiellini"", 31, 0.04);
        italien[2] = new Abwehrspieler(""Leonardo Bonucci"", 29, 0.03);
        italien[3] = new Abwehrspieler(""Andrea Barzagli"", 35, 0.06);
        italien[4] = new Mittelfeldspieler(""Mattia De Sciglio"", 23, 50.5);
        italien[5] = new Mittelfeldspieler(""Emanuele Giaccherini"", 29, 52.3);
        italien[6] = new Mittelfeldspieler(""Marco Parolo"", 31, 56.6);
        italien[7] = new Mittelfeldspieler(""Stefano Sturaro"", 23, 44.8);
        italien[8] = new Mittelfeldspieler(""Alessandro Florenzi"", 25, 60.7);
        italien[9] = new Sturmspieler(""Eder Citadin Martins"", 29, 0.3);
        italien[10] = new Sturmspieler(""Graziano Pelle"", 30, 0.7);
        italien[10].geburtstagFeiern();

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
        System.out.println();
        ausgeben(deutschland);
        System.out.println();
        fussballspielen(deutschland, italien);
    }
  
    public static double roteKartenZaehlen(Fussballspieler[] mannschaft) {
        double roteKarten = 0.0;
        // Die in der folgenden Schleife aufgerufene Methode getAnzahlRoteKartenJeSpiel() ist in Fussballspieler nicht definiert,
        // sondern nur in der davon abgeleiteten Klasse Abwehrspieler. Vor dem Aufruf der Methode muss daher sichergestellt sein,
        // dass das aufrufende Objekt vom Typ Abwehrspieler ist. Dazu dient die entsprechende Abfrage mittels instanceof und das 
        // casten des Objekts.
        for (int i = 0; i < mannschaft.length; i++) {
            if (mannschaft[i] instanceof Abwehrspieler) {
                roteKarten += ((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return roteKarten;
    }

    public static void ausgeben(Fussballspieler[] mannschaft) {
        // Die Methode toString() ist in der Basisklasse Fussballspieler definiert und wird in allen abgeleiteten Klassen überschrieben.
        // Der folgende Code compiliert also auch ohne Casting, weil die Basisklasse bereits eine toString()-Methode bereitstellt.
        // Bei der Ausführung des Programms, weiss der Java-Interpreter von welchem Subtyp der Fussballspieler ist, und führt die 
        // toString()-Methode der entsprechenden Klasse aus.
        for (int i = 0; i < mannschaft.length; i++) {
            System.out.println(mannschaft[i].toString());
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {

        double torM1 = 0.0;
        double abwehrM1 = roteKartenZaehlen(mannschaft1);
        double mittelfeldM1 = 0.0;
        double sturmM1 = 0.0;
        for (int i = 0; i < mannschaft1.length; i++) {
            if (mannschaft1[i] instanceof Torwart) {
                torM1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
            } else if (mannschaft1[i] instanceof Mittelfeldspieler) {
                mittelfeldM1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
            } else if (mannschaft1[i] instanceof Sturmspieler) {
                sturmM1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
            }
        }
        int spielstaerkeM1 = (int)(sturmM1 * mittelfeldM1 - 10 * torM1 * 1 / (0.01 + abwehrM1));

        double torM2 = 0.0;
        double abwehrM2 = roteKartenZaehlen(mannschaft2);
        double mittelfeldM2 = 0.0;
        double sturmM2 = 0.0;
        for (int i = 0; i < mannschaft2.length; i++) {
            if (mannschaft2[i] instanceof Torwart) {
                torM2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
            } else if (mannschaft2[i] instanceof Mittelfeldspieler) {
                mittelfeldM2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
            } else if (mannschaft2[i] instanceof Sturmspieler) {
                sturmM2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
            }
        }
        int spielstaerkeM2 = (int)(sturmM2 * mittelfeldM2 - 10 * torM2 * 1 / (0.01 + abwehrM2));

        if (spielstaerkeM1 > spielstaerkeM2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (spielstaerkeM1 < spielstaerkeM2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        } else {
            System.out.println(""Unentschieden!"");
        }

    }
}",//
Name_286,VName_286,-,-
Name_287,VName_287,"public class BusTest{
	private static Bus[] allBus;
		public static void main(String[] args){
		allBus = new Bus[5];
		allBus[0] = new Bus(25,1);
		allBus[1] = new Bus(39,2);
		allBus[2] = new Linienbus(80,4, true, 60);
		allBus[3] = new Linienbus(60,2, false, 40);
		allBus[4] = new Reisebus(100,2, true);

		allBus[0].tuerOeffnen(1);
		//allBus[0].tuerSchliessen(1);

		allBus[3].tuerOeffnen(1);
		allBus[3].tuerOeffnen(2);
		allBus[3].tuerSchliessen(1);
		//allBus[3].tuerSchliessen(2);


		System.out.println(""Ist eine Tür von Bus 0 offen (true) ?: "" + allBus[0].istTuerOffen());
		System.out.println(""Sind alle Türen von Bus 0 geschlossen (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println(""Ist Bus 0 fahrbereit (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus 1 offen (true) ?: "" + allBus[1].istTuerOffen());
		allBus[1].tuerSchliessen(1);
		allBus[1].tuerSchliessen(2);
		allBus[1].tuerSchliessen(3);
		allBus[1].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 1 geschlossen (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println(""Ist Bus 1 fahrbereit (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus2 offen (true) ?: "" + !allBus[1].istTuerOffen());
		allBus[2].tuerSchliessen(1);
		allBus[2].tuerSchliessen(2);
		allBus[2].tuerSchliessen(3);
		allBus[2].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 2 geschlossen (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println(""Ist Bus 2 fahrbereit (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus 3 offen (true) ?: "" + !allBus[1].istTuerOffen());
		allBus[1].tuerSchliessen(1);
		allBus[1].tuerSchliessen(2);
		allBus[1].tuerSchliessen(3);
		allBus[1].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 3 geschlossen (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println(""Ist Bus 3 fahrbereit (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""Ist eine Tür von Bus 4 offen (true) ?: "" + !allBus[1].istTuerOffen());
		allBus[1].tuerSchliessen(1);
		allBus[1].tuerSchliessen(2);
		allBus[1].tuerSchliessen(3);
		allBus[1].tuerSchliessen(4);
		System.out.println(""Sind alle Türen von Bus 4 geschlossen (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println(""Ist Bus 4 fahrbereit (true) ?: "" + allBus[0].istFahrbereit());
		System.out.println("""");
		System.out.println("""");
		System.out.println(""ist Reisebus 1 gleich Reisebus 3 (true) ?: "" + allBus[2].equals(new Linienbus(80,4, true, 60)));
		System.out.println(""ist Linienbus 2 gleich Linienbus 4 (false) ?: "" + allBus[2].equals(allBus[4]));
		System.out.println(""ist Reisebus 1 gleich Linienbus 4 (false) ?: "" + allBus[2].equals(new Linienbus(40,3, true, 60)));

	}


}",//
Name_265,VName_265,-,-
Name_237,VName_237,-,-
Name_289,VName_289,-,-
Name_62,VName_62,-,-
