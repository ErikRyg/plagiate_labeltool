Nachname,Vorname,E-Mail-Adresse,Status,"Begonnen am",Beendet,"Verbrauchte Zeit","Bewertung/20,00","Antwort 1","Antwort 2","Antwort 3","Antwort 4","Antwort 5","Antwort 6","Antwort 7","Antwort 8","Antwort 9"
Magen,Omry,omry.magen@tu-berlin.de,Beendet,"26. Juni 2020  10:45","29. Juni 2020  10:29","2 Tage 23 Stunden","5,18","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {10. <sub>int} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {10. <sub>int} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {10. <sub>int} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Seeburger,Niklas,niklas.seeburger@tu-berlin.de,Beendet,"26. Juni 2020  10:46","5. Juli 2020  08:38","8 Tage 21 Stunden","5,59","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen",Object,super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {10. <sub>int} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {10. <sub>int} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Hasselbach,"Tillmann Carlo Friedrich",tillmann.hasselbach@campus.tu-berlin.de,Beendet,"26. Juni 2020  13:03","2. Juli 2020  17:32","6 Tage 4 Stunden","11,45","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,extends,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
	public static void main(String[] args){
		Fussballspieler[] deutschland = new Fussballspieler[11];
		Fussballspieler[] argentinien = new Fussballspieler[11];
		deutschland[0] = new Torwart(""Neuer"", 22, 0.0);
		argentinien[0] = new Torwart(""Trios"", 24, 1.3);
		deutschland[1] = new Mittelfeldspieler(""bloeder Scheissss"", 234, 0.0);
		argentinien[1] = new Mittelfeldspieler(""bloeder Scheissss"", 234, 0.0);
		for (int i = 2; i < 11; i++){
			deutschland[i] = new Abwehrspieler(""Tom"", 20, 1.5);
			argentinien[i] = new Sturmspieler (""Tim"", 20, 0.5);
		}
		deutschland[1].geburtstagFeiern();

		System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
		ausgeben(argentinien);
		fussballspielen(deutschland, argentinien);
	  }
    //richtige Methode wird aufgerufen, weil Arrayobjekt auf Abwehrspieler gecasted wird(22) methode wird ausgeführt, obwohl Fussballspieler die methode getRoteKarte nicht besitzt 
	public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
		double roteKarten = 0.0;
		for (Fussballspieler i : mannschaft){
			if (i instanceof Abwehrspieler){
				roteKarten += ((Abwehrspieler)i).getAnzahlRoteKartenJeSpiel();
			}
		}
		return roteKarten;
		
	}
	//casten nicht Nötig da Methode toString dem Compiler aus Fussballspieler bekannt ist und in der Runtime aber auf die Methode von der subklasse zurückgegriffen wird
	public static void ausgeben(Fussballspieler[] mannschaft){
		for (Fussballspieler i : mannschaft){
			System.out.println(i.toString());
		}
		
	}
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double scoreTeamOne = calcScore(mannschaft1);
		double scoreTeamTwo = calcScore(mannschaft2);
		if (scoreTeamOne > scoreTeamTwo){
			System.out.println(""Mannschaft 1 gewinnt!"");
		} else if (scoreTeamOne == scoreTeamTwo){
			System.out.println(""Unentschieden!"");
		} else if (scoreTeamOne < scoreTeamTwo){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		
	}
	
	public static double calcScore(Fussballspieler[] team){
		double currentScore = 0;
		for (Fussballspieler i : team){
			if (i instanceof Abwehrspieler){
				currentScore += ((Abwehrspieler)i).getAnzahlRoteKartenJeSpiel();
			}else if (i instanceof Mittelfeldspieler){
				currentScore += ((Mittelfeldspieler)i).getPaesseJeSpiel();
			}else if (i instanceof Sturmspieler){
				currentScore += ((Sturmspieler)i).getToreJeSpiel();
			}else if(i instanceof Torwart){
				currentScore += ((Torwart)i).getGegentoreJeSpiel();
			}
		}
		return currentScore;
	}
}","public class TestBus{
	public static void main (String[] args){
		Bus[] busFlotte = new Bus[3];
		busFlotte[0] = new Reisebus(3, 3, true);
		busFlotte[1] = new Linienbus(4, 4, true, 4);
		busFlotte[2] = new Bus(3, 5);
		busFlotte[0].tuerOeffnen(0);
		busFlotte[1].tuerOeffnen(3);
		busFlotte[1].tuerOeffnen(1);
		if (busFlotte[0].istFahrbereit()){
			System.out.println(""Der erste Bus ist Fahrbereit."");
		}
		if (busFlotte[1].istFahrbereit()){
			System.out.println(""Der zweite Bus ist Fahrbereit."");
		}
		if (busFlotte[1].istFahrbereit()){
			System.out.println(""Jetzt ist der zweite Bus aber Fahrbereit."");
		}
		for (int i = 0; i < busFlotte[0].getAnzahlTueren(); i++){
				busFlotte[0].tuerSchliessen(i + 1);
		}
		if (busFlotte[0].istFahrbereit()){
			System.out.println(""Jetzt ist auch der zweite Bus Fahrbereit."");
		}
		if(busFlotte[1].equals(busFlotte[2])){
			System.out.println(""Bullshit"");
		}
		if(busFlotte[1].equals(busFlotte[0])){
			System.out.println(""Bullshit"");
		}
		Linienbus aloahHe = new Linienbus(4, 4, true, 4);
		for (int i= 0; i < busFlotte.length; i++){
			if(aloahHe.equals(busFlotte[i])){
				System.out.println(""Match on spot "" + i + "" in Array!"");
			}
		}
	}
}"
Litzel,Ida,i.litzel@campus.tu-berlin.de,Beendet,"26. Juni 2020  13:59","5. Juli 2020  20:53","9 Tage 6 Stunden","8,86",extends,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen",Object,"Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
  
  public static void main (String [] args){
    Bus [] busArray = new Bus [3];
    
    
    Bus bus = new Bus(3,3);
    busArray[0] = bus;
    
    Reisebus reisebus = new Reisebus(34,2,true);
    busArray[1] = reisebus;
    
    Linienbus linienbus = new Linienbus(12,3,false,5);
    busArray[2] = linienbus;
    
    bus.tuerOeffnen(1);
    reisebus.tuerOeffnen(1);;
    

    
    for (int i=0 ; i<bus.tueren.length ;i++ ) {
      bus.tuerSchliessen(i+1);;
    } // end of for
    
    
    for (int i=0 ; i<reisebus.tueren.length ;i++ ) {
      reisebus.tueren[i].schliessen();
    } // end of for
    
    for (int i=0 ; i<linienbus.tueren.length ;i++ ) {
      linienbus.tueren[i].schliessen();
    } // end of for
    
        
    System.out.println(bus.istFahrbereit());
    System.out.println(reisebus.istFahrbereit());
    System.out.println(linienbus.istFahrbereit());
    
    System.out.println(linienbus.equals(bus));
    System.out.println(linienbus.equals(reisebus));
    
    Reisebus reise = new Reisebus(34,2,true);
    System.out.println(reise.equals(reisebus));
    }


  }",-
Taubert,"Antonia Aline Elisabeth",antonia.ae.taubert@campus.tu-berlin.de,Beendet,"26. Juni 2020  15:23","4. Juli 2020  18:28","8 Tage 3 Stunden","12,00",extends,"Es wird die Methode der Sub-Klasse aufgerufen",Object,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Tier erbt von der Klasse Hund","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
	public static void main(String[] args){
		Fussballspieler [] deutschland = new Fussballspieler [11];
		Fussballspieler [] portugal = new Fussballspieler [11];
		deutschland [0] = new Torwart (""Neuer"", 28, 0.2);
		deutschland [1] = new Abwehrspieler (""Lahm"", 32, 0.02);
		deutschland [2] = new Abwehrspieler (""Schweini"", 33, 0.4);
		deutschland [3] = new Abwehrspieler (""Hummel"", 26, 0);
		deutschland [4] = new Mittelfeldspieler (""Podolski"", 25, 35);
		deutschland [5] = new Mittelfeldspieler (""Goetze"", 25, 28.5);
		deutschland [6] = new Mittelfeldspieler (""Kroos"", 28, 26.25);
		deutschland [7] = new Mittelfeldspieler (""Oezil"", 31, 30);
		deutschland [8] = new Sturmspieler (""Reus"", 27, 0.8);
		deutschland [9] = new Sturmspieler (""Klose"", 38, 1.25);
		deutschland	[10] = new Sturmspieler (""Ballack"", 40, 1.2);
		
		portugal [0] = new Torwart (""Patricio"", 34, 0.4);
		portugal [1] = new Abwehrspieler (""Semedo"", 35, 1);
		portugal [2] = new Abwehrspieler (""Dias"", 23, 0.025);
		portugal [3] = new Abwehrspieler (""Cancelo"", 26, 0.06);
		portugal [4] = new Abwehrspieler (""Fonte"", 26, 0.12);
		portugal [5] = new Mittelfeldspieler (""Silva"", 34, 28.5);
		portugal [6] = new Mittelfeldspieler (""Pizzi"", 33, 36);
		portugal [7] = new Sturmspieler (""Bruma"", 27, 0.8);
		portugal [8] = new Sturmspieler (""Jota"", 35,0.75);
		portugal [9] = new Sturmspieler (""Ronaldo"", 37, 1.0);
		portugal [10] = new Sturmspieler (""Sousa"", 26, 0.75);

		deutschland[1].geburtstagFeiern();



    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(portugal);
    System.out.println();
    // fussballspielen(................);
  }

  public static double roteKartenZaehlen(Fussballspieler [] mannschaft){
    double rot = 0;
	for (int i= 0; i<mannschaft.length; i++) {
	  if ((mannschaft[i] instanceof Abwehrspieler))
	    rot += mannschaft[i].getAnzahlRoteKartenJeSpiel ();
    }
	return rot;
  }
  
  public static void ausgeben(Fussballspieler [] mannschaft){
    for (int i = 0; i< mannschaft.length; i++) {
	  System.out.println (mannschaft[i]);
	}
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  }
}","public class TestBus {
	public static void main (String [] args) {
		Bus [] busse = new Bus [4];
		busse [0] = new Bus (30, 5); // Anzahl Sitze, Anzahl Tueren
		busse [1] = new Linienbus (20, 3, true, 40);
		busse [2] = new Reisebus (40,0, false);
		busse [3] = new Reisebus (44, 2, true);
		System.out.println (busse [0]);
		
		System.out.println (""Bus 1 hat ""+ busse[0].getSitze () +"" Sitze."");
		System.out.println (""Bus 1 hat ""+busse[0].getAnzahlTueren () +"" Türen."");
		
		
		busse[0].tuerSchliessen (1);
		System.out.println (""Bus 1 (Bus) fahrbereit? ""+ busse[0].istFahrbereit());
		
		busse[1].tuerOeffnen (2);
		busse[1].tuerOeffnen (3);
		System.out.println(""Beim Linienbus Tueren offen? ""+ busse[1].istTuerOffen());
		System.out.println (""Bus 2 (Linienbus) fahrbereit? ""+busse[1].istFahrbereit ());
		System.out.println(""Beim Linienbus Tueren offen? ""+ busse[1].istTuerOffen());
		
		busse[2].tuerOeffnen (1);
		busse[2].tuerOeffnen (2);
		System.out.println(""Beim Reisebus Tueren offen? ""+ busse[2].istTuerOffen());
		System.out.println (""Bus 3 (Reisebus) fahrbereit? ""+ busse[2].istFahrbereit());
		
		for (int i = 0; i< busse.length; i++) {
			if (!(busse [i].istFahrbereit())) {
				for (int k = 0; k< busse[i].getAnzahlTueren(); k++) {
					busse[i].tuerSchliessen (k);
				}									
			}
		}
		
		System.out.println (""Linienbus (Bus 2) entschpricht Bus (Bus 1)? "" + busse[1].equals (busse[0]));
		System.out.println (""Linienbus (Bus 2) enspricht Reisebus (Bus 3)? ""+busse [1].equals (busse[3]));
		Reisebus blub = new Reisebus (40,1, false);
		
		for (int i = 0; i< busse.length; i++){
			System.out.println (""Reisebus Blub entspricht Bus ""+(i+1)+ ""? ""+ blub.equals (busse[i]) );
		}
	
	}
}"
Kulow,"Linda Marie",l.kulow@campus.tu-berlin.de,Beendet,"26. Juni 2020  19:16","3. Juli 2020  14:10","6 Tage 18 Stunden","19,00","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,extends,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
        Fussballspieler[] deutschland = new Fussballspieler[11];
        deutschland[0]= new Torwart(""Udo"",78,7.2);
        deutschland[1]= new Abwehrspieler(""Chanti"",22,87.8);
        deutschland[2]= new Abwehrspieler(""Kevin"",27,139.6);
        deutschland[3]= new Abwehrspieler(""Justin"",2,112.0);
        deutschland[4]= new Abwehrspieler(""Yvonne"",3,0.5);
        deutschland[5]= new Mittelfeldspieler(""Finn"",32,0.9);     //Kann nicht unter 0 sein
        deutschland[6]= new Mittelfeldspieler(""Flinn"",33,2.6);
        deutschland[7]= new Sturmspieler(""Jimmy"",25,2.9);
        deutschland[8]= new Sturmspieler(""Jacky"",79,14.6);
        deutschland[9]= new Sturmspieler(""Jonny"",105,33.8);
        deutschland[10]= new Sturmspieler(""Elli"",14,8.4);

        Fussballspieler[] maerchenland = new Fussballspieler[11];
        maerchenland[0]= new Torwart(""boeseKoenigin"",48,1.4);
        maerchenland[1]= new Abwehrspieler(""Zofe"", 87,0.2);
        maerchenland[2]= new Mittelfeldspieler (""Zwerg1"",55,17.1);
        maerchenland[3]= new Mittelfeldspieler (""Zwerg2"",55,18.1);
        maerchenland[4]= new Mittelfeldspieler (""Zwerg3"",55,14.4);
        maerchenland[5]= new Mittelfeldspieler (""Zwerg4"",55,20.6);
        maerchenland[6]= new Mittelfeldspieler (""Zwerg5"",55,12.5);
        maerchenland[7]= new Mittelfeldspieler (""Zwerg6"",55,19.8);
        maerchenland[8]= new Mittelfeldspieler (""Zwerg7"",55,22.0);
        maerchenland[9]= new Sturmspieler(""Prinz"",27,55.6);
        maerchenland[10]= new Sturmspieler(""Prinzessin"",25,62.8); 
        
     deutschland[3].geburtstagFeiern();
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Funktioniert hier, da wir auf die bezogene Unterklasse expliziet hinweisen. Und wir das gegebene Objekt als Objekt der Unterklasse deklarieren."");
    ausgeben(maerchenland);
    System.out.println(""Funktioniert, da wir die in Fussballspieler geschriebene Methode in den jeweiligen Unterklassen überschreiben."");
    fussballspielen(deutschland, maerchenland);
  }

    public static double roteKartenZaehlen(Fussballspieler[] f){
        double anzahlRoteKartenJeSpiel=0;
        for (Fussballspieler s : f) {
            if (s instanceof Abwehrspieler) {
                Abwehrspieler a = (Abwehrspieler)s;
                anzahlRoteKartenJeSpiel += a.getAnzahlRoteKartenJeSpiel();

            }
        }
        return anzahlRoteKartenJeSpiel;
    }
    
    public static void ausgeben(Fussballspieler[] f){       //parametriesieren

        for(Fussballspieler s : f){
            System.out.println(s.toString());
        }
    }
   /* bitte implementieren */
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  double a = roteKartenZaehlen(mannschaft1)+ paesseZaehlen(mannschaft1)+ toreZaehlen(mannschaft1) - gegentoreZaehlen(mannschaft1);
        double b = roteKartenZaehlen(mannschaft2)+ paesseZaehlen(mannschaft2)+ toreZaehlen(mannschaft2) - gegentoreZaehlen(mannschaft2);
        if(a<b){
            System.out.println(""Mannschaft 1 gewinnt!"");}
        if(a==b){
            System.out.println(""Unentschieden!"");
        }
        if(a>b){
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
    }

    public static double paesseZaehlen(Fussballspieler[] f){
        double anzahlPaesse=0;
        for (Fussballspieler s : f) {
            if (s instanceof Mittelfeldspieler) {
                Mittelfeldspieler m = (Mittelfeldspieler) s;
                anzahlPaesse += m.getPaesseJeSpiel();
            }
        }
        return anzahlPaesse;
    }

    public static double toreZaehlen(Fussballspieler[] f){
        double anzahlTore =0;
        for (Fussballspieler s : f) {
            if (s instanceof Sturmspieler) {
                Sturmspieler a = (Sturmspieler) s;
                anzahlTore += a.getToreJeSpiel();
            }
        }
        return anzahlTore;
    }

    public static double gegentoreZaehlen(Fussballspieler[] f){
        double anzahlGegentore=0;
        for (Fussballspieler s : f) {
            if (s instanceof Torwart) {
                Torwart t = (Torwart) s;
                anzahlGegentore += t.getGegentoreJeSpiel();
            }
        }
        return anzahlGegentore;
    }
}","//Hier kommt die TestBus Klasse rein
public class TestBus {
    public static void main(String[] args){
        Bus[] ausflug = {
            new Bus(17,2),
            new Reisebus(85,5,true),
            new Linienbus(55,6,false,94)
        };



        ausflug[2].tuerOeffnen(1);
        ausflug[2].tuerOeffnen(4);
        ausflug[1].tuerOeffnen(3);
        for (int i=0;i<ausflug.length;i++){
            System.out.println(ausflug[i].istFahrbereit());
        }

       for (int i=0;i<ausflug.length;i++){          //muss nur bei Reisebussen da alle anderen schon durch frühere Aktionen fahrbereit sind
           if(ausflug[i] instanceof Reisebus){
             for(int a=1;a<=ausflug[i].getAnzahlTueren();a++){
                 ausflug[i].tuerSchliessen(a);
             }
           }
       }

       System.out.println(ausflug[2].equals(ausflug[0]));
       System.out.println(ausflug[2].equals(ausflug[1]));

       Linienbus l = new Linienbus(54,8,false,94);

       for(int i=0;i<ausflug.length;i++){
           System.out.println(l.equals(ausflug[i]));
       }
    }
}"
Yin,Shanshan,shanshan.yin@campus.tu-berlin.de,Beendet,"26. Juni 2020  20:57","30. Juni 2020  23:48","4 Tage 2 Stunden","4,09","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",super,"Es wird die Methode der Sub-Klasse aufgerufen",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {12. <sub>schnabelfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {15. <sub>kannSprechen:} Dropzone 11 -> {16. <sub>boolean} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {7. <sub>fellfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {4. <sub>double} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {10. <sub>int}","public class TestBus {
    public static void main(String[] args) {
        Bus bus = new Bus(3,3);
        Reisebus rb = new Reisebus(2,3,true);
        Linienbus lb = new Linienbus(5,3,true,4);
        Linienbus lb2 = new Linienbus(5,3,true,4);

        rb.tuerOeffnen(2);
        rb.istFahrbereit();

        bus.istFahrbereit();
        bus.tuerSchliessen(1);
        bus.tuerSchliessen(2);
        bus.tuerSchliessen(3);
        rb.tuerSchliessen(1);
        rb.tuerSchliessen(2);
        lb.istFahrbereit();
        lb.equals(bus);
        lb.equals(rb);
        lb.equals(lb2);



    }




}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(......);
    System.out.println();
    fussballspielen(................);
  }

  public static double roteKartenZaehlen(.................){
    
   /* bitte implementieren */
  }
  public static void ausgeben(...){
    
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  }
}"
Öztürk,"Saskia Gudrun Ingrid",s.oeztuerk@campus.tu-berlin.de,Beendet,"27. Juni 2020  00:03","3. Juli 2020  23:02","6 Tage 22 Stunden","5,23","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Super-Klasse aufgerufen",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Dhamala,Alok,alok.dhamala@campus.tu-berlin.de,Beendet,"27. Juni 2020  14:36","5. Juli 2020  22:53","8 Tage 8 Stunden","12,74",Java,"die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",super,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String[] args) {
		Bus b1 = new Bus(70, 5);
		Linienbus lb1 = new Linienbus(100, 3, true, 20);
		Reisebus rb1 = new Reisebus(100, 3, true);
		Reisebus rb2 = new Reisebus(100, 3, true);
		
		Bus[] busse= new Bus[3];
		busse[0] = b1;
		busse[1] = lb1;
		busse[2] = rb1;
		
		
		System.out.println(""Fahrtbereitschaft: ""+ busse[0].istFahrbereit() + "" "" + busse[1].istFahrbereit() + "" "" + busse[2].istFahrbereit());
		
		for(int i= 0; i< busse.length; i++) {
			//System.out.println(""no. of doors : "" + busse[i].getAnzahlTueren());
			busse[i].tuerSchliessen(busse[i].getAnzahlTueren());
			// bus  . tuerSch......(....same bu)
		}
		
		System.out.println(busse[2].istFahrbereit());
		busse[2].tuerOeffnen(4);
		//busse[2].tuerOeffnen(1);
		System.out.println(busse[2].istFahrbereit());
		
		for(int i= 0; i< busse.length; i++) {
			//System.out.println(""no. of doors : "" + busse[i].getAnzahlTueren());
			busse[i].tuerSchliessen(busse[i].getAnzahlTueren());
			// bus  . tuerSch......(....same bu)
		}
		
		System.out.println(busse[1].istFahrbereit());
		
		System.out.println(lb1.equals(b1));
		System.out.println(lb1.equals(rb1));
		
		for(int i=0; i< busse.length; i++) {
			System.out.println(busse[i].equals(rb2));
		}
		
	}

}","public class TestMannschaft {
	  public static void main(String[] args){
		  
		  /* Kommentar Über Polymorphie
		   * Bei der ausgeben() wird die Polymorphie Eigenschaft von Java ausgenutzt.
		   * Ohne zu spezifizieren, wird entsprechende toString() methode von jeweiligen Klassen benutzt.
		   * Z.B. bei einem Torwart wird die gegentore je Spiel ausgegeben.
		   * 
		   * Jedoch kann RoteKarteZaehlen() methode die Polymorphie nicht benutzen, da man im voraus wissen muss, ob der
		   * gegebene Spieler ein Abwehrspieler ist, die methode getGegentoreJeSpiel() der Klasse Abwehrspieler zu nutzen.
		   * Der Fussballspieler muss entsprechend gecastet werden.
		   */
		  
		  Fussballspieler [] deutschland = new Fussballspieler[11];
		  Fussballspieler [] spanien = new Fussballspieler[11];
		  
		  
		  // deutschland mannschaft
		  Torwart neuer = new Torwart(""Neuer"", 28, 2.01);
		  
		  Abwehrspieler boateng = new Abwehrspieler(""boateng"", 32, 0.8);
		  Abwehrspieler rudiger = new Abwehrspieler(""rudiger"", 20, 0.5);
		  Abwehrspieler kimmich = new Abwehrspieler(""kimmich"", 22, 0.2);
		  Abwehrspieler suele = new Abwehrspieler(""suele"", 26, 0.4);
		  
		  Mittelfeldspieler kroos = new Mittelfeldspieler(""kroos"", 27, 100);
		  Mittelfeldspieler havertz = new Mittelfeldspieler(""havertz"", 27, 150);
		  Mittelfeldspieler draxler = new Mittelfeldspieler(""draxler"", 23, 133);
		  
		  Sturmspieler werner = new Sturmspieler(""werner"", 22, 1.4);
		  Sturmspieler sane = new Sturmspieler(""sane"", 22, 0.9);
		  Sturmspieler brandt = new Sturmspieler(""brandt"", 23, 0.8);
		  
		  /* spanien mannschaft*/
		  
		  Torwart kepa = new Torwart(""Kepa"", 23, 2.23);
		  Abwehrspieler pique = new Abwehrspieler(""pique"", 32, 0.5);
		  Abwehrspieler ramos = new Abwehrspieler(""ramos"", 32, 0.5);
		  Abwehrspieler torres = new Abwehrspieler(""torres"", 23, 0.3);
		  Abwehrspieler navas = new Abwehrspieler(""navas"", 34, 0.6);
		  
		  Mittelfeldspieler thiago = new Mittelfeldspieler(""thiago"", 27, 130);
		  Mittelfeldspieler fabian = new Mittelfeldspieler(""fabian"", 24, 157);
		  Mittelfeldspieler rodri = new Mittelfeldspieler(""rodri"", 24, 180);
		  
		  Sturmspieler morata = new Sturmspieler(""morata"", 31, 0.7);
		  Sturmspieler alcacer = new Sturmspieler(""alcacer"", 26, 1.4);
		  Sturmspieler gerard = new Sturmspieler(""gerard"", 23, 0.4);
		  
		 
		  deutschland[0] = neuer;
		  deutschland[1] = boateng;
		  deutschland[2] = rudiger;
		  deutschland[3] = kimmich;
		  deutschland[4] = suele;
		  deutschland[5] = kroos;
		  deutschland[6] = havertz;
		  deutschland[7] = draxler;
		  deutschland[8] = werner;
		  deutschland[9] = sane;
		  deutschland[10] = brandt;
		  
		  spanien[0] = kepa;
		  spanien[1] = pique;
		  spanien[2] = ramos;
		  spanien[3] = torres;
		  spanien[4] = navas;
		  spanien[5] = thiago;
		  spanien[6] = fabian;
		  spanien[7] = rodri;
		  spanien[8] = morata;
		  spanien[9] = alcacer;
		  spanien[10] = gerard;
		  
		    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
		    System.out.println();
		    ausgeben(deutschland);
		    System.out.println();
		    fussballspielen(spanien, deutschland);
		  }

		  public static double roteKartenZaehlen(Fussballspieler [] arr){
			  double total_red_cards = 0;
			  for(int i=0; i<arr.length ; i++) {			  
				  if(arr[i] instanceof Abwehrspieler) {
					  total_red_cards = total_red_cards + ((Abwehrspieler) arr[i]).getAnzahlRoteKartenJeSpiel();
				  }
			  }
			  
			  return total_red_cards;
		  }
		  public static void ausgeben(Fussballspieler[] arr1){  
			  for(int i=0; i< arr1.length; i++) {
				  System.out.println(arr1[i].toString());
				  
			  }
		  }
		  
		  public static double spielStaerkeBerechnen(Fussballspieler[] mannschaft) {
			  double spielstaerke = 0;
			   for(int i=0; i<mannschaft.length; i++) {
				   if(mannschaft[i] instanceof Abwehrspieler) {
					   spielstaerke -= ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiel();
				   }else if(mannschaft[i] instanceof Torwart) {
					   spielstaerke -= ((Torwart) mannschaft[i]).getGegentoreJeSpiel();
				   }else if(mannschaft[i] instanceof Mittelfeldspieler) {
					   spielstaerke += ((Mittelfeldspieler) mannschaft[i]).getPaesseJeSpiel() * 0.25; //paesse sind weniger wichtig als tore
				   }else if(mannschaft[i] instanceof Sturmspieler) {
					   spielstaerke +=((Sturmspieler) mannschaft[i]).getToreJeSpiel() * 2; // tore sind am wichtigsten
				   }else {
					   return -1;
				   }
			   }
			   return spielstaerke;
		  }
		  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
			  double spielstaerke1 = spielStaerkeBerechnen(mannschaft1);
			  double spielstaerke2 = spielStaerkeBerechnen(mannschaft2);
			  
			  if(spielstaerke1 > spielstaerke2) {
				  System.out.println(""Mannschaft 1 gewinnt!"");
				  
			  }else if(spielstaerke1 == spielstaerke2) {
				  System.out.println(""Unentschieden!"");
			  }else {
				  System.out.println(""Mannschaft 2 gewinnt!"");
			  }
			  
	
		  }
	}"
Fendji,"Noah John",n.fendji@campus.tu-berlin.de,Beendet,"27. Juni 2020  20:05","5. Juli 2020  22:06","8 Tage 2 Stunden","12,50",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 1 : Klasse A hat keinen Konstruktor",Object,"die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
	Fussballspieler[] herthaBSC = {
			new Torwart(""Rune Jarstein"", 35, 0.5),
			new Abwehrspieler(""Marvin Plattenhardt"", 28, 0.001),
			new Abwehrspieler(""Dedryck Boyata"", 29, 0.005),
			new Abwehrspieler(""Jordan Torunarigha"", 22, 0.0),
			new Abwehrspieler(""Peter Pekarik"", 33, 0.1),
			new Mittelfeldspieler(""Per Skjelbred"", 33, 15.8),
			new Mittelfeldspieler(""Marko Grujić"", 24, 22.9),
			new Mittelfeldspieler(""Maximilian Mittelstädt"", 23, 18.4),
			new Mittelfeldspieler(""Matheus Cunha"", 21, 25.3),
			new Mittelfeldspieler(""Dodi Lukébakio"", 22, 18.9),
			new Sturmspieler(""Jessic Ngankam"", 19, 3),
		};
			
	Fussballspieler[] deutschland = {
			new Torwart(""Rafał Gikiewicz"", 32, 0.9),
			new Abwehrspieler(""Ken Reichel"", 33, 0.009),
			new Abwehrspieler(""Keven Schlotterbeck"", 23, 0.15),
			new Abwehrspieler(""Marvin Friedrich"", 24, 1),
			new Abwehrspieler(""Christopher Trimmel"", 33, 0.1),
			new Mittelfeldspieler(""Robert Andrich"", 25, 11.6),
			new Mittelfeldspieler(""Grischa Prömel"", 25, 15.3),
			new Mittelfeldspieler(""Marius Bülter"", 27, 11.4),
			new Mittelfeldspieler(""Marcus Ingvartsen"", 24, 15.3),
			new Mittelfeldspieler(""Christian Gentner"", 34, 8.9),
			new Sturmspieler(""Sebastian Andersson"", 28, 0.5),	
		};

    herthaBSC[10].geburtstagFeiern();
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(herthaBSC);
    System.out.println();
    fussballspielen(herthaBSC, deutschland);
  }

  public static double roteKartenZaehlen(Fussballspieler x[]){
    double rk = 0;
		for(int i = 1; i < x.length; i++) {
			if(x[i] instanceof Abwehrspieler) {
					rk += ((Abwehrspieler) x[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
			return rk;
   /* Zunächst wird überprüft ob die Einträge des Array der richtigen Subklasse 
   angehören (Abwehrspieler). Tun sie das kann man die verbleibenden Fussballspieler
   auf Abwehrspieler casten und ihre Rotenkarten abfragen. */
  }
  public static void ausgeben(Fussballspieler x[]){
    for(int i = 0; i < x.length; i++) {
			System.out.println(x[i]);
		}
   /* Druch das schreiben einer eigenen toString Methode in der Klasse Fussballspieler 
   wird die standart Java-toString Methode überschrieben und die Objekte können als
   Zeichenkette ausgegeben werden. */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
   		double gtherthaBSC = 0;
		for(int i = 0; i < mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Torwart) {
			gtherthaBSC += ((Torwart) mannschaft1[i]).getGegentoreJeSpiel();
			}
		}
		
		double gtunionBerlin = 0;
		for(int i = 0; i < mannschaft2.length; i++) {
			if(mannschaft2[i] instanceof Torwart) {
			gtunionBerlin += ((Torwart) mannschaft2[i]).getGegentoreJeSpiel();
			}
		}
				
		if(gtunionBerlin-gtherthaBSC > 0) {
			System.out.println(""Mannschaft 1 gewinnt!"");
			return;
		}
		else if(gtherthaBSC - gtunionBerlin > 0) {
			System.out.println(""Mannschaft 2 gewinnt!"");
			return;
		}	
		else {
			System.out.println(""Unentschieden!"");
		} 

  }
}",-
Bouschen,"Kira Apollonia",bouschen@campus.tu-berlin.de,Beendet,"27. Juni 2020  20:31","3. Juli 2020  21:12","6 Tage","16,36",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","class TestBus {
	public static void main(String[] args) {
		Bus[] b= new Bus[3];
		Linienbus b0 = new Linienbus(10,4,false, 20);
		Reisebus b1 = new Reisebus(30,2,true);
		b[0] = b0;
		b[1] = b1;
		b[2] = new Bus(20,2);

		b[0].tuerOeffnen(1);
		b[0].tuerOeffnen(3);

		b[1].tuerOeffnen(2);


		b[2].tuerOeffnen(1);

		if (b[2].istFahrbereit()) {
			System.out.println(""Bus kann immer los fahren!"");
		} else {
			System.out.println(""Es liegt ein fehler vor 1"");
		}

		if (b[0].istFahrbereit()) {
			System.out.println(""Tueren wurden geschlossen, es kann los gehen!"");
		} else {
			System.out.println(""Es liegt ein fehler vor 1"");
		}

		if (b[1].istFahrbereit()) {
			System.out.println(""Es liegt ein fehler vor 2"");
		} else {
			System.out.println(""Eine Tuer ist noch offen, es kann nicht losgehen"");
		}

		b[1].tuerSchliessen(2);

		Bus b2 = new Bus(10,4);

		if (b0.Equals(b2)) {
			System.out.println(""Es liegt ein fehler vor 3"");
		}


		if (b0.Equals(b[1])) {
			System.out.println(""Es liegt ein fehler vor 4"");
		}

		Linienbus b3 = new Linienbus(10,4,true, 20);

		for (Bus bi : b) {
			
			if (b3.Equals(bi)) {
				System.out.println(""Es liegt ein fehler vor 5"");
			}
		}

	}
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
    Fussballspieler[] team1 = new Fussballspieler[11];
    Fussballspieler[] team2 = new Fussballspieler[11];
    
    team1[0] = new Torwart(""Toby"", 20, 0.1);
    team1[1] = new Abwehrspieler(""Alfred"", 20, 0.2);
    team1[2] = new Abwehrspieler(""Andreas"", 20, 0.5);
    team1[3] = new Abwehrspieler(""Andi"", 20, 0.7);
    team1[4] = new Mittelfeldspieler(""Mark"", 20, 30);
    team1[5] = new Mittelfeldspieler(""Markus"", 20, 40);
    team1[6] = new Mittelfeldspieler(""Marvin"", 20, 30);
    team1[7] = new Mittelfeldspieler(""Moritz"", 20, 35);
    team1[8] = new Sturmspieler(""Stefan"", 20, 5);
    team1[9] = new Sturmspieler(""Steve"", 20, 3);
    team1[10] = new Sturmspieler(""Sebastian"", 20, 3);
    
    team2[0] = new Torwart(""Jaqueline"", 17, 0.2);
    team2[1] = new Abwehrspieler(""Kevin"", 35, 1);
    team2[2] = new Abwehrspieler(""Ludmilla"", 21, 0);
    team2[3] = new Abwehrspieler(""Horst"", 19, 0.7);
    team2[4] = new Abwehrspieler(""Christoff"", 29, 0.1);
    team2[5] = new Abwehrspieler(""Clara"", 18, 0.2);
    team2[6] = new Mittelfeldspieler(""Klaudia"", 21, 20);
    team2[7] = new Sturmspieler(""Mareike"", 25, 0);
    team2[8] = new Sturmspieler(""Esther"", 20, 1.4);
    team2[9] = new Sturmspieler(""Ernst-Walter"", 22, 0.1);
    team2[10] = new Sturmspieler(""Jannick"", 21, 0.6);


    team2[0].geburtstagFeiern();



    Fussballspieler[] deutschland = team1;

    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(team1, team2);
  }

  /*
  Siehe Zeile 58: Überpruefung, ob Spieler Abwehrspieler sind.
  Die Polymorphie ermoeglicht verschiedene Arten von Fussballspielern, die
  hier unterschieden werden. Da die Methode ""getAnzahlRoteKartenJeSpiel""
  nur für Abwehrspieler definiert ist.
  */

  public static double roteKartenZaehlen(Fussballspieler[] team){
    double summe=0;
    for (int i = 0; i<team.length; i++) {
      Fussballspieler spieler = team[i];
      if (spieler instanceof Abwehrspieler) {
        Abwehrspieler abwehrspieler = (Abwehrspieler) spieler;
        summe += abwehrspieler.getAnzahlRoteKartenJeSpiel();
      }
    }
    return summe;
  }

  /*
  Hier wird das Potenzial von Polymorphismus voll ausgenutzt.
  Da in der Basisklasse ""Fussballspieler"" die Methode ""toString()"" definiert ist,
  koennen wir es einfach so aufrufen.
  Da die einzelnen Unterklassen (""Torwart"", ""Abwehrspeieler"", ...) die Methode
  ueberschreiben, wird dynamisch zu der Lauzeit die richtige Methode des
  jeweiligen Objektes aufgerufen.
  Des Weiteren verwenden die Methoden intern ""super.toString()"", um die Basisausgabe
  zu erhalten, wodurch es zu keiner Duplizierung vom Code kommt und Funktionalitaeten
  sind sauber abgekapselt in die jeweils kompetenten Klasse.
  */

  public static void ausgeben(Fussballspieler[] team){
    for (int i = 0; i<team.length; i++) {
      Fussballspieler spieler = team[i];
      System.out.println(spieler.toString());
    }
  }

  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double m1 = Mannschaftsstaerke(mannschaft1);
    double m2 = Mannschaftsstaerke(mannschaft2);
    if (m1>m2) {
      System.out.println(""Mannschaft 1 gewinnt!"");
      return;
    }
    if (m1<m2) {
      System.out.println(""Mannschaft 2 gewinnt!"");
      return;
    }
    System.out.println(""Unentschieden!"");
  }

  private static double Mannschaftsstaerke(Fussballspieler[] team) {
    double summe=0;
    for (int i = 0; i< team.length; i++) {
      Fussballspieler spieler = team[i];
      if (spieler instanceof Torwart) summe += SpielerStaerke((Torwart) spieler);
      if (spieler instanceof Abwehrspieler) summe += SpielerStaerke((Abwehrspieler) spieler);
      if (spieler instanceof Mittelfeldspieler) summe += SpielerStaerke((Mittelfeldspieler) spieler);
      if (spieler instanceof Sturmspieler) summe += SpielerStaerke((Sturmspieler) spieler);
    }
    return summe;
  }

  private static double BSS(Fussballspieler f) { //BasisSpielerStaerke
    return 10-Math.abs(f.getAlter()-20);
  } 

  private static double SpielerStaerke(Torwart f) {
    return BSS(f) - f.getGegentoreJeSpiel()*1.1;
  }

  private static double SpielerStaerke(Abwehrspieler f) {
    return BSS(f) - f.getAnzahlRoteKartenJeSpiel()*0.7;
  }

  private static double SpielerStaerke(Mittelfeldspieler f) {
    return BSS(f) + f.getPaesseJeSpiel()*0.3;
  }

  private static double SpielerStaerke(Sturmspieler f) {
    return BSS(f) + f.getToreJeSpiel()*1.3;
  }
}"
Li,Rui,rui.li@campus.tu-berlin.de,Beendet,"27. Juni 2020  23:20","2. Juli 2020  22:42","4 Tage 23 Stunden","5,36","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,extends,"die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,"public class TestBus {
    public static void main(String[] args) {
        Bus[] buses = {new Bus(10,2),new Reisebus(20,3,true),
                        new Linienbus(5,4,true,10)};
        System.out.println(buses[1].istFahrbereit());
        for (int i = 0; i <buses[1].tueren.length; i++) {
            buses[1].tuerSchliessen(i+1);
        }
        for (int i = 0; i <buses.length; i++) {
            System.out.println(buses[i].istFahrbereit());
        }
        System.out.println(buses[2].equals(buses[0]));
        System.out.println(buses[2].equals(buses[1]));
        Reisebus a = new Reisebus(2,6,true);
        for (int i = 0; i <buses.length; i++) {
            System.out.println(a.equals(buses[i]));
        }
    }
}"
Hristova,Mariya,m.hristova@campus.tu-berlin.de,Beendet,"28. Juni 2020  12:32","5. Juli 2020  21:12","7 Tage 8 Stunden","11,59","Zeile 6,7 : super(); müsste vor x=0; stehen",super,Object,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      // Arrays definieren
        Fussballspieler[] Spieler = new Fussballspieler[11];
        Spieler[0] = new Sturmspieler(""George"", 19, 1.5);
        Spieler[1] = new Mittelfeldspieler(""Oliver"", 33, 7.5);
        Spieler[2] = new Torwart(""Marvin"", 27, 1.5);
        Spieler[3] = new Abwehrspieler(""Tom"", 29, 18.5);
        Spieler[4] = new Abwehrspieler(""Maximilian"", 21, 9.5);
        Spieler[5] = new Mittelfeldspieler(""Julian"", 23, 2.7);
        Spieler[6] = new Sturmspieler(""Cameron"", 22, 4.5);
        Spieler[7] = new Sturmspieler(""Miguel"", 28, 5.5);
        Spieler[8] = new Abwehrspieler(""Bill"", 21, 4.5);
        Spieler[9] = new Abwehrspieler(""Alex"", 20, 15.5);
        Spieler[10] = new Sturmspieler(""Benjamin"", 28, 0.5);
        Spieler[10].geburtstagFeiern();
        Fussballspieler[] SpielerZweitesTeam = new Fussballspieler[11];
        SpielerZweitesTeam[0] = new Sturmspieler(""Georgia"", 19, 1.5);
        SpielerZweitesTeam[1] = new Mittelfeldspieler(""Olivia"", 33, 7.5);
        SpielerZweitesTeam[2] = new Torwart(""Milena"", 27, 1.5);
        SpielerZweitesTeam[3] = new Abwehrspieler(""Tara"", 29, 18.5);
        SpielerZweitesTeam[4] = new Abwehrspieler(""Anna"", 21, 9.5);
        SpielerZweitesTeam[5] = new Mittelfeldspieler(""Marleen"", 23, 2.7);
        SpielerZweitesTeam[6] = new Sturmspieler(""Camila"", 22, 4.5);
        SpielerZweitesTeam[7] = new Sturmspieler(""Fernanda"", 28, 5.5);
        SpielerZweitesTeam[8] = new Abwehrspieler(""Ramona"", 21, 4.5);
        SpielerZweitesTeam[9] = new Abwehrspieler(""Clarissa"", 20, 15.5);
        SpielerZweitesTeam[10] = new Sturmspieler(""Lina"", 28, 0.5);
        SpielerZweitesTeam[10].geburtstagFeiern();
     //Werte einfügen
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(SpielerZweitesTeam));
    ausgeben(Spieler);
    fussballspielen(Spieler, SpielerZweitesTeam);
  }
  public static double roteKartenZaehlen(Fussballspieler[] a){
    double anzahlRoteKartenJeSpiel = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] instanceof Abwehrspieler) {
                anzahlRoteKartenJeSpiel += ((Abwehrspieler) a[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return anzahlRoteKartenJeSpiel;
   /* bitte implementieren */
  }
  public static void ausgeben(Fussballspieler[] a){
    for (int i = 0; i < a.length; i++) {
            if (a[i] instanceof Abwehrspieler) {
                System.out.println(((Abwehrspieler) a[i]).toString());
            } else if (a[i] instanceof Mittelfeldspieler) {
                System.out.println (((Mittelfeldspieler) a[i]).toString());
            } else if (a[i] instanceof Sturmspieler) {
                System.out.println(((Sturmspieler) a[i]).toString());
            } else {
                System.out.println(((Torwart) a[i]).toString());
            }
        }
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] a, Fussballspieler[] b){
            double spielStaerkeM = 0;
        for (int i = 0; i < a.length; i++){
            if (a[i] instanceof Abwehrspieler) {
                spielStaerkeM += -2 * ((Abwehrspieler) a[i]).getAnzahlRoteKartenJeSpiel();
            } else if (a[i] instanceof Mittelfeldspieler) {
                spielStaerkeM += ((Mittelfeldspieler) a[i]).getPaesseJeSpiel();
            } else if (a[i] instanceof Sturmspieler) {
                spielStaerkeM += 2 * ((Sturmspieler) a[i]).getToreJeSpiel();
            } else {
                spielStaerkeM += -2 * ((Torwart) a[i]).getGegentoreJeSpiel();
            }
        }
        double spielStaerkeF = 0;
        for (int i = 0; i < b.length; i++){
            if (b[i] instanceof Abwehrspieler) {
                spielStaerkeF += -2 * ((Abwehrspieler) b[i]).getAnzahlRoteKartenJeSpiel();
            } else if (b[i] instanceof Mittelfeldspieler) {
                spielStaerkeF += ((Mittelfeldspieler) b[i]).getPaesseJeSpiel();
            } else if (b[i] instanceof Sturmspieler) {
                spielStaerkeF += 2 * ((Sturmspieler) b[i]).getToreJeSpiel();
            } else {
                spielStaerkeF += -2 * ((Torwart) b[i]).getGegentoreJeSpiel();
            }
        }
        if (spielStaerkeM > spielStaerkeF) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (spielStaerkeF > spielStaerkeM) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        } else {
            System.out.println(""Unentschieden!"");
  }
}
}","//Hier kommt die TestBus Klasse rein
public class TestBus {

    public static void main (String [] args){
        Bus [] b = new Bus [4];
        b [0] = new Bus (20, 3);
        b [1] = new Reisebus(16,2,false);
        b [2] = new Linienbus(50, 4, true, 30);
        b [3] = new Linienbus(50,5,false, 35);
        b[0].tuerOeffnen(2);
        b[1].tuerOeffnen(1);
        b[0].istFahrbereit(b[0]);
        b[1].istFahrbereit(b[1]);
        b[0].tuerSchliessen(1);
        b[0].tuerSchliessen(2);
        b[0].tuerSchliessen(3);
        b[1].tuerSchliessen(1);
        b[1].tuerSchliessen(2);
        b[2].tuerSchliessen(1);
        b[2].tuerSchliessen(2);
        b[2].tuerSchliessen(3);
        b[2].tuerSchliessen(4);
        b[3].tuerSchliessen(1);
        b[3].tuerSchliessen(2);
        b[3].tuerSchliessen(3);
        b[3].tuerSchliessen(4);
        b[2].equals(b[0]);
        b[1].equals(b[2]);
        Bus bus = new Reisebus(40,4,true);
        b[0].equals(bus);
        b[1].equals(bus);
        b[2].equals(bus);
        b[3].equals(bus);
    }
}"
Baumeister,"Niklas Florian",6d51ead2783b861e931f19e20f70fb40,Beendet,"28. Juni 2020  15:16","4. Juli 2020  08:51","5 Tage 17 Stunden","3,41","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Zeile 1 : Klasse A hat keinen Konstruktor",extends,"die Klasse Hund erbt von der Klasse Tier",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Kulzk,"Tabea Leah Isabel",t.kulzk@campus.tu-berlin.de,Beendet,"28. Juni 2020  15:23","30. Juni 2020  18:01","2 Tage 2 Stunden","18,95","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"die Klasse Hund erbt von der Klasse Tier",super,"Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {

	public static void main (String [] args) {
		Bus [] bu = {
		new Bus(10,2), new Reisebus (22, 0, true), new Linienbus (33,5,false,18)	
		};
		bu[2].tuerOeffnen(3);
		bu[2].istFahrbereit();
		bu[0].tuerOeffnen(2);
		bu[0].istFahrbereit();
		bu[1].tuerOeffnen(1);
		bu[1].istFahrbereit();
		bu[0].tuerSchliessen(2);
		bu[1].tuerSchliessen(1);
		bu[2].equals(bu[0]);
		bu[2].equals(bu[1]);
		Reisebus r = new Reisebus (21, 2, true);
		r.equals(bu[0]);
		r.equals(bu[1]);
		r.equals(bu[2]);
	}
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
    //Werte einfügen
    Fussballspieler [] deutschland = {
        new Torwart (""Max"", 22, 3), 
        new Sturmspieler (""Tobi"", 21, 2.2), 
        new Mittelfeldspieler (""Paul"", 23, 4), 
        new Abwehrspieler(""Moritz"", 21, 3.4), 
        new Sturmspieler (""Tom"", 25, 2.8), 
        new Mittelfeldspieler (""Ben"", 24, 4.2), 
        new Abwehrspieler(""Marlon"", 20, 9.4), 
        new Abwehrspieler(""Marvin"", 20, 2.4), 
        new Sturmspieler (""Jasper"", 25, 3.8), 
        new Mittelfeldspieler (""Erich"", 24, 9.2), 
        new Abwehrspieler(""Aron"", 26, 1.4)
    };
    deutschland[1].geburtstagFeiern();
     Fussballspieler [] f2 = { 
        new Torwart (""Alex"", 22, 3), 
        new Sturmspieler (""Taly"", 23, 9.2), 
        new Mittelfeldspieler (""Patrick"", 23, 4.9), 
        new Abwehrspieler(""Marie"", 31, 0.4), 
        new Sturmspieler (""Tara"", 30, 2.8), 
        new Mittelfeldspieler (""Max"", 30, 10.2), 
        new Abwehrspieler(""Viola"", 21, 9.8), 
        new Abwehrspieler(""Moritz"", 29, 1.4), 
        new Sturmspieler (""Jara"", 31, 10.8), 
        new Mittelfeldspieler (""Laura"", 35, 11.2), 
        new Abwehrspieler(""Andrea"", 31, 0.5)        
    };
   f2[5].geburtstagFeiern();
  
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(f2);
    System.out.println();
    fussballspielen(deutschland,f2);
  }

  public static double roteKartenZaehlen(Fussballspieler [] f){
    double r = 0;
    for (int i = 0; i < f.length; i++) {
       	if (f[i] instanceof Abwehrspieler){
       	     Abwehrspieler a = (Abwehrspieler) f[i];
       	    r = r + a.getAnzahlRoteKartenJeSpiel();
       	 }
    }
    return r;
  }
// Für die Methode roteKartenZaehlen spielt die Polymorphie eine Rolle, da aufgrund dieser der Abwehrspieler expliziert refrenziert werden muss, obwohl die Formel nur Abwehrspieler an diese Stelle lässt. 
  public static void ausgeben(Fussballspieler [] f){
      for (int i = 0; i < f.length; i++) {
        System.out.println(f[i].toString());
     }
  }
// Für die Methode ausgeben spielt die Polymorphie eine Rolle, da aufgrund dieser es möglic ist, das jeder Spieler seiner Positon entsprechend ausgeben wird. Die toString Methode der Unterklasse überschreibt die der Oberklasse.
   public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
       double r1 =  roteKartenZaehlen(mannschaft1);
        double r2 =  roteKartenZaehlen(mannschaft2);
        double t1 =  0;
       for (int i = 0; i < mannschaft1.length; i++) {
            if (mannschaft1[i] instanceof Torwart){
       	      Torwart a = (Torwart)mannschaft1[i];
       	      t1 = t1 + a.getGegentoreJeSpiel();
        	 }   
        }
        double t2 = 0;
        for (int i = 0; i < mannschaft2.length; i++) {
            if (mannschaft2[i] instanceof Torwart){
       	      Torwart a = (Torwart) mannschaft2[i];
       	      t2 = t2 + a.getGegentoreJeSpiel();
        	 }   
        }
        double p1 =  0;
       for (int i = 0; i < mannschaft1.length; i++) {
            if (mannschaft1[i] instanceof Mittelfeldspieler){
       	      Mittelfeldspieler a = (Mittelfeldspieler) mannschaft1[i];
       	      p1 = p1 + a.getPaesseJeSpiel();
        	 }   
        }
        double p2 = 0;
        for (int i = 0; i < mannschaft2.length; i++) {
            if (mannschaft2[i] instanceof Mittelfeldspieler){
       	      Mittelfeldspieler a = (Mittelfeldspieler) mannschaft2[i];
       	      p2 = p2 + a.getPaesseJeSpiel();
        	 }   
        }
        double  k1 =  0;
       for (int i = 0; i < mannschaft1.length; i++) {
            if (mannschaft1[i] instanceof Sturmspieler){
       	      Sturmspieler a = (Sturmspieler) mannschaft1[i];
       	      k1 = k1 + a.getToreJeSpiel();
        	 }   
        }
        double k2 = 0;
        for (int i = 0; i < mannschaft2.length; i++) {
            if (mannschaft2[i] instanceof Sturmspieler){
       	      Sturmspieler a = (Sturmspieler) mannschaft2[i];
       	      k2 = k2 + a.getToreJeSpiel();
        	 }   
        }
        int a1 = 0;
        for (int i = 0; i < mannschaft1.length; i++) {
       	      a1 = a1 + mannschaft1[i].getAlter();
        	}  
         int a2 = 0;
        for (int i = 0; i < mannschaft2.length; i++) {
       	      a2 = a2 + mannschaft2[i].getAlter();
        	}
        	
        int length1 = 0;
           for (int i = 0; i < mannschaft1.length; i++) {
       	      length1 = length1 + mannschaft1[i].getName().length();
        	}
         int length2 = 0;
           for (int i = 0; i < mannschaft2.length; i++) {
       	      length2 = length2 + mannschaft2[i].getName().length();
        	}
        double s1 = length1 + a1 + k1- r1 - t1 + p1;
        double s2 = length2 + a2 + k1 - r2 - t2 + p2;
        
        if (s1 < s2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
        else if (s1 == s2) {
            System.out.println(""Unentschieden!"");
        }
        else {
            System.out.println(""Mannschaft 1 gewinnt!"");
        }
   }
}"
Mkama,Carolin,carolin.mkama@campus.tu-berlin.de,Beendet,"28. Juni 2020  17:25","2. Juli 2020  13:06","3 Tage 19 Stunden","5,00","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Zeile 6,7 : super(); müsste vor x=0; stehen",extends,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Hinrichs,"Daria Isabelle",hinrichs@campus.tu-berlin.de,Beendet,"28. Juni 2020  17:47","5. Juli 2020  17:55","7 Tage","5,36","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",extends,"die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen",Object,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Rizk,Youssef,y.rizk@campus.tu-berlin.de,Beendet,"28. Juni 2020  20:10","3. Juli 2020  17:09","4 Tage 20 Stunden","18,66","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","//Hier kommt die TestBus Klasse rein
public class TestBus    {
    
    public static void main(String[] args)  {
        Bus[] b = {
            new Bus(20,3),
            new Reisebus(30,3,true),
            new Linienbus(50,4,true,40)
        };
        
        b[0].tuerOeffnen(2);
        ((Reisebus)b[1]).tuerOeffnen(3);
        ((Linienbus)b[2]).tuerOeffnen(1);
        System.out.println(b[0].istFahrbereit());       
        System.out.println(((Linienbus)b[2]).istFahrbereit());
        for(int i = 0;i < 4;i++)    {
        ((Reisebus)b[1]).tuerSchliessen(i);
        }
        System.out.println(((Reisebus)b[1]).istFahrbereit());
        
        System.out.println(b[2].equals(b[0]));
        System.out.println(b[2].equals(b[1]));
        
        Bus l = new Linienbus(50,4,true,40);
        for(int i = 0;i < b.length;i++) {
            System.out.println(l.equals(b[i]));
    }
    }
}","public class TestMannschaft {
    
    public static void main(String[] args)  {
        Fussballspieler[] tem1 = {  
            new Torwart (""Alfred"",20,1.4),
            new Abwehrspieler(""Thomas"",19,0.2),
            new Abwehrspieler(""Monka S."",18,0.5),
            new Abwehrspieler(""Monka W."",23,1.0),
            new Abwehrspieler(""Luke"",24,0.0),
            new Mittelfeldspieler(""Dan"",22,83.3),
            new Mittelfeldspieler(""Bran"",29,77.2),
            new Mittelfeldspieler(""Kaan"",27,67.9),
            new Sturmspieler(""Imad"",30,1.4),
            new Sturmspieler(""Sam"",23,2.0),
            new Sturmspieler(""Mikan"",25,1.1)    
        };
            
        Fussballspieler[] tem2 = {
            new Torwart (""Alf"",24,2.1),
            new Abwehrspieler(""Tom"",19,0.2),
            new Abwehrspieler(""Monka P."",18,0.5),
            new Abwehrspieler(""Monka E."",23,0.0),
            new Abwehrspieler(""Leia"",24,0.0),
            new Mittelfeldspieler(""Lee"",22,44.3),
            new Mittelfeldspieler(""Bee"",29,72.3),
            new Mittelfeldspieler(""Gee"",27,104.2),
            new Sturmspieler(""Dami"",30,1.4),
            new Sturmspieler(""Sami"",23,2.0),
            new Sturmspieler(""Miklan"",25,1.1) 
        };
        System.out.println(roteKartenZaehlen(tem2));
        ausgeben(tem2);
        fussballspielen(tem1,tem2);
    }
    /*In dieser Methode wird die Klasse Fussballspieler in ein Objekt der Unterklasse ""Abwehrspieler"" durch ""casten"" konvertiert,
     sofern es an dieser Stelle sich auch wirklich um ein Objekt der Klasse Abwehrspieler handelt, wird die Konvertierung erfolgreich
     und die Methoden der Klasse Abwehrspieler koennen nun darauf angewendet werden.*/    
    public static double roteKartenZaehlen(Fussballspieler [] f)    {
        double summe = 0.0;
        for(int i = 0;i < f.length;i++) {
            if(f[i] instanceof Abwehrspieler)   {
                ((Abwehrspieler)f[i]).getAnzahlRoteKartenJeSpiel();
                summe += ((Abwehrspieler)f[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return summe;
    }
    
    /*Polymorphie dient hier dazu dass die Methode ""toString()"" aus der richtigen Unterklasse ausgeführt wird.
     Die Klasse Fussballspieler wird in ein Objekt der jeweiligen Unterklasse konvertiert,
     sodass die zur Unterklasse gehörigen Methode nun erflogreich aufgerufen werden kann.*/
    public static void ausgeben(Fussballspieler[] f)    {
        for(int i = 0;i < f.length;i++) {
            if(f[i] instanceof Abwehrspieler)   {
                System.out.println(((Abwehrspieler)f[i]).toString());
            }else if(f[i] instanceof Torwart)   {
                System.out.println(((Torwart)f[i]).toString());
            }else if(f[i] instanceof Mittelfeldspieler) {
                System.out.println(((Mittelfeldspieler)f[i]).toString());
            }else if(f[i] instanceof Sturmspieler)  {
                System.out.println(((Sturmspieler)f[i]).toString());
            }
        }
    }
    
    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2)    {
        int power1 = 0;
        int power2 = 0;
        double paesseinsg1 = 0.0;
        double paesseinsg2 = 0.0;
        int mittelfeldspieler1 = 0;
        int mittelfeldspieler2 = 0;
        
        if(roteKartenZaehlen(mannschaft1) > 1.0)  {
            power1 -= 1;
            power2 += 1;
        }
        
        if(roteKartenZaehlen(mannschaft2) > 1.0)    {
            power2 -= 1;
            power1 += 1;
        }
        
        for(int i = 0;i < mannschaft1.length;i++)   {
            if(mannschaft1[i] instanceof Sturmspieler)  {
                if(((Sturmspieler)mannschaft1[i]).getToreJeSpiel() > 1.0 && ((Sturmspieler)mannschaft1[i]).getToreJeSpiel() < 2.0)  {
                    power1 += 1;
                }
                else if
                  (((Sturmspieler)mannschaft1[i]).getToreJeSpiel() > 2.0)    {
                      power1 +=2;
                  }
            }
        }
        
        for(int i = 0;i < mannschaft2.length;i++)   {
            if(mannschaft2[i] instanceof Sturmspieler)  {
                if(((Sturmspieler)mannschaft2[i]).getToreJeSpiel() > 1.0 && ((Sturmspieler)mannschaft2[i]).getToreJeSpiel() < 2.0)  {
                    power2 += 1;
                }
                else if
                  (((Sturmspieler)mannschaft2[i]).getToreJeSpiel() > 2.0)    {
                      power2 +=2;
                  }
            }
        }
        
        for(int i = 0;i < mannschaft1.length;i++)   {
            if(mannschaft1[i] instanceof Mittelfeldspieler) {
                mittelfeldspieler1 += 1;
                paesseinsg1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
            }
        }
        double average1 = 1.0 * paesseinsg1 / mittelfeldspieler1;
        
        for(int i = 0;i < mannschaft2.length;i++)   {
            if(mannschaft2[i] instanceof Mittelfeldspieler) {
                mittelfeldspieler2 += 1;
                paesseinsg2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
            }
        }
        double average2 = 1.0 * paesseinsg2 / mittelfeldspieler2;
        
        if(average1 < average2) power2 += 1;
        if(average1 > average2) power1 += 1;
        
        for(int i = 0;i < mannschaft1.length;i++)   {
            if(mannschaft1[i] instanceof Torwart)   {
                if(((Torwart)mannschaft1[i]).getGegentoreJeSpiel() > 1.0 && ((Torwart)mannschaft1[i]).getGegentoreJeSpiel() < 2.0) {
                    power1 -= 1;
                }
                else if(((Torwart)mannschaft1[i]).getGegentoreJeSpiel() > 2.0)  {
                    power1 -= 2;
                }
                else if(((Torwart)mannschaft1[i]).getGegentoreJeSpiel() < 1.0) {
                    power1 += 1;
                }
            }
        }
        
        for(int i = 0;i < mannschaft2.length;i++)   {
            if(mannschaft2[i] instanceof Torwart)   {
                if(((Torwart)mannschaft2[i]).getGegentoreJeSpiel() > 1.0 && ((Torwart)mannschaft2[i]).getGegentoreJeSpiel() < 2.0) {
                    power2 -= 1;
                }
                else if(((Torwart)mannschaft2[i]).getGegentoreJeSpiel() > 2.0)  {
                    power2 -= 2;
                }
                else if(((Torwart)mannschaft2[i]).getGegentoreJeSpiel() < 1.0) {
                    power2 += 1;
                }
            }
        }
        
        if(power1 > power2) System.out.println(""Mannschaft 1 gewinnt!"");
        if(power1 == power2) System.out.println(""Unentschieden!"");
        if(power1 < power2) System.out.println(""Mannschaft 2 gewinnt!"");
    }
                        
        
              
}"
Issa,Sarkis,s.issa@campus.tu-berlin.de,Beendet,"28. Juni 2020  21:26","5. Juli 2020  22:23","7 Tage","9,18","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",super,"Zeile 7 : super(); müsste this(); heißen",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,"public class TestBus {
    public static void main(String[] args) {
        
        
         Bus [ ] buese = new Bus[3];
         
         buese[0]=new Bus(10,4);
         buese[1]=new Linienbus(4, 2, true, 5);
         buese[2]=new Reisebus(15, 30, true);
         
         for(int i=0;i<buese.length;i++)
             System.out.println(buese[i].getAnzahlTueren());
         
         buese[0].tuerOeffnen(2);
         buese[0].tuerOeffnen(3);
         buese[0].tuerOeffnen(6);
         buese[0].tuerOeffnen(1);
         
         buese[2].tuerOeffnen(12);
         buese[2].tuerOeffnen(4);
         buese[2].tuerOeffnen(7);
         buese[2].tuerOeffnen(1);
         
         
         for(int i=0;i<buese.length;i++)
             System.out.println(""BUS-""+(i+1)+""\t""+buese[i].istFahrbereit());
         
         for(int i=0;i<buese.length;i++)
         {
             for(int j=0;j<buese[i].getAnzahlTueren();j++)
             {
                 buese[i].tuerSchliessen(j);
             }
         }
         
         
         
         System.out.println(""Linien-Bus\t""+buese[1].equals(buese[0]));
         
         
         System.out.println(""Linien-Reise\t""+buese[1].equals(buese[2]));
         
         Reisebus reisebus=new Reisebus(15, 30, true);
         
         
         for(int i=0;i<buese.length;i++)
         {
             System.out.println(""Bus-""+i+""\t""+buese[i].equals(reisebus));
         }
    }
    
}"
Baraz,Sam,sam.baraz@campus.tu-berlin.de,Beendet,"28. Juni 2020  22:04","30. Juni 2020  17:56","1 Tag 19 Stunden","19,36",super,"Es wird die Methode der Super-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",Object,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
    public static void main(String[] args){
        // Arrays definieren
        Fussballspieler[] mannschaft1 = {
                new Torwart(""Spieler A"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Abwehrspieler(""Spieler B"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Abwehrspieler(""Spieler C"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Abwehrspieler(""Spieler D"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Mittelfeldspieler(""Spieler E"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Mittelfeldspieler(""Spieler F"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Mittelfeldspieler(""Spieler G"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler H"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler I"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler J"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler K"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
        };
        Fussballspieler[] mannschaft2 = {
                new Torwart(""Spieler a"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Abwehrspieler(""Spieler b"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Abwehrspieler(""Spieler c"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Abwehrspieler(""Spieler d"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Mittelfeldspieler(""Spieler e"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Mittelfeldspieler(""Spieler f"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Mittelfeldspieler(""Spieler g"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler h"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler i"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler j"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
                new Sturmspieler(""Spieler k"", (int)(Math.random()*35) + 18, (double) (Math.random()*10) + 1),
        };
        mannschaft1[0].geburtstagFeiern();

        //Werte einfügen

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
        System.out.println();
        ausgeben(mannschaft1);
        System.out.println();
        fussballspielen(mannschaft1,mannschaft2);
        System.out.println(mannschaft1[3].toString());
        System.out.println(((Abwehrspieler)mannschaft1[3]).toString());
    }

    public static double roteKartenZaehlen(Fussballspieler[] array){
        double sum = 0;
        for (int i = 0; i < array.length; i++){

            // Hier prüfe ich, ob ein Fussballspieler Objekt auch ein Abwehrspieler Objekt ist. (Polymorphie)
            if (array[i] instanceof Abwehrspieler){

                // Hier stelle ich sicher, dass das Objekt auf die Subklasse konvertiert (gecastet) wird,
                // damit ich auf dessen Methoden zugreifen kann.
                sum += ((Abwehrspieler)array[i]).getAnzahlRoteKartenJeSpiel(); }
        }
        return sum;
    }

    public static void ausgeben(Fussballspieler[] array){
        //String sum = """";
        for (int i = 0; i < array.length; i++){
            //Hier muss ich nicht nochmal explizit ((Unterklasse)array[i]).toString() schreiben, trotz Polymorphie
            //sum += array[i].toString() + ""\n"";
            System.out.println(array[i].toString());            
        }
        //System.out.println(sum);
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
        double staerkeTeam1 = 0;
        double staerkeTeam2 = 0;
        for (int i = 0; i < mannschaft1.length; i++){
            if (mannschaft1[i] instanceof Torwart){
                staerkeTeam1 -= ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
            }
            else if (mannschaft1[i] instanceof Abwehrspieler){
                staerkeTeam1 -= ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
            }
            else if (mannschaft1[i] instanceof Mittelfeldspieler){
                staerkeTeam1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
            }
            else if (mannschaft1[i] instanceof Sturmspieler){
                staerkeTeam1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
            }
        }
        for (int i = 0; i < mannschaft2.length; i++){
            if (mannschaft2[i] instanceof Torwart){
                staerkeTeam2 -= ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
            }
            else if (mannschaft2[i] instanceof Abwehrspieler){
                staerkeTeam2 -= ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
            }
            else if (mannschaft2[i] instanceof Mittelfeldspieler){
                staerkeTeam2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
            }
            else if (mannschaft2[i] instanceof Sturmspieler){
                staerkeTeam2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
            }
        }
        if (staerkeTeam1 > staerkeTeam2){
            System.out.println(""Mannschaft 1 gewinnt!"");
        }
        else if (staerkeTeam1 < staerkeTeam2){
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
        else if (staerkeTeam1 == staerkeTeam2){
            System.out.println(""Unentschieden!"");
        }

    }
}","public class TestBus {

    public static void main(String[] args){

        Bus[] busListe = {
                new Bus(10, 4),
                new Reisebus(20, 3, true),
                new Linienbus(30, 5, true, 69),
                new Bus(40, 0)};

        for (int i = 0; i < busListe.length; i++){
            busListe[i].tuerOeffnen((int)(Math.random()*(busListe[i].getAnzahlTueren()))+1);
            System.out.println(""Bus mit Ref.: "" + busListe[i] + "" \t fahrbereit: "" + busListe[i].istFahrbereit());
        }
        for (int i = 0; i < busListe[1].getAnzahlTueren(); i++){
            if (busListe[1].getTueren()[i].getOffen() == true){
                busListe[1].getTueren()[i].schliessen();
            }
        }
        System.out.println();
        for (int i = 0; i < busListe.length; i++){
            System.out.println(""Bus mit Ref.: "" + busListe[i] + "" \t fahrbereit: "" + busListe[i].istFahrbereit());
        }
        System.out.println();
        System.out.println(busListe[2].equals(busListe[0]));
        System.out.println(busListe[2].equals(busListe[1]));

        System.out.println();
        Linienbus vergleichsbus = new Linienbus(30, 5, true, 69);

        for (int i = 0; i < busListe.length; i++){
            System.out.println(""Vergleich mit Listenelement Nr. "" + (i+1) + "": "" + vergleichsbus.equals(busListe[i]));
        }

    }

}"
Klinkert,"Lisa Maria",klinkert@campus.tu-berlin.de,Beendet,"29. Juni 2020  00:05","5. Juli 2020  23:56","6 Tage 23 Stunden","10,67","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier",super,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft {
	
	public static void main(String[] args){
	      
	/**     // Arrays definieren
	     
	     
	    //Werte einfügen

	    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
	    System.out.println();
	    ausgeben(......);
	    System.out.println();
	    fussballspielen(................); **/
	
	    //Array
		
	
		
	//TestMannschaft union = new TestMannschaft[11];//Wie ist die Syntax?
	Fussballspieler[] union = new Fussballspieler[11];
	
	
	
	union [0] = new Mittelfeldspieler (""Maria Stark"", 19, 23.5);
	union [1] = new Mittelfeldspieler (""Lisa Weiblich"", 21, 50.0);
	union [2] = new Mittelfeldspieler (""Frauke Sportlich"", 18, 73.25);
	union [3] = new Abwehrspieler (""Hildegart Etepetete"", 21, 0.0);
	union [4] = new Abwehrspieler (""Sina Auer"", 21, 10.5);
	union [5] = new Abwehrspieler (""Manns Weib"", 28, 5.0);
	union [6] = new Sturmspieler (""Rene Schön"", 22, 4.5);
	union [7] = new Sturmspieler (""Anette Raufda"", 20, 5.0);
	union [8] = new Sturmspieler (""Andrea Wütich"", 18, 6.5);
	union [9] = new Sturmspieler (""Mina Cortes"", 19, 7.0);
	union [10] = new Torwart (""Zora Li"", 31, 2.5);
	
	
	//TestMannschaft[] hsv = new TestMannschaft[11];
	Fussballspieler[] hsv = new Fussballspieler[11];
	
	hsv [0] = new Mittelfeldspieler (""Hummel MorsMors"", 20, 90.5);
	hsv [1] = new Mittelfeldspieler (""Matina Jes"", 21, 8.15);
	hsv [2] = new Mittelfeldspieler (""Aalina Lecker"", 22, 66.66);
	hsv [3] = new Abwehrspieler (""Toni Michel"", 27, 2.0);
	hsv [4] = new Abwehrspieler (""Imke Alster"", 21, 9.5);
	hsv [5] = new Abwehrspieler (""Bambi Barmbek"", 20, 1.0);
	hsv [6] = new Sturmspieler (""Ham Weh"", 21, 7.5);
	hsv [7] = new Sturmspieler (""Schnecki Schnack"", 20, 2.0);
	hsv [8] = new Sturmspieler (""Uta Lütten"", 19, 4.5);
	hsv [9] = new Sturmspieler (""Ina Müller"", 29, 7.0);
	hsv [10] = new Torwart (""Dude Dör"", 26, 1.5);
	
	
	union[0].geburtstagFeiern();
	
	
	System.out.println(""Rote Katen: ""+roteKartenZaehlen(union)); //muss ich deutschland nehmen?
//	System.out.println(""Rote Katen: ""+roteKartenZaehlen(hsv));
	System.out.println();
	ausgeben(union);
	ausgeben(hsv);
	System.out.println();
	fussballspielen(union, hsv);
	
	
}
	
	//Casten UNTERKLASSE Methode get...
	/** KOMMENTAR POLYMORPHIE:
	 * Polymorphie tritt bei gleicher Benennung von Methoden bzw Attributen 
	 * in Super- UND Unterklasse auf. 
	 * ""AnzahlRoteKarten"" tritt jedoch nur in der Unterklasse auf, was den Zugriff darauf 
	 * über die  Superklasse erschwert. Dazu muss hier gecastet werden, damit der Compiler 
	 * Zugriff auf die UNterklasse ÜBER die Superklasse erlangt. **/
	 public static double roteKartenZaehlen (Fussballspieler[] mannschaft){
		double anzahlRoteKartenJeSpiel = 0.00;//double anzahlRoteKartenJeSpiel += Abwehrspieler.Fussballspieler;
		 for (int i = 0; i < mannschaft.length; i++) {	
			 if (mannschaft[i] instanceof Abwehrspieler){
				Abwehrspieler as = (Abwehrspieler) mannschaft[i]; //Casten weil Zugriff auf unterklasse
				anzahlRoteKartenJeSpiel += as.getAnzahlRoteKartenJeSpiel();
			  }					
		 }
		  return anzahlRoteKartenJeSpiel;
		}
		
	  
		 
	 /** KOMMENTAR POLYMORPHIE:
	  * toString ist Methode der Object-Klasse und wird beim verwenden in 
	  * der Superklasse bzw in der Unterklasse überschrieben. 
	  * Daher sollte man beim Verwenden in einer Unterklasse ""super.toString""
	  * benutzen, um das Überschreiben zu verhindern.**/
	  public static void ausgeben(Fussballspieler[] mannschaft){ //funktioniert
		  for (int i = 0; i < mannschaft.length; i++) {
				System.out.println(mannschaft[i].toString()); //toString richtig?
			} 
		
		  
		  }
	 public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		//int alter;
		 double gegentoreJeSpielUNION=0; //
		 double gegentoreJeSpielHSV=0;	// 
		 
		 double anzahlRoteKartenJeSpielUNION=0; //
		 double anzahlRoteKartenJeSpielHSV=0; //
		 
		 double paesseJeSpielUNION=0;  //
		 double paesseJeSpielHSV=0; 	//
		 
		 double toreJeSpielUNION=0; //
		 double toreJeSpielHSV=0; //
		
		 
		 
		 for (int i = 0; i< mannschaft1.length; i++) {
			 if (mannschaft1[i] instanceof Torwart) {
			 Torwart t = (Torwart) mannschaft1[i];
			 gegentoreJeSpielUNION += t.getGegentoreJeSpiel();
			 }
		 }		 
		 for (int i = 0; i< mannschaft2.length; i++) {
			 if (mannschaft2[i] instanceof Torwart) {
			 Torwart t = (Torwart) mannschaft2[i];
			 gegentoreJeSpielHSV += t.getGegentoreJeSpiel();
			 }
		 }
		 
		 
		 
		 for (int i = 0; i< mannschaft1.length; i++) {
			 if (mannschaft1[i] instanceof Mittelfeldspieler) {
			 Mittelfeldspieler mf = (Mittelfeldspieler) mannschaft1[i];
			 paesseJeSpielUNION += mf.getPaesseJeSpiel();
			 }
		 }		
		 for (int i = 0; i< mannschaft2.length; i++) {
			 if (mannschaft2[i] instanceof Mittelfeldspieler) {
			 Mittelfeldspieler mf = (Mittelfeldspieler) mannschaft2[i];
			 paesseJeSpielHSV += mf.getPaesseJeSpiel();
			 }
		 }
		 
		 
		 
		 for (int i = 0; i< mannschaft1.length; i++) {
			 if (mannschaft1[i] instanceof Sturmspieler) {
			 Sturmspieler st = (Sturmspieler) mannschaft1[i];
			 toreJeSpielUNION += st.getToreJeSpiel();
			 }
		 }
		 for (int i = 0; i< mannschaft2.length; i++) {
			 if (mannschaft2[i] instanceof Sturmspieler) {
			 Sturmspieler st = (Sturmspieler) mannschaft2[i];
			 toreJeSpielHSV += st.getToreJeSpiel();
			 }
		 }
		 
		 
		 
		 for (int i = 0; i< mannschaft1.length; i++) {
			 if (mannschaft1[i] instanceof Abwehrspieler) {
				 Abwehrspieler aw = (Abwehrspieler) mannschaft1[i];
			 anzahlRoteKartenJeSpielUNION += aw.getAnzahlRoteKartenJeSpiel();
			 }
		 }
		 for (int i = 0; i< mannschaft2.length; i++) {
			 if (mannschaft2[i] instanceof Abwehrspieler) {
				 Abwehrspieler aw = (Abwehrspieler) mannschaft2[i];
			 anzahlRoteKartenJeSpielHSV += aw.getAnzahlRoteKartenJeSpiel();
			 }
		 }
			 
			
	
		 
		 
		 
		 if((paesseJeSpielUNION > paesseJeSpielHSV || gegentoreJeSpielUNION < gegentoreJeSpielHSV) && (toreJeSpielUNION > toreJeSpielHSV && anzahlRoteKartenJeSpielUNION < anzahlRoteKartenJeSpielHSV)) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		}	 
		
	   	if ((paesseJeSpielUNION < paesseJeSpielHSV || gegentoreJeSpielUNION > gegentoreJeSpielHSV) && (toreJeSpielUNION < toreJeSpielHSV && anzahlRoteKartenJeSpielUNION > anzahlRoteKartenJeSpielHSV)) {
	  		System.out.println(""Mannschaft 2 gewinnt!"");
	  	}
	  	else {
	  		System.out.println(""Unentschieden!"");
	  	}
	 }
}","public class TestBus {

	public static void main(String[] args) {
		
		Bus[] b = new Bus[4];
		
		b[0] = new Bus(30, 2);
		b[1] = new Reisebus(50, 2, true);
		b[2] = new Linienbus(60, 3, true, 20);
		
		
		
		
 		b[0].tuerOeffnen(2);
 		b[0].istFahrbereit();
 		
 		b[1].tuerOeffnen(1);
 		b[1].istFahrbereit();
 		
 		
 		
 		b[0].tuerSchliessen(2);
 		b[0].istFahrbereit();
 		//b[0].losfahren(true);
 		
 		b[1].tuerSchliessen(1);
 		b[1].istFahrbereit();
 		//b[1].losfahren(true);
 		
 		b[2].istFahrbereit();
 		//b[2].losfahren(true);
 		
 		
 		b[2].equals(b[0]);
 		b[2].equals(b[1]);
 		
 		
 		b[3] = new Reisebus(40, 3, false);
 		
 		b[3].equals(b[0]);
 		b[3].equals(b[1]);
 		b[3].equals(b[2]);
 		
 		
	}
}"
Dimaridis,Themistoklis,t.dimaridis@campus.tu-berlin.de,Beendet,"29. Juni 2020  00:05","5. Juli 2020  21:52","6 Tage 21 Stunden","5,36","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","die Klasse Hund erbt von der Klasse Tier",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Adam,Florian,b49346ceb0c7713a2b24db2f1a573e9f,Beendet,"29. Juni 2020  00:15","6. Juli 2020  00:02","6 Tage 23 Stunden","5,50","die Klasse Hund erbt von der Klasse Tier",super,Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus{
	public static void main(String[] args) {
    Bus bus = new Bus(3,5);
    Reisebus rbus = new Reisebus(4,6,true);
    Linienbus lbus = new Linienbus(2,3,false,2);
    Bus[] arr = {bus, rbus, lbus};
    arr[0].tuerOeffnen(2);
    arr[0].tuerSchliessen(2);
    arr[0].istFahrbereit();
    arr[1].istFahrbereit();
    arr[2].istFahrbereit();
    arr[2].equals(arr[0]);
    arr[2].equals(arr[1]);
    Linienbus lbus2 = new Linienbus(3,2,true,2);
    for(int i = 0; i <3;i++){
        lbus2.equals(arr[i]);
    	}
        
    }
}",-
Ou,Yanwen,yanwen.ou@campus.tu-berlin.de,Beendet,"29. Juni 2020  00:49","5. Juli 2020  23:22","6 Tage 22 Stunden","4,86","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können",Object,extends,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Bohlinger,"Hannes Robert",bohlinger@campus.tu-berlin.de,Beendet,"29. Juni 2020  01:12","5. Juli 2020  21:01","6 Tage 19 Stunden","17,98",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"die Klasse Hund erbt von der Klasse Tier","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {7. <sub>fellfarbe:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String[] args) {
		Bus[] busse = new Bus[] {
			new Bus(10, 1),
			new Reisebus(40, 2, true),
			new Reisebus(45, 2, false),
			new Linienbus(60, 3, true, 60)
		};
		
		busse[0].tuerOeffnen(1);
		System.out.println(""Bus 0 fahrbereit: "" + busse[0].istFahrbereit());
		
		busse[1].tuerOeffnen(2);
		System.out.println(""Reisebus 1 fahrbereit: "" + busse[1].istFahrbereit());
		
		busse[2].tuerOeffnen(1);
		System.out.println(""Reisebus 2 fahrbereit: "" + busse[2].istFahrbereit());
		
		busse[3].tuerOeffnen(3);
		System.out.println(""Linienbus 3 fahrbereit: "" + busse[3].istFahrbereit());
		
		busse[0].tuerSchliessen(1);
		
		busse[1].tuerSchliessen(1);
		busse[1].tuerSchliessen(2);
		
		busse[2].tuerSchliessen(1);
		busse[2].tuerSchliessen(2);
		
		busse[3].istFahrbereit();
		
		System.out.println(""Linienbus ist gleich Bus: "" + busse[3].equals(busse[0]));
		System.out.println(""Linienbus ist gleich Reisebus: "" + busse[3].equals(busse[2]));
		
		Linienbus linienbus = new Linienbus(60, 3, true, 60);
		
		for (int i = 0; i < busse.length; i++) {
			System.out.println(""Linienbus ist gleich Bus "" + i + "": "" + linienbus.equals(busse[i]));
		}
	}
}","import java.util.Random;

//Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
//Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft {
	public static void main(String[] args){
	   
	  // Arrays definieren
		Fussballspieler[] team1 = new Fussballspieler[] {
			new Torwart(""Habo 1"", 31, 0.2),
			
			new Abwehrspieler(""Habo 2"", 32, 0.1),
			new Abwehrspieler(""Habo 3"", 34, 0.2),
			new Abwehrspieler(""Habo 4"", 29, 0.3),
			
			new Mittelfeldspieler(""Habo 5"", 28, 10),
			new Mittelfeldspieler(""Habo 5"", 28, 2),
			
			new Sturmspieler(""Habo 7"", 28, 0.8),
			new Sturmspieler(""Habo 8"", 28, 1.3),
			new Sturmspieler(""Habo 9"", 28, 0.1),
			new Sturmspieler(""Habo 10"", 28, 0.2),
			new Sturmspieler(""Habo 11"", 28, 1)
		};
  
		Fussballspieler[] team2 = new Fussballspieler[] {
			new Torwart(""Fipsi 1"", 31, 0.2),
			
			new Abwehrspieler(""Fipsi 2"", 32, 0.1),
			new Abwehrspieler(""Fipsi 3"", 34, 0.2),
			new Abwehrspieler(""Fipsi 4"", 29, 0.3),
			
			new Mittelfeldspieler(""Habo 5"", 28, 2),
			new Mittelfeldspieler(""Habo 5"", 28, 2),
			
			new Sturmspieler(""Fipsi 7"", 28, 0.8),
			new Sturmspieler(""Fipsi 8"", 28, 1.3),
			new Sturmspieler(""Fipsi 9"", 28, 0.1),
			new Sturmspieler(""Fipsi 10"", 28, 0.2),
			new Sturmspieler(""Fipsi 11"", 28, 1)
		};
		
		Random random = new Random();
		int randomPlayerIndex = random.nextInt(11 * 2 + 1);
		
		if (randomPlayerIndex < 11) {
			team1[randomPlayerIndex].geburtstagFeiern();
		} else {
			team2[randomPlayerIndex - 11].geburtstagFeiern();
		}
	 

		System.out.println(""Rote Karten: "" + roteKartenZaehlen(team1));
		System.out.println();
		ausgeben(team1);
		System.out.println();
		fussballspielen(team1, team2);
	}

	public static double roteKartenZaehlen(Fussballspieler... spielerListe) {
		double summe = 0;
		
		for (Fussballspieler spieler : spielerListe) {
			// Hier wird Polymorphie verwendet, um nur Abwehrspieler bei der Berechnung der Summe zu berücksichtigen
			if (spieler instanceof Abwehrspieler) {
				// Hier wird der Fussballspieler zu einem Abwehrspieler gecastet, damit dann auf seine getAnzahlRoteKartenJeSpiel() Methode zugegriffen werden kann
				Abwehrspieler aSpieler = (Abwehrspieler)spieler;
				
				// Methode des Abwehrspielers aufrufen zur Berechnen der Summe aller roten Karten je Spiel
				summe += aSpieler.getAnzahlRoteKartenJeSpiel();
			}
		}
		
		return summe;
	}

	public static void ausgeben(Fussballspieler... spielerListe) {
		for (Fussballspieler spieler : spielerListe) {
			System.out.print(spieler.toString());
		}
	}

	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
		double staerkeMannschaft1 = 0;
		double staerkeMannschaft2 = 0;
		
		for (Fussballspieler spieler : mannschaft1) {
			if (spieler instanceof Torwart) {
				staerkeMannschaft1 -= ((Torwart)spieler).getGegentoreJeSpiel();
			}
			
			if (spieler instanceof Sturmspieler) {
				staerkeMannschaft1 += ((Sturmspieler)spieler).getToreJeSpiel();
			}
			
			if (spieler instanceof Mittelfeldspieler) {
				staerkeMannschaft1 += ((Mittelfeldspieler)spieler).getPaesseJeSpiel();
			}
		}
		
		for (Fussballspieler spieler : mannschaft2) {
			if (spieler instanceof Torwart) {
				staerkeMannschaft2 -= ((Torwart)spieler).getGegentoreJeSpiel();
			}
			
			if (spieler instanceof Sturmspieler) {
				staerkeMannschaft2 += ((Sturmspieler)spieler).getToreJeSpiel();
			}
			
			if (spieler instanceof Mittelfeldspieler) {
				staerkeMannschaft2 += ((Mittelfeldspieler)spieler).getPaesseJeSpiel();
			}
		}
		
		if (staerkeMannschaft1 > staerkeMannschaft2) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		} else if (staerkeMannschaft2 > staerkeMannschaft1) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		} else {
			System.out.println(""Unentschieden!"");
		}
	}
}"
Graunke,"Hannes Timothy",graunke@campus.tu-berlin.de,Beendet,"29. Juni 2020  09:56","5. Juli 2020  19:53","6 Tage 9 Stunden","5,00","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,Object,"Zeile 7 : super(); müsste this(); heißen","Es wird die Methode der Super-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Lex,Matthias,m.lex@campus.tu-berlin.de,Beendet,"29. Juni 2020  10:38","5. Juli 2020  23:59","6 Tage 13 Stunden","5,86",super,"die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Kreher,"Adrian Gerke",adrian.kreher@campus.tu-berlin.de,Beendet,"29. Juni 2020  10:50","6. Juli 2020  00:05","6 Tage 13 Stunden","17,90","die Klasse Hund erbt von der Klasse Tier",super,Object,"Es wird die Methode der Sub-Klasse aufgerufen","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
    //Werte einfügen
	Fussballspieler[] deutschland = {
			new Torwart(""Luis Klatte"", 20, 1),
			new Abwehrspieler(""Max Mulack"", 21, 0.5),
			new Abwehrspieler(""Niko Koulis"", 21, 0.7),
			new Abwehrspieler(""Rico Morack"", 32, 0.3),
			new Abwehrspieler(""Florian Baak"", 21, 0.6),
			new Mittelfeldspieler(""Timothy Mason"", 22, 7),
			new Mittelfeldspieler(""Miralem Ramic"", 20, 9.4),
			new Mittelfeldspieler(""Bilal Cubukcu"", 33, 11.3),
			new Mittelfeldspieler(""Tony Fuchs"", 30, 8.7),
			new Sturmspieler(""Muhammed Kiprit"", 21, 0.8),
			new Sturmspieler(""Jessic Ngankam"", 20, 1.2)
		};
		Fussballspieler[] union = {
			new Torwart(""Rafal Gikiewicz"", 33, 1.2),
			new Abwehrspieler(""Neven Subotic"", 32, 0.6),
			new Abwehrspieler(""Julian Ryerson"", 23, 0.4),
			new Abwehrspieler(""Christopher Trimmel"", 33, 0.8),
			new Mittelfeldspieler(""Akaki Gogia"", 28, 6.7),
			new Mittelfeldspieler(""Florian Flecker"", 25, 9.7),
			new Mittelfeldspieler(""Yunus Malli"", 28, 8.9),
			new Mittelfeldspieler(""Felix Kroos"", 29, 10.6),
			new Sturmspieler(""Sebastian Andersson"", 29, 0.7),
			new Sturmspieler(""Suleiman Abdullahi"", 24, 0.6),
			new Sturmspieler(""Sheraldo Becker"", 25, 0.9)
		};
	deutschland[0].geburtstagFeiern();
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, union);
  }

	// Da die Methode getAnzahlRoteKartenJeSpiel() nur in der Klasse Abwehrspieler definiert ist,
	// aber unser Array die Spieler als Fussballspieler übermittelt, muss man diese explizit
	// zu Abwehrspielern casten (s. Zeile 52), damit man die Methode anwenden kann.
  public static double roteKartenZaehlen(Fussballspieler[] mn){
    
   /* bitte implementieren */
   double sum = 0;
		for(int i = 0; i<mn.length; i++){
			if(mn[i] instanceof Abwehrspieler){
			sum += ((Abwehrspieler)mn[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return sum;
	}
	
	// Hier benutzen die Klassen die toString Methode, welche ihnen am ""nächsten""
	// steht. Das ist dann jeweils die klasseneigenen nicht die aus Object.
	// Das überschreiben der Methode toString von Object durch die toString Methode
	// aus den Spieler-Klassen wird Polymorphie genannt.
  public static void ausgeben(Fussballspieler[] mn){
    
   /* bitte implementieren */
   for(int i = 0; i<mn.length; i++){
			System.out.println(mn[i]);
		}
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
   double torstaerkemn1 = 0;
		double torstaerkemn2 = 0;
		double abwehrstaerkemn1 = 0;
		double abwehrstaerkemn2 = 0;
		double mittelstaerkemn1 = 0;
		double mittelstaerkemn2 = 0;
		double sturmstaerkemn1 = 0;
		double sturmstaerkemn2 = 0;
		double spielstaerkemn1 = 0;
		double spielstaerkemn2 = 0;
		String draw = ""Unentschieden!"";
		String mn1won = ""Mannschaft 1 gewinnt!"";
		String mn2won = ""Mannschaft 2 gewinnt!"";
		for(int i = 0; i<mannschaft1.length; i++){
			if(mannschaft1[i] instanceof Torwart){
				torstaerkemn1 = torstaerkemn1 - ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
			}
			if(mannschaft2[i] instanceof Torwart){
				torstaerkemn2 = torstaerkemn2 - ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
			}
			if(mannschaft1[i] instanceof Abwehrspieler){
				abwehrstaerkemn1 = abwehrstaerkemn1 - ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft2[i] instanceof Abwehrspieler){
				abwehrstaerkemn2 = abwehrstaerkemn2 - ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft1[i] instanceof Mittelfeldspieler){
				mittelstaerkemn1 = mittelstaerkemn1 + ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
			}
			if(mannschaft2[i] instanceof Mittelfeldspieler){
				mittelstaerkemn2 = mittelstaerkemn2 + ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
			}
			if(mannschaft1[i] instanceof Sturmspieler){
				sturmstaerkemn1 = sturmstaerkemn1 + ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			}
			if(mannschaft2[i] instanceof Sturmspieler){
				sturmstaerkemn2 = sturmstaerkemn2 + ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
			}
		}
		spielstaerkemn1 = 10*torstaerkemn1 + abwehrstaerkemn1 + 4*mittelstaerkemn1 + 10*sturmstaerkemn1;
		spielstaerkemn2 = 10*torstaerkemn2 + abwehrstaerkemn2 + 4*mittelstaerkemn2 + 10*sturmstaerkemn2;
		if(spielstaerkemn1 > spielstaerkemn2){
			System.out.println(""Mannschaft 1 gewinnt!"");
		} else if (spielstaerkemn2 > spielstaerkemn1){
			System.out.println(""Mannschaft 2 gewinnt!"");
		} else if(spielstaerkemn2 == spielstaerkemn1) {
			System.out.println(""Unentschieden!"");
		}		
	}

}","public class TestBus{
	
	public static void main(String[] args){
	Bus[] bvg = {
	new Bus(45, 2),
	new Reisebus(91, 3, false),
	new Linienbus(53, 3, false, 31),
	new Reisebus(91, 3, false),
	new Linienbus(53, 5, true, 31)
	};
	bvg[0].tuerOeffnen(1);
	bvg[1].tuerOeffnen(2);
	bvg[2].tuerOeffnen(1);
	bvg[0].tuerSchliessen(1);
	System.out.println(""Der Bus ist Fahrbereit: ""+bvg[0].istFahrbereit()+"" und hat so viele Tueren:""+bvg[0].getAnzahlTueren());
	System.out.println(""Der Linienbus ist Fahrbereit: ""+bvg[2].istFahrbereit()+"" und hat so viele Tueren:""+bvg[2].getAnzahlTueren());
	System.out.println(""Der Reisebus ist Fahrbereit: ""+bvg[1].istFahrbereit()+"" und hat so viele Tueren:""+bvg[1].getAnzahlTueren());
	//System.out.println(""Der Reisebus2 ist Fahrbereit: ""+bvg[3].istFahrbereit()+"" und hat so viele Tueren:""+bvg[3].getAnzahlTueren());
	//System.out.println(""Der Linienbus2 ist Fahrbereit: ""+bvg[4].istFahrbereit()+"" und hat so viele Tueren:""+bvg[4].getAnzahlTueren());

	for(int i = 0; i<bvg.length; i++){
		machFahrbereit(bvg[i]);
	}
	//System.out.println(""Der Bus ist Fahrbereit: ""+bvg[0].istFahrbereit());
	//System.out.println(""Der Linienbus ist Fahrbereit: ""+bvg[2].istFahrbereit());
	//System.out.println(""Der Reisebus ist Fahrbereit: ""+bvg[1].istFahrbereit());
	//System.out.println(""Der Reisebus2 ist Fahrbereit: ""+bvg[3].istFahrbereit());
	//System.out.println(""Der Linienbus2 ist Fahrbereit: ""+bvg[4].istFahrbereit());

	System.out.println(bvg[2].equals(bvg[0]));
	System.out.println(bvg[2].equals(bvg[1]));
	Bus bs = new Linienbus(53, 5, true, 31);
	for(int i = 0; i<bvg.length; i++){
		System.out.println(bs.equals(bvg[i]));
	}
	}
	
	public static void machFahrbereit(Bus bus){
		for(int i = 0; i<bus.getAnzahlTueren(); i++){
			bus.tuerSchliessen(i+1);
		}
	}
}"
"Peraza Escobar","Yurena Viktoria",y.perazaescobar@campus.tu-berlin.de,Beendet,"29. Juni 2020  11:12","2. Juli 2020  19:10","3 Tage 7 Stunden","11,45","Es wird die Methode der Sub-Klasse aufgerufen","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,extends,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
	public static void main(String [] args){

		Fussballspieler[] team1 = {
			new Torwart(""Neuer"", 20, 5),
			new Sturmspieler(""Stormy"", 20, 6),
			new Mittelfeldspieler(""Manny"", 20, 7),
			new Abwehrspieler(""no1"", 20, 1),
			new Abwehrspieler(""no2"", 20, 1),
			new Abwehrspieler(""no3"", 20, 2),
			new Abwehrspieler(""no4"", 20, 3),
			new Abwehrspieler(""no5"", 20, 4),
			new Abwehrspieler(""no6"", 20, 5),
			new Abwehrspieler(""no7"", 20, 6),
			new Abwehrspieler(""no8"", 20, 7),
		};
		
		Fussballspieler[] team2 = {
			new Torwart(""Meier"", 20, 5),
			new Sturmspieler(""Stormo"", 20, 6),
			new Mittelfeldspieler(""Manno"", 20, 7),
			new Abwehrspieler(""nr1"", 20, 0),
			new Abwehrspieler(""nr2"", 20, 1),
			new Abwehrspieler(""nr3"", 20, 2),
			new Abwehrspieler(""nr4"", 20, 3),
			new Abwehrspieler(""nr5"", 20, 4),
			new Abwehrspieler(""nr6"", 20, 5),
			new Abwehrspieler(""nr7"", 20, 6),
			new Abwehrspieler(""nr8"", 20, 7),
		};
			

		team1[0].geburtstagFeiern();
		System.out.println(roteKartenZaehlen(team2));
		ausgeben(team1);
		fussballspielen(team1, team2);
		
	}
	
	public static double roteKartenZaehlen(Fussballspieler[] spieler){
		double karten = 0;
		for(int i = 0; i < spieler.length; i++){
			if(spieler[i] instanceof Abwehrspieler){
				karten += ((Abwehrspieler)spieler[i]).getAnzahlRoteKartenJeSpiel();
			}
			
		}
		return karten;
	}
	
	/* Wir haben ein Objekt der Subklasse Abwehrspieler in eine Objektvariable von dem Typ Fussballspieler eingespeichert.
		Um also auf Methoden der Subklasse Abwehrspieler zuzugreifen muss erst explizit die Klasse getypecastet werden*/
	
	
	public static void ausgeben(Fussballspieler[] spieler){
		for(int i = 0; i < spieler.length; i++){
			System.out.println(spieler[i].toString());	
		}
	}
	
	/* Die Methode toString ist sowohl in der Superklasse Fussballspieler, als auch in den Subklassen vorhanden und wird daher überschrieben.
		Je nachden zu welcher Subklasse der Spieler gehört, wird die entsprechende toString-Methode ausgegeben*/
	
	
	public static void fussballspielen(Fussballspieler[] teamA, Fussballspieler[] teamB ){
		double spielstaerkeTeamA = 0;
		double spielstaerkeTeamB = 0;
		
		for(int i = 0; i < teamA.length; i++){
			if(teamA[i] instanceof Abwehrspieler){
				spielstaerkeTeamA -= ((Abwehrspieler)teamA[i]).getAnzahlRoteKartenJeSpiel();
			}else if(teamA[i] instanceof Torwart){
				spielstaerkeTeamA -= ((Torwart)teamA[i]).getGegentoreJeSpiel();
			}else if(teamA[i] instanceof Mittelfeldspieler){
				spielstaerkeTeamA += ((Mittelfeldspieler)teamA[i]).getPaesseJeSpiel();
			}else if(teamA[i] instanceof Sturmspieler){
				spielstaerkeTeamA += ((Sturmspieler)teamA[i]).getToreJeSpiel();
			}
		}
		
		for(int i = 0; i < teamB.length; i++){
			if(teamB[i] instanceof Abwehrspieler){
				spielstaerkeTeamB -= ((Abwehrspieler)teamB[i]).getAnzahlRoteKartenJeSpiel();
			}else if(teamB[i] instanceof Torwart){
				spielstaerkeTeamB -= ((Torwart)teamB[i]).getGegentoreJeSpiel();
			}else if(teamB[i] instanceof Mittelfeldspieler){
				spielstaerkeTeamB += ((Mittelfeldspieler)teamB[i]).getPaesseJeSpiel();
			}else if(teamB[i] instanceof Sturmspieler){
				spielstaerkeTeamB += ((Sturmspieler)teamB[i]).getToreJeSpiel();
			}
		}
		
		if(spielstaerkeTeamA > spielstaerkeTeamB){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		if(spielstaerkeTeamB > spielstaerkeTeamA){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		if(spielstaerkeTeamA == spielstaerkeTeamB){
			System.out.println(""Unentschieden!"");
		}
		
	}
}",-
Rattmann,Tobias,t.rattmann@campus.tu-berlin.de,Beendet,"29. Juni 2020  11:31","30. Juni 2020  11:16","23 Stunden 44 Minuten","17,40",extends,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus{
		
	
	public static void main(String[] args){
		
		Bus[] b = {new Bus(10,2), new Reisebus(20,2,true), new Linienbus(30,2,false,20)};
		System.out.println(b[0].istTuerOffen());
		System.out.println(b[1].istTuerOffen());
		System.out.println(b[2].istTuerOffen());
		System.out.println(b[0].istFahrbereit());
		System.out.println(b[1].istFahrbereit());
		System.out.println(b[2].istFahrbereit());
		System.out.println(""\n"" + b[1].istFahrbereit());
		b[1].tuerSchliessen(1);
		b[1].tuerSchliessen(2);
		System.out.println(b[1].istFahrbereit());
		b[1].tuerOeffnen(2);
		System.out.println(""\n"" + b[0].istFahrbereit());
		System.out.println(b[1].istFahrbereit());
		System.out.println(b[2].istFahrbereit());
		
		System.out.println(b[0].equals(b[2]));
		System.out.println(b[1].equals(b[2])+""\n"");
		
		Linienbus lb = new Linienbus(30,2,false,20);
		for(int i = 0; i<b.length; i++){
			System.out.println(b[i].equals(lb));
		}
		
	}		
		

}","public class TestMannschaft{

	public static void main(String[] args){
			
		Fussballspieler[] deutschland = new Fussballspieler[11];
		Fussballspieler[] frankreich = new Fussballspieler[11];
		//--------------------------------------------------------
		String Name = ""Spieler""+1;
		int Alter = (int)(Math.random()*10+20);
		double gegenTore = Math.random()*10;
		deutschland[0] = new Torwart(Name, Alter, gegenTore);
					
		for(int i =1; i<deutschland.length; i++){
			int x = (int)(Math.random()*3);
			String NAME = ""Spieler""+(i+1);
			int ALTER = (int)(Math.random()*10+20);
			
			switch(x){
				case 0:
					double roteKarten = Math.random()*5;
					deutschland[i] = new Abwehrspieler(NAME, ALTER, roteKarten);
					break;
				case 1:
					double paesse = Math.random()*100;
					deutschland[i] = new Mittelfeldspieler(NAME, ALTER, paesse);
					break;
				case 2:
					double tore = Math.random()*5;
					deutschland[i] = new Sturmspieler(NAME, ALTER, tore);
					break;	
			}	
		}
		
		Alter = (int)(Math.random()*10+20);
		gegenTore = Math.random()*10;
		frankreich[0] = new Torwart(Name, Alter, gegenTore);
					
		for(int i =1; i<frankreich.length; i++){
			int x = (int)(Math.random()*3);
			String NAME = ""Spieler""+(i+1);
			int ALTER = (int)(Math.random()*10+20);
			
			switch(x){
				case 0:
					double roteKarten = Math.random()*5;
					frankreich[i] = new Abwehrspieler(NAME, ALTER, roteKarten);
					break;
				case 1:
					double paesse = Math.random()*100;
					frankreich[i] = new Mittelfeldspieler(NAME, ALTER, paesse);
					break;
				case 2:
					double tore = Math.random()*5;
					frankreich[i] = new Sturmspieler(NAME, ALTER, tore);
					break;	
			}	
		}
		//----------------------------------------------------------
		
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
		System.out.println();
		ausgeben(deutschland);
		System.out.println();
		fussballspielen(deutschland, frankreich);
			
	}
	
	/*public static void TeamFuellen(Fussballspieler[] m){
		String Name = ""Spieler""+1;
		int Alter = (int)(Math.random()*10+20);
		double gegenTore = Math.random()*10;
		m[0] = new Torwart(Name, Alter, gegenTore);
					
		for(int i =1; i<m.length; i++){
			int x = (int)(Math.random()*3);
			String NAME = ""Spieler""+(i+1);
			int ALTER = (int)(Math.random()*10+20);
			
			switch(x){
				case 0:
					double roteKarten = Math.random()*5;
					m[i] = new Abwehrspieler(NAME, ALTER, roteKarten);
					break;
				case 1:
					double paesse = Math.random()*100;
					m[i] = new Mittelfeldspieler(NAME, ALTER, paesse);
					break;
				case 2:
					double tore = Math.random()*5;
					m[i] = new Sturmspieler(NAME, ALTER, tore);
					break;	
			}	
		}
	}*/
	
	public static double roteKartenZaehlen(Fussballspieler[] m){
		double count = 0;
		for(int i = 0; i < m.length; i++){
			if(m[i] instanceof Abwehrspieler){
				count += ((Abwehrspieler)m[i]).getAnzahlRoteKartenJeSpiel();
				//m[i] ist eigentlich vom Typ der Superklasse, kann aber umgewandelt ""(Abwehrspieler)"" 					werden, sodass die Methode getAnzahl... aus der Subklasse Abwehrspieler augerufen 					werden kann
			}
		}
		return count;
	}
	
	public static void ausgeben(Fussballspieler[] m){
		for(int i = 0; i<m.length; i++){
			System.out.println(m[i].toString());
			//Die toString() Methode aus der Superklasse Fussballspieler wird mit der aus der Subklasse 			überschrieben und es wird auch letztere aufgerufen.
		}
		
	}
	
	
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		int punkte1 = 0;
		int punkte2 = 0;
		double x1 = roteKartenZaehlen(mannschaft1);
		double x2 = roteKartenZaehlen(mannschaft2);
		
		double y1 = 0;
		for(int i = 0; i < mannschaft1.length; i++){
			if(mannschaft1[i] instanceof Sturmspieler){
				y1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			}
		}
		
		double y2 = 0;
		for(int i = 0; i < mannschaft2.length; i++){
			if(mannschaft2[i] instanceof Sturmspieler){
				y2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
			}
		}
		
		
		
		double z1 = 0;
		for(int i = 0; i < mannschaft1.length; i++){
			if(mannschaft1[i] instanceof Mittelfeldspieler){
				z1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
			}
		}
		
		double z2 = 0;
		for(int i = 0; i < mannschaft2.length; i++){
			if(mannschaft2[i] instanceof Mittelfeldspieler){
				z2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
			}
		}
		
		
		
		double q1 = 0;
		for(int i = 0; i < mannschaft1.length; i++){
			if(mannschaft1[i] instanceof Torwart){
				q1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
			}
		}
		
		double q2 = 0;
		for(int i = 0; i < mannschaft2.length; i++){
			if(mannschaft2[i] instanceof Torwart){
				q2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
			}
		}
		
		if(x1>x2){
			punkte2++;
		}else if(x1<x2){
			punkte1++;
		}
		
		if(y1>y2){
			punkte1++;
		}else if(y1<y2){
			punkte2++;
		}
		if(z1>z2){
			punkte1++;
		}else if(z1<z2){
			punkte2++;
		}
		
		if(q1>q2){
			punkte2++;
		}else if(q1<q2){
			punkte1++;
		}
		
		if(punkte1 > punkte2){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		else if(punkte2 > punkte1){
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		else if(punkte1 == punkte2){
			System.out.println(""Unentschieden!"");
		}
	}
	
}"
Yoo,Hwalryeok,hwalryeok.yoo@campus.tu-berlin.de,Beendet,"29. Juni 2020  11:33","5. Juli 2020  10:43","5 Tage 23 Stunden","13,06","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",extends,"Es wird die Methode der Sub-Klasse aufgerufen",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","//Hier kommt die TestBus Klasse rein

public class TestBus {

	public static void main(String[] args) {
		Bus[] bs = {new Bus(10,3),
					new Reisebus(11,2, false),
					new	Linienbus(15,2,true,10),
					new	Linienbus(13,1,false,13)
					};
		
		
		bs[0].tuerOeffnen(2);
		bs[0].tuerOeffnen(3);
		bs[1].tuerOeffnen(3);
		bs[2].tuerOeffnen(2);
		bs[2].tuerOeffnen(5);
		bs[3].tuerOeffnen(3);
		
		
		bs[0].istFahrbereit();
		bs[1].istFahrbereit();
		bs[2].istFahrbereit();  
		bs[3].istFahrbereit();
		
		
		bs[1].tuerSchliessen(1);
		bs[1].tuerSchliessen(2);
		

		
		
		Linienbus lb = (Linienbus)bs[2];
		lb.equals(bs[0]);
		lb.equals(bs[1]);
		
		
		Linienbus lb2 = new Linienbus(13,1,false,13);
		for(Bus b:bs) {
			if(lb2.equals(b)==true) {
				System.out.println(""Der Linienbus hat ""+lb2.getSitze()+"" Sitze, ""+lb2.getAnzahlTueren()+"" Tueren, ""+lb2.getStehplaetze()+"" und hat eine Infotafel ""+lb2.getInfoTafel());

			}
			
		}	
	}

}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      Fussballspieler[] deutschland = { new Abwehrspieler(""a1"",23,1),
									new Abwehrspieler(""a2"",25,0),
									new Abwehrspieler(""a3"",21,0),
									new Mittelfeldspieler(""a4"",22,30),
									new Mittelfeldspieler(""a5"",27,25),
									new Mittelfeldspieler(""a6"",29,28),
									new Mittelfeldspieler(""a7"",24,35),
									new Sturmspieler(""a8"",23,2),
									new Sturmspieler(""a9"",27,1),
									new Sturmspieler(""a10"",21,0),
									new Torwart(""a11"",26,3)
									};
		Fussballspieler[] südkorea = { 
									new Abwehrspieler(""b1"",23,1),
									new Abwehrspieler(""b2"",25,0),
									new Abwehrspieler(""b3"",21,1),
									new Mittelfeldspieler(""b4"",22,25),
									new Mittelfeldspieler(""b5"",27,15),
									new Mittelfeldspieler(""b6"",29,30),
									new Mittelfeldspieler(""b7"",24,35),
									new Sturmspieler(""b8"",23,1),
									new Sturmspieler(""ab9"",27,0),
									new Sturmspieler(""b10"",21,3),
									new Torwart(""b11"",26,5)
								
									};
		double a = Math.random();
		a*=2;
		int b = (int)a;
		
		double c = Math.random();
		c*=11;
		int d = (int)c;
		
		if(b==0)
		    deutschland[d].geburtstagFeiern();
		if(b==1)
			südkorea[d].geburtstagFeiern();

     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland,südkorea);
  }

  public static double roteKartenZaehlen(Fussballspieler[] fs){
     double summe=0;
	    for(int i =0;i<fs.length;i++) {
	    	if(fs[i] instanceof Abwehrspieler) {
	    	Abwehrspieler a =(Abwehrspieler)fs[i];	
	    	summe+= a.getAnzahlRoteKartenJeSpiel();
	    	}
	    }
	    return summe;
   /* bitte implementieren */
  }
  public static void ausgeben(Fussballspieler[] fs){
    for(int i = 0; i<fs.length;i++) {
	    	
	    	if(fs[i] instanceof Abwehrspieler) {
	    		Abwehrspieler a = (Abwehrspieler)fs[i];
	    		System.out.println(a.toString());
	    	}
	    	if(fs[i] instanceof Mittelfeldspieler) {
		    	Mittelfeldspieler b = (Mittelfeldspieler)fs[i];
		    	System.out.println(b.toString());
		    	}
	    	if(fs[i] instanceof Sturmspieler) {
	    		Sturmspieler c = (Sturmspieler)fs[i];
		    	System.out.println(c.toString());
		    	}
	    	
	    	if(fs[i] instanceof Torwart) {
	    		Torwart d = (Torwart)fs[i];
		    	System.out.println(d.toString());
		    	}
	    }
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
     double spielnoten1=0;
	    double spielnoten2=0;
	    double paessesumme1=0;
	    double paessesumme2=0;
	    double gegentor1 = 0;
	    double gegentor2 = 0;
	    for(int i = 0; i<mannschaft1.length;i++) {
	    	if(mannschaft1[i] instanceof Sturmspieler) {
	    		Sturmspieler sp1 = (Sturmspieler)mannschaft1[i];
	    		spielnoten1+=sp1.getToreJeSpiel();
	    	}
	    }
	    for(int i = 0; i<mannschaft2.length;i++) {
	    	if(mannschaft2[i] instanceof Sturmspieler) {
	    		Sturmspieler sp2 = (Sturmspieler)mannschaft2[i];
	    		spielnoten2+=sp2.getToreJeSpiel();
	    	}
	    }
	   if(roteKartenZaehlen(mannschaft1)>roteKartenZaehlen(mannschaft2)) {
		   spielnoten1-=1;
	   }
	   if(roteKartenZaehlen(mannschaft1)<roteKartenZaehlen(mannschaft2)) {
		   spielnoten2-=1;
	   }
	   
	    /* bitte implementieren */
	    
	  for(int i = 0; i<mannschaft1.length;i++) {
	    	if(mannschaft1[i] instanceof Mittelfeldspieler) {
	    		Mittelfeldspieler mp1 = (Mittelfeldspieler)mannschaft1[i];
	    		paessesumme1+=mp1.getPaesseJeSpiel();
	    	}
	    }
	  for(int i = 0; i<mannschaft2.length;i++) {
	    	if(mannschaft2[i] instanceof Mittelfeldspieler) {
	    		Mittelfeldspieler mp2 = (Mittelfeldspieler)mannschaft2[i];
	    		paessesumme2+=mp2.getPaesseJeSpiel();
	    	}
	    }
	  if(paessesumme1>paessesumme2) {
		  spielnoten1+=1;
	  }
	  if(paessesumme1<paessesumme2) {
		  spielnoten2+=1;
	  }
	  for(int i = 0; i<mannschaft1.length;i++) {
	    	if(mannschaft1[i] instanceof Torwart) {
	    	Torwart torw1 = (Torwart)mannschaft1[i];	
	    	gegentor1 = torw1.getGegentoreJeSpiel();
	    	}    
	    	}
	  for(int i = 0; i<mannschaft2.length;i++) {
	    	if(mannschaft2[i] instanceof Torwart) {
	    	Torwart torw2 = (Torwart)mannschaft2[i];	
	    	gegentor2 = torw2.getGegentoreJeSpiel();
	    	}    
	    	}
	  if(gegentor1>gegentor2) {
		  spielnoten1+=1;
	  }
	  if(gegentor1<gegentor2) {
		  spielnoten2+=1;
	  }
	 
	  if(spielnoten1>spielnoten2)
		  System.out.println(""Mannschaft 1 gewinnt!"");
	  if(spielnoten1==spielnoten2)
		  System.out.println(""Unentschieden!"");
	  if(spielnoten1<spielnoten2)
		  System.out.println(""Mannschaft 2 gewinnt!"");
	   

   /* bitte implementieren */
  }
}"
Windzio,"Lara Alisia",l.windzio@campus.tu-berlin.de,Beendet,"29. Juni 2020  12:32","30. Juni 2020  17:30","1 Tag 4 Stunden","13,00","Zeile 6,7 : super(); müsste vor x=0; stehen","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {
	public static void main (String [] args){
		
		Fussballspieler [] deutschland =new Fussballspieler [11];
		Fussballspieler [] mannschaftC =new Fussballspieler [11];

		deutschland [0]=new Torwart (""Jarstein"", 20, 3.0);
		deutschland [1]=new Abwehrspieler (""Plattenhardt"", 22, 1.0);
		deutschland [2]=new Abwehrspieler (""Boyata"", 25, 0.0);
		deutschland [3]=new Abwehrspieler (""Torunarigha"", 21, 0.0);
		deutschland [4]=new Abwehrspieler (""Zeeuik"", 20, 0.0);
		deutschland [5]=new Mittelfeldspieler (""Maier"", 23, 30.5);
		deutschland [6]=new Mittelfeldspieler (""Tousart"", 21, 100.0);
		deutschland [7]=new Mittelfeldspieler (""Cunha"", 22, 50.0);
		deutschland [8]=new Mittelfeldspieler (""Lukebakio"", 20, 70);
		deutschland [9]=new Sturmspieler (""Dilrosun"", 22, 2.0);
		deutschland [10]=new Sturmspieler (""Piatek"", 22, 1.0);
		deutschland[7].geburtstagFeiern ();

		mannschaftC [0]=new Torwart (""Alexa"", 21, 2.0);
		mannschaftC [1]=new Abwehrspieler(""Ingo"", 21, 0.5);
		mannschaftC [2]=new Abwehrspieler(""Helmut"", 23, 0.0);
		mannschaftC [3]=new Abwehrspieler(""Anna"", 25, 1.0);
		mannschaftC [4]=new Abwehrspieler(""Elsa"", 22, 0.0);
		mannschaftC [5]=new Mittelfeldspieler(""Mehmet"", 21, 60.0);
		mannschaftC [6]=new Mittelfeldspieler(""Basti"", 21, 50.0);
		mannschaftC [7]=new Mittelfeldspieler(""Hassan"", 22, 60.0);
		mannschaftC [8]=new Mittelfeldspieler(""Inga"", 21, 20.0);
		mannschaftC [9]=new Sturmspieler(""Michi"", 25, 3.0);
		mannschaftC [10]=new Sturmspieler(""Franzi"", 21, 0.0);
		mannschaftC[6].geburtstagFeiern ();

		System.out.println (""Rote Karten: ""+roteKartenZaehlen(deutschland));
		System.out.println();
		ausgeben(deutschland);
		System.out.println();
		fussballspielen (deutschland, mannschaftC);
	}
	// die Methode roteKartenZaehlen bekommt einen Array aus Fussballspielern übergeben. Die Methode getAnzahlRoteKartenJeSpiel 
	// ist in der Klasse Abwehrspieler geschrieben und so muss auch die übergebene Variable zur Art Abwehrspieler gecastet werden (Zeile 46). Der Array, welcher nun der Art Abwehrspieler ist,
	// ruft nun  die spezialisierte Methode getAnzahlRoteKartenJeSpiel in der Klasse Abwehrspieler auf.  
		public static double roteKartenZaehlen (Fussballspieler [] mannschaft){
			double roteKarte=0;
			for (Fussballspieler i:mannschaft) {
				if(i instanceof Abwehrspieler) {
					Abwehrspieler i2=(Abwehrspieler)i;
					roteKarte+=i2.getAnzahlRoteKartenJeSpiel ();

				}
			}
			return roteKarte;
		}
		//Die Methode ausgeben bekommt einen Array aus Fussballspielern übergeben. Wenn der Eintrag an der Stelle i im Array der Klasse (z.B.) Torwart ist, 
		// wird eine neue Variable i2 der Art Torwart erzeugt (mit dem vorher gecasteten i). Dann wird auf die Variable i2 die Methode toString angewendet. Da die 
		// Variable i2 der Klasse Torwart ist, wir die Methode toString (die mehrmals in verschiedenen Klassen existiert) auch in der Klasse Torwart aufgerufen. 
		// Dieses Konzept wird Polymorphie gennant, so wird die spezialisierte Klasse aufgerufen.
		public static void ausgeben (Fussballspieler [] mannschaft) {
		
			for (Fussballspieler i:mannschaft) {
				if (i instanceof Torwart) {
					Torwart i2=(Torwart)i;
					System.out.println (i2.toString());
				}
				if (i instanceof Abwehrspieler) {
					Abwehrspieler i2=(Abwehrspieler)i;
					System.out.println (i2.toString());
				}
				if (i instanceof Mittelfeldspieler) {
					Mittelfeldspieler i2=(Mittelfeldspieler)i;
					System.out.println (i2.toString());
				}
				if (i instanceof Sturmspieler) {
					Sturmspieler i2=(Sturmspieler)i;
					System.out.println (i2.toString());
				}
			}
		}
		public static void fussballspielen (Fussballspieler [] mannschaft1, Fussballspieler [] mannschaft2) {
			double spielstärkeA=0;
			double spielstärkeB=0;
			for (Fussballspieler i:mannschaft1) {
				if (i instanceof Torwart) {
					Torwart i2=(Torwart)i;
					spielstärkeA+=i2.getGegentoreJeSpiel()*(-15);
				}
				if (i instanceof Abwehrspieler) {
					Abwehrspieler i2=(Abwehrspieler)i;
					spielstärkeA+=i2.getAnzahlRoteKartenJeSpiel()*(-10);
				}
				if (i instanceof Mittelfeldspieler) {
					Mittelfeldspieler i2=(Mittelfeldspieler)i;
					spielstärkeA+=i2.getPaesseJeSpiel()*2;
				}
				if (i instanceof Sturmspieler) {
					Sturmspieler i2=(Sturmspieler)i;
					spielstärkeA+=i2.getToreJeSpiel()*15;
				}
			}

			for (Fussballspieler i:mannschaft2) {
				if (i instanceof Torwart) {
					Torwart i2=(Torwart)i;
					spielstärkeB+=i2.getGegentoreJeSpiel()*(-15);
				}
				if (i instanceof Abwehrspieler) {
					Abwehrspieler i2=(Abwehrspieler)i;
					spielstärkeB+=i2.getAnzahlRoteKartenJeSpiel()*(-10);
				}
				if (i instanceof Mittelfeldspieler) {
					Mittelfeldspieler i2=(Mittelfeldspieler)i;
					spielstärkeB+=i2.getPaesseJeSpiel()*2;
				}
				if (i instanceof Sturmspieler) {
					Sturmspieler i2=(Sturmspieler)i;
					spielstärkeB+=i2.getToreJeSpiel()*15;
			}
			}
			if (spielstärkeB>spielstärkeA) {
				System.out.println (""Mannschaft 2 gewinnt!"");
			}
			else if (spielstärkeB==spielstärkeA) {
				System.out.println (""Unentschieden!"");
			}
			else {
				System.out.println (""Mannschaft 1 gewinnt!"");
			}
		}
	}",-
Rau,Alexander,4d03a61d39c8c42d209bf5c7892e87e9,Beendet,"29. Juni 2020  18:53","5. Juli 2020  21:02","6 Tage 2 Stunden","18,60","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen",super,Object,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String[] args) {
		Bus[] busse = new Bus[3];
		busse[0] = new Linienbus(3, 2, true, 9);
		busse[1] = new Reisebus(5, 8, false);
		busse[2] = new Bus(12, 3);

		for(int i = 1; i<=busse[0].getAnzahlTueren();i++) {
			busse[0].tuerOeffnen(i);
		}
		for(int i = 1; i<=busse[1].getAnzahlTueren();i++) {
			busse[1].tuerOeffnen(i);
		}


		for (Bus b : busse) {
			System.out.println(b.istFahrbereit());
		}
			
		for(Bus b : busse) {
				for(int i = 1; i<=b.getAnzahlTueren();i++) {
				b.tuerSchliessen(i);
				}
		}
			
		
		System.out.println(busse[0].equals(busse[2]));
		System.out.println(busse[0].equals(busse[1]));

		Linienbus lb = new Linienbus(4, 5, false, 9);

		for (Bus b : busse) {
			System.out.println(lb.equals(b));
		}

	}
}","//Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
//Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft {
public static void main(String[] args){
   
Fussballspieler[] deutschland = new Fussballspieler[11];
Fussballspieler[] team2 = new Fussballspieler[11];
  

deutschland[0] = new Torwart(""Neuer"",12,8);
deutschland[1] = new Abwehrspieler(""Ginter"",14,9);
deutschland[2] = new Abwehrspieler(""Hektor"",18,3);
deutschland[3] = new Abwehrspieler(""Koch"",13,2);
deutschland[4] = new Abwehrspieler(""Tah"",12,9);
deutschland[5] = new Mittelfeldspieler(""Gnabry"",18,1);
deutschland[6] = new Mittelfeldspieler(""Goretska"",10,2);
deutschland[7] = new Mittelfeldspieler(""Kroos"",11,1);
deutschland[8] = new Mittelfeldspieler(""Rudy"",12,1);
deutschland[9] = new Sturmspieler(""Werner"",18,12);
deutschland[10] = new Sturmspieler(""Kimmich"",15,100);

team2[0] = new Torwart(""Freddy"",12,8);
team2[1] = new Abwehrspieler(""Maik"",14,9);
team2[2] = new Abwehrspieler(""Luis"",18,3);
team2[3] = new Abwehrspieler(""Manni"",13,2);
team2[4] = new Abwehrspieler(""Gerd"",12,9);
team2[5] = new Mittelfeldspieler(""Alex"",18,1);
team2[6] = new Mittelfeldspieler(""Jens"",10,2);
team2[7] = new Mittelfeldspieler(""Andrei"",11,1);
team2[8] = new Mittelfeldspieler(""Rudi"",12,1);
team2[9] = new Sturmspieler(""Kathrin"",18,0);
team2[10] = new Sturmspieler(""Öslem"",15,112);

deutschland[4].geburtstagFeiern();
team2[5].geburtstagFeiern();




 System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
 System.out.println();
 ausgeben(deutschland);
 System.out.println();
 fussballspielen(deutschland, team2);
}

//Polymorphie Prüfen auf eine Unterklasse, um gezielt deren Attribute abzufragen
	public static double roteKartenZaehlen(Fussballspieler[] spieler) {
		double summe = 0;
		for (Fussballspieler s : spieler) {
			if (s instanceof Abwehrspieler) {
				summe += ((Abwehrspieler) s).getAnzahlRoteKartenJeSpiel();

			}
		}
		return summe;
	}
	
//Oberklasse nutzen ohne sich um die Details der Unterklasse zu kümmern
	public static void ausgeben(Fussballspieler[] spieler) {
		for (Fussballspieler s : spieler) {
			System.out.println(s.toString());
		}

	}

	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
		double summetor1 = 0;
		for (Fussballspieler d : mannschaft1) {
			if (d instanceof Sturmspieler) {
				summetor1 += ((Sturmspieler) d).getToreJeSpiel();
			}
		}
		double summetor2 = 0;
		for (Fussballspieler d : mannschaft2) {
			if (d instanceof Sturmspieler) {
				summetor2 += ((Sturmspieler) d).getToreJeSpiel();
			}
		}
		if (summetor1 < summetor2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		} else if (summetor1 == summetor2) {
			System.out.println(""Unentschieden!"");
		} else {
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
	}
	
}"
Schmidt,"Joshua Daniel",joshua.d.schmidt@campus.tu-berlin.de,Beendet,"29. Juni 2020  19:03","5. Juli 2020  17:20","5 Tage 22 Stunden","2,32","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Zeile 6,7 : super(); müsste vor x=0; stehen",instanceof,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Java,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {13. <sub>spannweite:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {12. <sub>schnabelfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {15. <sub>kannSprechen:} Dropzone 11 -> {16. <sub>boolean} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {2. <sub>bezeichnung:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {7. <sub>fellfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {10. <sub>int} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Volkmann,Maximilian,m.volkmann@campus.tu-berlin.de,Beendet,"29. Juni 2020  20:50","6. Juli 2020  00:05","6 Tage 3 Stunden","0,00",-,-,-,-,-,-,-,-,-
Schubert,Tom,tom.schubert@campus.tu-berlin.de,Beendet,"29. Juni 2020  22:47","6. Juli 2020  00:05","6 Tage 1 Stunde","4,41","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,super,-,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {7. <sub>fellfarbe:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {15. <sub>kannSprechen:} Dropzone 8 -> {16. <sub>boolean} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {2. <sub>bezeichnung:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {12. <sub>schnabelfarbe:} Dropzone 19 -> {3. <sub>String} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Friese,Nico,nico.friese@campus.tu-berlin.de,Beendet,"30. Juni 2020  19:14","5. Juli 2020  17:16","4 Tage 22 Stunden","17,42","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Es wird die Methode der Sub-Klasse aufgerufen","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {

	public static void main(String[] args) {
		Fussballspieler[] deutschland = new Fussballspieler[11];
		Fussballspieler[] argentinien = new Fussballspieler[11];
	
		deutschland[0] = new Torwart(""Thomas"", 42, 12);
		deutschland[1] = new Abwehrspieler(""Andreas"", 15, 3);
		deutschland[2] = new Abwehrspieler(""Matthias"", 54, 1);
		deutschland[3] = new Abwehrspieler(""Hendrike"", 78, 1);
		deutschland[4] = new Abwehrspieler(""Manuel"", 32, 12);
		deutschland[5] = new Mittelfeldspieler(""Nico"", 21, 12);
		deutschland[6] = new Mittelfeldspieler(""Selina"", 31, 24);
		deutschland[7] = new Mittelfeldspieler(""Sina"", 73, 13);
		deutschland[8] = new Mittelfeldspieler(""Johannes"", 67, 18);
		deutschland[9] = new Sturmspieler(""Lea"", 26, 1);
		deutschland[10] = new Sturmspieler(""Trung"", 25, 4);
	
		argentinien[0] = new Torwart(""Jannes"", 42, 8);
		argentinien[1] = new Abwehrspieler(""Hannes"", 15,  6);
		argentinien[2] = new Abwehrspieler(""Anni"",54,  3);
		argentinien[3] = new Abwehrspieler(""Inga"", 78, 2);
		argentinien[4] = new Abwehrspieler(""Sabine"", 32, 1);
		argentinien[5] = new Mittelfeldspieler(""Peter"", 21, 5);
		argentinien[6] = new Mittelfeldspieler(""Ingrid"", 31, 2);
		argentinien[7] = new Mittelfeldspieler(""Peter"", 73, 18);
		argentinien[8] = new Mittelfeldspieler(""Andi"", 67, 1);
		argentinien[9] = new Sturmspieler(""Bärbel"", 26, 3);
		argentinien[10] = new Sturmspieler(""Kilian"", 25, 0);
		
		deutschland[7].geburtstagFeiern();
		
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
		System.out.println();
		ausgeben(deutschland);
		System.out.println();
		fussballspielen(deutschland, argentinien);
	
	}
	
	public static double roteKartenZaehlen(Fussballspieler[] f) {
		double rkges = 0;
		for(int i = 0; i < f.length; i++) {
			if(f[i] instanceof Abwehrspieler) {
				Abwehrspieler AS = (Abwehrspieler) f[i];
				rkges += AS.getAnzahlRoteKartenJeSpiel();
			}
		}
		return rkges;
	}
	
	public static void ausgeben(Fussballspieler[] f) {
		for(int i = 0; i < f.length; i++) {
			System.out.println(f[i].toString());
		}
	}

	
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
		double Spielstärke = 0;
		for(int i = 0; i < mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Abwehrspieler) {
				Abwehrspieler AS = (Abwehrspieler)mannschaft1[i];
				Spielstärke -= AS.getAnzahlRoteKartenJeSpiel();
			}
			else if(mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler AS = (Sturmspieler)mannschaft1[i];
				Spielstärke += AS.getToreJeSpiel();
			}
			else if(mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler AS = (Mittelfeldspieler)mannschaft1[i];
				Spielstärke += AS.getPaesseJeSpiel();			
			}
			else if(mannschaft1[i] instanceof Torwart) {
				Torwart AS = (Torwart)mannschaft1[i];
				Spielstärke -= AS.getGegentoreJeSpiel();
			}
		}
		
		for(int i = 0; i < mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Abwehrspieler) {
				Abwehrspieler AS = (Abwehrspieler)mannschaft2[i];
				Spielstärke += AS.getAnzahlRoteKartenJeSpiel();
			}
			else if(mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler AS = (Sturmspieler)mannschaft2[i];
				Spielstärke -= AS.getToreJeSpiel();
			}
			else if(mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler AS = (Mittelfeldspieler)mannschaft2[i];
				Spielstärke -= AS.getPaesseJeSpiel();			
			}
			else if(mannschaft1[i] instanceof Torwart) {
				Torwart AS = (Torwart)mannschaft2[i];
				Spielstärke += AS.getGegentoreJeSpiel();
			}
		}
		if(Spielstärke == 0){
			System.out.println(""Unentschieden!"");
		}
		else if(Spielstärke > 0){
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		else {
			System.out.println(""Mannschaft 2 gewinnt!"");	
		}
		
	}
	
	//Die Methoden ausgeben und roteKartenZaehlen rufen die spezialisierten Methoden auf, weil durch die Implementation einer weiteren Methode in der Unterklasse mit dem gleichen Namen, wie die methoden der Oberklasse, die Methoden überschrieben werden.//
}","//Hier kommt die TestBus Klasse rein
public class TestBus {
	
	public static void main(String[] args) {
		Bus[] busse = new Bus[3];
		
		busse[0] = new Bus(10,5);
		busse[1] = new Reisebus(5,3,true);
		busse[2] = new Linienbus(23,2,true,10);
		
		busse[1].tuerOeffnen(2);
		busse[1].istFahrbereit();
		
		busse[2].tuerOeffnen(0);
		busse[2].tuerOeffnen(1);
		busse[2].istFahrbereit();
		
		busse[1].tuerSchliessen(3);
		
		busse[2].equals(busse[0]);
		busse[2].equals(busse[1]);
		
		Linienbus l = new Linienbus(23,2,true,10);
		
		l.equals(busse[0]);
		l.equals(busse[1]);
		l.equals(busse[2]);
		
	}
}"
Brändl,"Johannes Andreas",johannes.braendl@campus.tu-berlin.de,Beendet,"30. Juni 2020  21:44","4. Juli 2020  22:15","4 Tage","4,36","Zeile 7 : super(); müsste this(); heißen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier",Java,"Es wird die Methode der Super-Klasse aufgerufen",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
"Tonleu Ndempowo",Syntyche,tonleundempowo@campus.tu-berlin.de,Beendet,"30. Juni 2020  23:58","5. Juli 2020  22:21","4 Tage 22 Stunden","8,33","Es wird die Methode der Sub-Klasse aufgerufen",Object,"die Klasse Hund erbt von der Klasse Tier",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {

	public static void main(String[] args) {
		
		
		Bus b = new Bus(10, 3);
		Reisebus r = new Reisebus(20, 2, true);
		Linienbus l = new Linienbus(15, 4, true, 20);
		
		
		r.tuerOeffnen(1);
		b.tuerOeffnen(3);
		l.tuerOeffnen(1);
		l.tuerOeffnen(2);
	
		
		r.istFahrbereit();
		b.istFahrbereit();
		l.istFahrbereit();
		
		
		
		

	}

}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
    Fussballspieler[] deutschland = new Fussballspieler[11];
	Fussballspieler[] f2 = new Fussballspieler[11];
		
		deutschland[0] = new Torwart(""gaaa1"", 25, 2);
		deutschland[1] = new Abwehrspieler(""bbbb1"", 15, 3);
		deutschland[2] = new Abwehrspieler(""cccc1"", 15, 2);
		deutschland[3] = new Abwehrspieler(""eeee1"", 15, 1);
		deutschland[4] = new Abwehrspieler(""wwww1"", 15, 0);
		deutschland[5] = new Mittelfeldspieler(""oooo1"", 20, 3);
		deutschland[6] = new Mittelfeldspieler(""uuuu1"", 19, 3);
		deutschland[7] = new Mittelfeldspieler(""sdsd1"", 20, 3);
		deutschland[8] = new Mittelfeldspieler(""erer1"", 20, 1);
		deutschland[9] = new Sturmspieler(""fgfg1"", 20, 3);
		deutschland[10] = new Sturmspieler(""oioi1"", 24, 4);
		
		
		f2[0] = new Torwart(""gaaa2"", 30, 5);
		f2[1] = new Abwehrspieler(""wwbb2"", 15, 3);
		f2[2] = new Abwehrspieler(""vvbb2"", 22, 5);
		f2[3] = new Abwehrspieler(""bmmb2"", 24, 3);
		f2[4] = new Abwehrspieler(""biub2"", 25, 1);
		f2[5] = new Abwehrspieler(""btyb2"", 15, 3);
		f2[6] = new Abwehrspieler(""ezbb2"", 18, 2);
		f2[7] = new Mittelfeldspieler(""sdsd2"", 20, 3);
		f2[8] = new Mittelfeldspieler(""strd2"", 20, 3);
		f2[9] = new Mittelfeldspieler(""aasd2"", 20, 3);
		f2[10] = new Sturmspieler(""yuyu2"", 24, 4);
		
		
		deutschland[3].geburtstagFeiern();
		deutschland[5].geburtstagFeiern();
		f2[9].geburtstagFeiern();
		f2[10].geburtstagFeiern();
		
		

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, f2);
  }

  public static double roteKartenZaehlen(Fussballspieler[] f){
   double cpt = 0;
		
		for(int i=0; i<f.length; i++){
		if(f[i] instanceof Abwehrspieler){
				cpt = cpt + ((Abwehrspieler)f[i]).getAnzahlRoteKartenJeSpiel();				
			}	
		}		
		return cpt;
  }
  
  
  public static void ausgeben(Fussballspieler[] f){
      
      for(int i=0; i<f.length; i++)
		{
			f[i].toString();
			if(f[i] instanceof Torwart){
				((Torwart)f[i]).toString();			
			}
			if(f[i] instanceof Abwehrspieler){
				((Abwehrspieler)f[i]).toString();			
			}
			if(f[i] instanceof Mittelfeldspieler){
				((Mittelfeldspieler)f[i]).toString();			
			}
			if(f[i] instanceof Sturmspieler){
				((Sturmspieler)f[i]).toString();			
			}					
		}		
  }
  
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
      
      double cpt1 = 0, cpt2 = 0;
		
		
		for(int i=0; i<mannschaft1.length; i++){
		if(mannschaft1[i] instanceof Sturmspieler){
				cpt1 = cpt1 + ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			}
		}
		
		for(int i=0; i<mannschaft2.length; i++){
			if(mannschaft2[i] instanceof Sturmspieler){
				cpt2 = cpt2+ ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();				
			}			
		}
		
		if(cpt1>cpt2)		
		System.out.println(""Mannschaft 1 gewinnt!"");
		
		if(cpt1==cpt2)
		System.out.println(""Unentschieden!"");
		if(cpt1<cpt2)
		System.out.println(""Mannschaft 2 gewinnt!"");
  }
  
}"
Choukri,Shana,shana.choukri@campus.tu-berlin.de,Beendet,"1. Juli 2020  12:30","2. Juli 2020  16:50","1 Tag 4 Stunden","20,00","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
    Fussballspieler[] team = new Fussballspieler[11];
    team[0] = new Torwart(""schokolade"",80,7.0);
    team[1] = new Mittelfeldspieler(""opi"",89,6.6);
    team[2] = new Mittelfeldspieler(""schweinchen"",2,1.5);
    team[3] = new Sturmspieler(""bebiziege"",1,1.3);
    team[4] = new Sturmspieler(""ameise"",1,0.0);
    team[5] = new Abwehrspieler(""eichhoernchen"",5,20.0);
    team[6] = new Abwehrspieler(""hirsebrei"",15,3.6);
    team[7] = new Mittelfeldspieler(""statist1"",77,6.0);
    team[8] = new Mittelfeldspieler(""statist2"",9,67.6);
    team[9] = new Mittelfeldspieler(""pi"",3,0.141592);
    team[10] = new Mittelfeldspieler(""britney"",38,1.9);

    Fussballspieler[] antiteam = new Fussballspieler[11];
    antiteam[0] = new Torwart(""mitbewohner"",26,8.0);
    antiteam[1] = new Mittelfeldspieler(""influencer"",28,0.1);
    antiteam[2] = new Mittelfeldspieler(""muecke"",1,1.0);
    antiteam[3] = new Sturmspieler(""rechnungen"",100,104.3);
    antiteam[4] = new Sturmspieler(""hausaufgaben"",100,100.0);
    antiteam[5] = new Abwehrspieler(""nervigerMitmensch"",44,10.1);
    antiteam[6] = new Abwehrspieler(""nervigerStudent"",21,30.6);
    antiteam[7] = new Mittelfeldspieler(""dummerstatist1"",19,8.0);
    antiteam[8] = new Mittelfeldspieler(""dummerstatist2"",25,67.5);
    antiteam[9] = new Mittelfeldspieler(""gentrifizierung"",10,90.6);
    antiteam[10] = new Mittelfeldspieler(""trump"",66,-0.9);

    team[1].geburtstagFeiern(); 
     
    //Werte einfügen

        System.out.println(""Rote Karten: "" + roteKartenZaehlen(team));
        System.out.println(""Rote Karten: "" + roteKartenZaehlen(antiteam));
        System.out.println();
        ausgeben(team);
        ausgeben(antiteam);
        System.out.println(antiteam[4]);
        fussballspielen(antiteam, team);
  }

//hier wird auf den Untertyp Abwehrspieler gecastet, da die superklasse die verwendete methode nicht enthaelt
    public static double roteKartenZaehlen(Fussballspieler[] list){
          double rot = 0;
          for(int i = 0; i<list.length; i++){
              if(list[i] instanceof Abwehrspieler){
                  rot += ((Abwehrspieler)list[i]).getAnzahlRoteKartenJeSpiel();
              }
          }
          return rot;
      }
//es wird die korrekte toString methode der subklasse aufgerufen, da diese die toString Methode der superklasse ueberschreibt
      public static void ausgeben(Fussballspieler[] list){
          for(int i = 0; i<list.length; i++){
          System.out.println(list[i].toString());
          }
      }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
        double spielstärke = 0; //wenn positiv gewinnt1, negativ zwei, unentschieden bei 0
          spielstärke -= roteKartenZaehlen(mannschaft1);
          spielstärke += roteKartenZaehlen(mannschaft2);
          for(int i = 0; i<mannschaft1.length; i++){
              if(mannschaft1[i] instanceof Torwart){
                  spielstärke -= ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
              }

              if(mannschaft2[i] instanceof Torwart){
                  spielstärke += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
              }
          }

          if (spielstärke<0){
              System.out.println(""Mannschaft 2 gewinnt!"");
          }

          else if (spielstärke==0){
              System.out.println(""Unentschieden!"");
          }

          else {
              System.out.println(""Mannschaft 1 gewinnt!"");
          }
  }
}","//Hier kommt die TestBus Klasse rein

public class TestBus {

    public static void main(String[] args){

    Bus[] bussis = new Bus[4];
    bussis[0] = new Bus(13,3);
    bussis[1] = new Reisebus(40,10,true);
    bussis[2] = new Linienbus(13,3,true,10);
    bussis[3] = new Reisebus(40,10,false);

    Bus b1 = bussis[0];
    Bus b2 = bussis[1];
    Bus b3 = bussis[2];
    Bus b4 = bussis[3];

    System.out.println(b1.istTuerOffen());
    b1.tuerOeffnen(3);
    System.out.println(b1.istFahrbereit()+""\n"");

    b2.tuerOeffnen(4);
    System.out.println(b2.istTuerOffen());
    b2.tuerOeffnen(1);
    System.out.println(b2.istFahrbereit()+""\n"");

    for(int i = 1; i<41; i++){
        b2.tuerSchliessen(i);
    }

    System.out.println(b2.istFahrbereit()+""\n"");

    System.out.println(b3.istTuerOffen());
    System.out.println(b3.istFahrbereit());
    System.out.println(b3.istTuerOffen()+""\n"");

    for(int i = 1; i<41; i++){
        b4.tuerSchliessen(i);
    }

    System.out.println(b4.istFahrbereit()+""\n"");

    System.out.println(b3.equals(b1));
    System.out.println(b3.equals(b2)+""\n"");

    Bus b5 = new Reisebus(40,10,false);

    for(int i=0;i<4;i++){
        System.out.println(b5.equals(bussis[i]));
    }






    }

}"
Kottwitz,"Michael Alexander",m.kottwitz@campus.tu-berlin.de,Beendet,"1. Juli 2020  13:27","6. Juli 2020  00:05","4 Tage 10 Stunden","14,07",super,Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {13. <sub>spannweite:} Dropzone 8 -> {4. <sub>double} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
    public static void main(String[] args){

        // Arrays definieren
        Fussballspieler[] teamA = new Fussballspieler[11];
        Fussballspieler[] teamB = new Fussballspieler[11];

        //Werte einfügen

        // team A
        teamA[0] = new Torwart(""Manuel Neuer"", 20, 2.0);

        teamA[1] = new Abwehrspieler(""Robin Koch"", 26, 3.0);
        teamA[2] = new Abwehrspieler(""Nico Schulz"", 22, 0.0);
        teamA[3] = new Abwehrspieler(""Niklas Stark"", 22, 1.0);
        teamA[4] = new Abwehrspieler(""Jonathan Tah"", 23, 2.0);

        teamA[5] = new Mittelfeldspieler(""Serge Gnabry"", 21, 27.0);
        teamA[6] = new Mittelfeldspieler(""Julian Brandt"", 28, 12.0);
        teamA[7] = new Mittelfeldspieler(""Sebastian Rudy"", 22, 9.0);
        teamA[8] = new Mittelfeldspieler(""Timo Werner"", 27, 23.0);

        teamA[9] = new Sturmspieler(""Suat Serdar"", 22, 1.7);
        teamA[10] = new Sturmspieler(""Toni Kroos"", 21, 3.3);

        // team B
        teamB[0] = new Torwart(""Nick Pope"", 24, 3.2);

        teamB[1] = new Abwehrspieler(""Ben Chilwell"", 20, 1.3);
        teamB[2] = new Abwehrspieler(""Joe Gomez"", 21, 0.5);
        teamB[3] = new Abwehrspieler(""Harry Maguire"", 26, 4.2);
        teamB[4] = new Abwehrspieler(""John Stones"", 21, 4.0);

        teamB[5] = new Mittelfeldspieler(""Mason Mount"", 23, 12.4);
        teamB[6] = new Mittelfeldspieler(""James Maddison"", 21, 17.1);
        teamB[7] = new Mittelfeldspieler(""Declan Rice"", 22, 9.3);
        teamB[8] = new Mittelfeldspieler(""Harry Winks"", 28, 2.2);

        teamB[9] = new Sturmspieler(""Jadon Sancho"", 21, 4.7);
        teamB[10] = new Sturmspieler(""Raheem Sterling"", 28, 1.4);

        // geburtstag
        teamA[7].geburtstagFeiern();


        System.out.println(""Rote Karten: "" + roteKartenZaehlen(teamA));
        System.out.println();
        ausgeben(teamA);
        System.out.println();
        fussballspielen(teamA, teamB);
    }

    public static double roteKartenZaehlen(Fussballspieler[] fussballspielers){
        double roteKarten = 0;

        for(Fussballspieler spieler : fussballspielers) {
            // spieler muss zu Abwehrspieler gecastet werden, da getAnzahlRoteKartenJeSpiel nur in Abwehrspieler existiert
            // und von der super-Klasse Fussballspieler nicht aufrufbar ist
            if(spieler instanceof Abwehrspieler) {
                roteKarten += ((Abwehrspieler) spieler).getAnzahlRoteKartenJeSpiel();
            }
        }

        return roteKarten;
    }

    public static void ausgeben(Fussballspieler[] fussballspielers){
        for(Fussballspieler spieler : fussballspielers) {
            // spieler muss nicht gecastet werden, da die toString() Methode auch in der super-Klasse existiert und von
            // den subklassen overrided wird
            System.out.println(spieler.toString());
        }
    }

    private static double calculateSpielstearke(Fussballspieler spieler) {
        if(spieler instanceof Torwart) {
            return ((Torwart) spieler).getGegentoreJeSpiel() * -2.0 + (spieler.getAlter() / 20.0);
        } else if(spieler instanceof Abwehrspieler) {
            return ((Abwehrspieler) spieler).getAnzahlRoteKartenJeSpiel() * -1.0 + (spieler.getAlter() / 20.0);
        } else if(spieler instanceof Mittelfeldspieler) {
            return ((Mittelfeldspieler) spieler).getPaesseJeSpiel() * 1.3 + (spieler.getAlter() / 20.0);
        } else if(spieler instanceof Sturmspieler) {
            return ((Sturmspieler) spieler).getToreJeSpiel() * 3.0 + (spieler.getAlter() / 20.0);
        }

        return 0.0;
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
        double spielstaerkeMannschaft1 = 0.0;
        double spielstaerkeMannschaft2 = 0.0;

        for(Fussballspieler spieler : mannschaft1) {
            spielstaerkeMannschaft1 += calculateSpielstearke(spieler);
        }

        for(Fussballspieler spieler : mannschaft2) {
            spielstaerkeMannschaft2 += calculateSpielstearke(spieler);
        }

        if(spielstaerkeMannschaft1 > spielstaerkeMannschaft2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
            return;
        } else if(spielstaerkeMannschaft1 < spielstaerkeMannschaft2) {
            System.out.println(""Mannschaft 2 gewinnt!"");
            return;
        }

        System.out.println(""Unentschieden!"");
    }
}","public class TestBus {

    public static void main(String[] args) {
        Bus[] busse = new Bus[]{
          new Bus(10, 1), new Linienbus(80, 3, true, 20), new Reisebus(50, 2, true)
        };

        busse[0].tuerOeffnen(1);
        System.out.println(""Bus fahrbereit? "" + busse[0].istFahrbereit());

        busse[1].tuerOeffnen(1);
        busse[1].tuerOeffnen(3);
        System.out.println(""Linienbus fahrbereit? "" + busse[1].istFahrbereit());

        busse[2].tuerOeffnen(1);
        busse[2].tuerOeffnen(2);
        System.out.println(""ReiseBus fahrbereit? "" + busse[2].istFahrbereit());

        // fahrbereit machen
        busse[2].tuerSchliessen(1);
        busse[2].tuerSchliessen(2);

        if(busse[1].equals(busse[0])) {
            System.out.println(""Linienbus equals Bus"");
        } else {
            System.out.println(""Linienbus not equals Bus"");
        }

        if(busse[1].equals(busse[2])) {
            System.out.println(""Linienbus equals Reisebus"");
        } else {
            System.out.println(""Linienbus not equals Reisebus"");
        }

        Linienbus linienbus = new Linienbus(40, 2, true, 10);
        Reisebus reisebus = new Reisebus(20, 2, true);

        for(int i = 0; i < busse.length; i++) {
            if(linienbus.equals(busse[i])) {
                System.out.println(""i equals Linienbus!"");
            }
            if(reisebus.equals(busse[i])) {
                System.out.println(""i equals Reisebus!"");
            }
        }

    }
}"
Gabis,Albert,gabis@campus.tu-berlin.de,Beendet,"1. Juli 2020  14:43","5. Juli 2020  22:03","4 Tage 7 Stunden","17,95","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Zeile 5 : Methode B() hat keinen Rückgabewert",extends,"Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {15. <sub>kannSprechen:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {12. <sub>schnabelfarbe:} Dropzone 16 -> {3. <sub>String} Dropzone 17 -> {16. <sub>boolean} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{

	
  public static void main(String[] args){
    Fussballspieler [] mannschaft1 = {new Abwehrspieler(""Jonathan Hoestar"", 187, 28) , new Abwehrspieler(""Joseph Joestar"", 76,45), new Abwehrspieler(""Jotaro Joestar"", 26,100)
										, new Abwehrspieler(""Josuke Joestar"", 17,0), new Mittelfeldspieler(""Koichi"", 16,1), new Mittelfeldspieler(""Muhamad Avdol"", 32,25)
										, new Mittelfeldspieler(""Polnaref"", 33,13), new Sturmspieler(""Baron Zeppelin"", 666,2), new Sturmspieler(""Ceasar Zeppelin"", 23,66)
										, new Mittelfeldspieler(""Lisa Lisa"", 55,100), new Torwart(""Robert E. Speedwagon"", 84,0)};
    
	Fussballspieler [] mannschaft2 = {new Abwehrspieler(""Steely Dan"", 45, 98), new Abwehrspieler(""Blueford"",152, 88), new Abwehrspieler(""Worse Company"", 123,256)
										, new Mittelfeldspieler(""Yoshikage Kira"", 27,666), new Mittelfeldspieler(""Kars"", 900,69), new Mittelfeldspieler(""Whamu"", 900, 69)
										, new Sturmspieler(""Dio Brando"", 600,1000), new Sturmspieler (""Giorno Govanna"", 15,2000), new Sturmspieler(""Diavolo"", 43,999)
										, new Sturmspieler(""DIO!"", 99,999), new Torwart(""Abbacio Narancia"",21,7)};

   // Einer der Jungs muss noch Geburtstag feiern  
     
		mannschaft1[8].geburtstagFeiern();
	 
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
    System.out.println();
    ausgeben(mannschaft1);
	System.out.println();
    fussballspielen(mannschaft1, mannschaft2);
	
  }

/*Schreiben Sie (in der Klasse TestMannschaft ) eine Methode roteKartenZaehlen , 
welche ein Array aus Fussballspielern übergeben bekommt und die summierte anzahlRoteKartenJeSpiel der enthaltenen Abwehrspieler zurückgibt.
*/

	public static double roteKartenZaehlen(Fussballspieler [] fussballspieler){

		double sumRoteKarten = 0;

		for (Fussballspieler spieler : fussballspieler){
			
			if(spieler instanceof Abwehrspieler)
			{
				sumRoteKarten += ((Abwehrspieler) spieler).getAnzahlRoteKartenJeSpiel();
			}

		}
		
		return sumRoteKarten;
	}
	
	/*
	
	    Schreiben Sie eine Methode ausgeben , welche ebenfalls ein Array aus Fussballspielern übergeben bekommt 
		und die toString -Methoden verwendet, um die Informationen aller Spieler auf der Konsole auszugeben.
		
	*/
	
	public static void ausgeben(Fussballspieler [] fussballspieler) {

		for (Fussballspieler spieler : fussballspieler) {
			System.out.println(spieler.toString());
		}			

	}
	
	/*
		Schreiben Sie außerdem eine Methode fussballspielen , welche zwei Arrays aus Fussballspielern 
		übergeben bekommt und auf der Konsole ausgibt, welche Mannschaft gewinnt. 
		Die Ausgabe soll wie folgt aussehen (kommt natürlich auf das Ergebnis an):

		Mannschaft 1 gewinnt! oder Unentschieden! oder Mannschaft 2 gewinnt!

		Es soll die Mannschaft gewinnen, welche die höhere Spielstärke hat. Denken Sie sich hierzu 
		eine eigene Formel zur Berechnung der Spielstärke aus, welche alle Attribute der Spieler verwendet.
		
		
		*/
		
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){

		double punkteM1 = 0;
		double punkteM2 = 0;
		
		for (int i = 0; i < mannschaft1.length; i++) {
			
			if (mannschaft1[i] instanceof Abwehrspieler) {
				punkteM1 -= ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			}
			
			if (mannschaft1[i] instanceof Mittelfeldspieler) {
				punkteM1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
			}
			
			if (mannschaft1[i] instanceof Sturmspieler) {
				punkteM1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			}
			
			if (mannschaft1[i] instanceof Torwart) {
				punkteM1 -= ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
			}
		}
		
		for (Fussballspieler spieler : mannschaft2) {
			
			if (spieler instanceof Abwehrspieler) {
				punkteM2 -= ((Abwehrspieler)spieler).getAnzahlRoteKartenJeSpiel();
			}
			
			if (spieler instanceof Mittelfeldspieler) {
				punkteM2 += ((Mittelfeldspieler)spieler).getPaesseJeSpiel();
			}
			
			if (spieler instanceof Sturmspieler) {
				punkteM2 += ((Sturmspieler)spieler).getToreJeSpiel();
			}
			
			if (spieler instanceof Torwart) {
				punkteM2 -= ((Torwart)spieler).getGegentoreJeSpiel();
			}
		}
		
		if (punkteM1 > punkteM2) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		} 
		else if (punkteM1 < punkteM2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		else
		{
			System.out.println(""Unentschieden!"");
		}
	}
		
		
		/*
		Überlegen Sie sich für die beiden Methoden roteKartenZaehlen und ausgeben , 
		inwiefern hier Polymorphie eine Rolle spielt. 

		Schreiben Sie jeweils einen kurzen Kommentar, warum ihre Methode die richtigen (spezialisierten) 
		Methoden der jeweiligen Klasse aufruft.

		Testen sie die drei Methoden roteKartenZaehlen , fussballspielen und ausgeben in der  main .
	*/
    
  }","//Hier kommt die TestBus Klasse rein

public class TestBus {

	public static void main(String[] args){
		Bus [] busse = {
			new Bus(6, 2),
			new Reisebus(6, 2, true),
			new Reisebus(4, 6, false),
			new Reisebus(7, 0, true),
			new Reisebus(5, 3, false),
			new Linienbus(6, 2, true, 15),
			new Linienbus(4, 6, false, 20),
			new Linienbus(15, 0, true, 15),
			new Linienbus(24, 3, false, 0)
		};
		
		busse[4].tuerOeffnen(3);
		busse[6].tuerOeffnen(3);
		busse[8].tuerOeffnen(3);
		busse[1].tuerOeffnen(1);
		
		for (Bus bus : busse) {
			System.out.println(bus.istFahrbereit());
		}
				
		for (Bus bus : busse) {
			
			if (bus.istTuerOffen()) {
			
				for (int i = 0; i < bus.getAnzahlTueren(); i++) {
				
					if (bus.tueren[i].getOffen()) {
						bus.tuerSchliessen(i+1);
					}
				}
			}
		}
		
		System.out.println();

		for (Bus bus : busse) {
			System.out.println(bus.istFahrbereit());
		}
		
		System.out.println();
		
		System.out.println(""Linienbus equals Bus vergl. "" + busse[8].equals(busse[0]));
		System.out.println(""Linienbus equals Reisebus vergl. "" + busse[8].equals(busse[1]));
		
		Reisebus reiseBus = new Reisebus(3,3,true);
		
		System.out.println();

		for (Bus bus : busse) {
			
			System.out.println(""Reisebus equals alle Busse im array vergl. "" + reiseBus.equals(bus));
		}

		
	}
}"
Mumdzic,David,d.mumdzic@campus.tu-berlin.de,Beendet,"1. Juli 2020  19:08","5. Juli 2020  20:13","4 Tage 1 Stunde","18,95","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"die Klasse Hund erbt von der Klasse Tier",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Es wird die Methode der Super-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {

    public static void main(String[] args){
        Bus[] a = { new Bus(5,7),
        new Reisebus(2,3,true),
        new Linienbus(7,2,false,3)};

        a[0].tuerOeffnen(2);
        a[0].tuerOeffnen(3);
        a[2].tuerOeffnen(1);
        a[2].tuerOeffnen(2);

        a[0].istFahrbereit();
        a[1].istFahrbereit();
        a[2].istFahrbereit();

        for(int i=0; i<a[0].getAnzahlTueren(); i++)
            a[0].tuerSchliessen(i+1);
        
        for(int i=0; i<a[1].getAnzahlTueren(); i++)
            a[1].tuerSchliessen(i+1);
        
        a[2].istFahrbereit();

        a[2].equals(a[0]);
        a[2].equals(a[1]);

        Linienbus weite = new Linienbus(7,0,false,3);

        for (int i = 0; i<a.length; i++){
            weite.equals(a[i]);
        }

    }
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
    public static void main(String[] args){
        
       // Arrays definieren
       Fussballspieler[] deutschland = new Fussballspieler[11];
       Fussballspieler[] frankreich = new Fussballspieler[11];
       
      //Werte einfügen
      deutschland[0] = new Torwart(""Hans"", 22, 3.2);
      deutschland[1] = new Abwehrspieler(""Juergen"", 24, 0.2);
      deutschland[2] = new Abwehrspieler(""Josef"", 28, 0.5);
      deutschland[3] = new Abwehrspieler(""Klaas"", 22, 0.1);
      deutschland[4] = new Mittelfeldspieler(""Ulrich"", 25, 1332.2);
      deutschland[5] = new Mittelfeldspieler(""Lorenzo"", 20, 1);
      deutschland[6] = new Mittelfeldspieler(""Jannik"", 21, 1700.4);
      deutschland[7] = new Mittelfeldspieler(""Oliver"", 28, 1938.2);
      deutschland[8] = new Sturmspieler(""Nadal"", 32, 1.3);
      deutschland[9] = new Sturmspieler(""Michael"", 21, 4.7);
      deutschland[10] = new Sturmspieler(""David"", 21, 4.6);
      
      frankreich[0] = new Torwart(""Francois"", 23, 2.8);
      frankreich[1] = new Abwehrspieler(""Martini"", 28, 0.3);
      frankreich[2] = new Abwehrspieler(""Riverie"", 19, 1.7);
      frankreich[3] = new Abwehrspieler(""Olivere"", 32, 0.1);
      frankreich[4] = new Mittelfeldspieler(""Chaqulin"", 21, 2140);
      frankreich[5] = new Mittelfeldspieler(""Baguette"", 22, 824);
      frankreich[6] = new Mittelfeldspieler(""Fracois"", 26, 1489.2);
      frankreich[7] = new Mittelfeldspieler(""Merci"", 28, 1528.6);
      frankreich[8] = new Sturmspieler(""Roseboiye"", 32, 3.4);
      frankreich[9] = new Sturmspieler(""Paris"", 22, 2.2);
      frankreich[10] = new Sturmspieler(""Pringels"", 25, 3.4);
      
      
  
      System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
      System.out.println();
      ausgeben(deutschland);
      System.out.println();
      fussballspielen(deutschland, frankreich);
    }
  
    public static double roteKartenZaehlen(Fussballspieler[] spieler){
      
     /* bitte implementieren */
     double anzahlRoteKartenJeSpiel = 0;
    for(Fussballspieler s: spieler){
        // hier ueberpruefen wir ob der jeweilige Spieler eine Instanz von der Klasse
        // Abwehrspieler ist
        if(s instanceof Abwehrspieler){
            // hier erzeugen wir ein neues Objekt vom Typ Abwehrspieler und setzen
            // es gleich dem gecasteten Abwehrspieler s (da wir wissen, dass er eine
            // Instanz der Klasse Abwehrspieler ist)
            Abwehrspieler abw = (Abwehrspieler) s;
            // wir rufen jetzt vom Abwehrspieler abw, die spezielle Methode
            // getAnzahlRoteKartenJeSpiel() auf
            anzahlRoteKartenJeSpiel += abw.getAnzahlRoteKartenJeSpiel();
        }
    }
    return anzahlRoteKartenJeSpiel;
    }
    public static void ausgeben(Fussballspieler[] spieler){
      
     /* bitte implementieren */
     for(Fussballspieler s: spieler)
     // hier existiert die Funktion toString() in der Oberklasse und in der Subklasse,
     // wenn die Funktion aufgerufen wird, wird die erste Implementierung, angefangen
     // von der Subklasse gesucht und verwendet. Da die Subklasse die Funktion toString()
     // implementiert hat, wird diese benutzt.
        System.out.println(s.toString());
    }
    
    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
      
     /* bitte implementieren */
     double pointA = 0;
     double pointB = 0;

     for(Fussballspieler s: mannschaft1){
         if(s instanceof Torwart){
             Torwart tor = (Torwart) s;
            pointA =- tor.getGegentoreJeSpiel();
         } else if(s instanceof Abwehrspieler){
             Abwehrspieler abw = (Abwehrspieler) s;
            pointA =- abw.getAnzahlRoteKartenJeSpiel();
         } else if(s instanceof Mittelfeldspieler){
             Mittelfeldspieler mit = (Mittelfeldspieler) s;
            pointA =+ mit.getPaesseJeSpiel()/1000;
         } else if(s instanceof Sturmspieler){
             Sturmspieler stu = (Sturmspieler) s;
            pointA =+ stu.getToreJeSpiel();
         }
     }

     for(Fussballspieler s: mannschaft2){
        if(s instanceof Torwart){
            Torwart tor = (Torwart) s;
           pointB =- tor.getGegentoreJeSpiel();
        } else if(s instanceof Abwehrspieler){
            Abwehrspieler abw = (Abwehrspieler) s;
           pointB =- abw.getAnzahlRoteKartenJeSpiel();
        } else if(s instanceof Mittelfeldspieler){
            Mittelfeldspieler mit = (Mittelfeldspieler) s;
           pointB =+ mit.getPaesseJeSpiel()/1000;
        } else if(s instanceof Sturmspieler){
            Sturmspieler stu = (Sturmspieler) s;
           pointB =+ stu.getToreJeSpiel();
        }
    }

    if(pointA > pointB)
        System.out.println(""Mannschaft 1 gewinnt!"");
    else if(pointA == pointB)
        System.out.println(""Unentschieden!"");
    else
        System.out.println(""Mannschaft 2 gewinnt!"");
    }
  }"
Hrustic,Amira,amira.hrustic@campus.tu-berlin.de,Beendet,"1. Juli 2020  20:35","5. Juli 2020  22:40","4 Tage 2 Stunden","5,73","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Es wird die Methode der Sub-Klasse aufgerufen",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Schulz,Fenja,fenja.schulz@campus.tu-berlin.de,Beendet,"1. Juli 2020  20:38","3. Juli 2020  20:11","1 Tag 23 Stunden","18,60","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
public static void main(String[] args){
   
  // Arrays definieren
  Fussballspieler obj[] = new Fussballspieler[11];
  Fussballspieler obj2[] = new Fussballspieler[11];
  
 //Werte einfügen
	
		obj[0] = new Mittelfeldspieler (""Bernd"", 20,2.0);
		obj[1] = new Mittelfeldspieler (""Klaus"", 21,3.0);
		obj[2] = new Mittelfeldspieler (""Herbert"", 22,3.0);
		obj[3] = new Sturmspieler (""Holger"", 24,6.0);
		obj[4] = new Sturmspieler (""Fred"", 25,6.0);
		obj[5] = new Sturmspieler (""Ulli"", 26,8.0);
		obj[6] = new Abwehrspieler (""Norbert"", 20,8.0);
		obj[7] = new Abwehrspieler (""Krause"", 25,4.0);
		obj[8] = new Abwehrspieler (""Bodo"", 28,7.0);
		obj[9] = new Abwehrspieler (""Joseph"", 19,2.0);
		obj[10] = new Torwart (""Uwe"", 19,1.0);
		
		obj2[0] = new Mittelfeldspieler (""Bernd"", 20,3.0);
		obj2[1] = new Mittelfeldspieler (""Klaus"", 21,3.0);
		obj2[2] = new Mittelfeldspieler (""Herbert"", 22,7.0);
		obj2[3] = new Sturmspieler (""Holger"", 24,3.0);
		obj2[4] = new Sturmspieler (""Fred"", 25,5.0);
		obj2[5] = new Sturmspieler (""Ulli"", 26,8.0);
		obj2[6] = new Abwehrspieler (""Norbert"", 20,8.0);
		obj2[7] = new Abwehrspieler (""Krause"", 25,2.0);
		obj2[8] = new Abwehrspieler (""Bodo"", 28,5.0);
		obj2[9] = new Abwehrspieler (""Joseph"", 19,4.0);
		obj2[10] = new Torwart (""Uwe"", 19, 1.0);
 System.out.println(""Rote Karten: "" + roteKartenZaehlen(obj));
 System.out.println();
 ausgeben(obj);
 System.out.println();
 fussballspielen(obj, obj2);
}

	//hier wird direkt durch instanceof gecheckt, um welche Unterklasse von Fussballspieler
	//es sich handelt, sodass keine Konflikte im Klassenaufruf geschehen, da ohnehin nur
	//auf getAnzahlRK zugegriffen wird, falls fb[i] ein Abwehrspieler ist
public static double roteKartenZaehlen(Fussballspieler[] fb){
 
	double c = 0;
	for(int i = 0; i < fb.length; i++) {
		if(fb[i] instanceof Abwehrspieler) {
			c+= ((Abwehrspieler) fb[i]).getAnzahlRoteKartenJeSpiel();
		};
	}
	return c;
}

	//hier wird in jeder Unterklasse die Methode der Superklasse toString überschrieben
	//sodass für jeden Aufruf von toString auf den Fussballspielerobjekten in fb jeweils
	//die toString Methode benutzt wird, die die Unterklasse, der das Objekt fb[i] angehört
	//zur Verfügung stellt 
public static void ausgeben(Fussballspieler[] fb){
	for(int i = 0; i < fb.length; i++) {
	    System.out.println(fb[i].toString());
	}
}
public static void fussballspielen(Fussballspieler[] f1, Fussballspieler[] f2){
 
		double s1 = 0.0;
		double s2 = 0.0;
		
		for(int i = 0; i < f1.length; i++) {
			if(f1[i] instanceof Abwehrspieler) {
				s1-= ((Abwehrspieler) f1[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(f2[i] instanceof Abwehrspieler) {
				s2-= ((Abwehrspieler) f2[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(f1[i] instanceof Sturmspieler) {
				s1+= ((Sturmspieler) f1[i]).getToreJeSpiel();
			}
			if(f2[i] instanceof Sturmspieler) {
				s2+= ((Sturmspieler) f2[i]).getToreJeSpiel();
			}
			if(f1[i] instanceof Torwart) {
				s1-= ((Torwart) f1[i]).getGegentoreJeSpiel();
			}
			if(f2[i] instanceof Torwart) {
				s2-= ((Torwart) f2[i]).getGegentoreJeSpiel();
			}
			if(f1[i] instanceof Mittelfeldspieler) {
				s1+= ((Mittelfeldspieler) f1[i]).getPaesseJeSpiel();
			}
			if(f2[i] instanceof Mittelfeldspieler) {
				s2+= ((Mittelfeldspieler) f2[i]).getPaesseJeSpiel();
			}
		}
		if(s1<s2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		if(s2==s1) {
			System.out.println(""Unentschieden!"");
		}
		if(s2<s1){
			System.out.println(""Mannschaft 1 gewinnt!"");			
		}
}
}","//Hier kommt die TestBus Klasse rein
public class TestBus {

	public static void main(String[] args) {
		
		Bus b[] = new Bus[4];
		b[0] = new Bus (20,1);
		b[1] = new Reisebus (24,3, true);
		b[2] = new Linienbus (30, 2, false, 15);	
		
		b[2].tuerOeffnen(2);
		b[1].tuerOeffnen(1);
		b[1].tuerOeffnen(2);
		System.out.println(b[1].istFahrbereit());
		b[0].tuerSchliessen(1);		
		b[2].tuerSchliessen(1);
		b[2].tuerSchliessen(2);		
		b[1].tuerSchliessen(1);
		b[1].tuerSchliessen(2);
		b[1].tuerSchliessen(3);
		System.out.println(b[0].istFahrbereit());
		System.out.println(b[1].istFahrbereit());
		System.out.println(b[2].istFahrbereit());
		System.out.println(b[2].equals(b[0]));
		System.out.println(b[2].equals(b[1]));
		Linienbus k = new Linienbus(30,2,false,15);
		System.out.println(k.equals(b[0]));
		System.out.println(k.equals(b[1]));
		System.out.println(k.equals(b[2]));

		
	}

}"
Ataey,Armin,armin.ataey@campus.tu-berlin.de,Beendet,"1. Juli 2020  22:33","5. Juli 2020  23:52","4 Tage 1 Stunde","11,10",extends,"die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Sub-Klasse aufgerufen",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","//Hier kommt die TestBus Klasse rein
public class TestBus{
    public static void main(String [] args)
    {
        Bus [] buesse = new Bus[3];
        buesse[0] = new Bus(34, 5);
        buesse[1] = new Reisebus(53, 7, true);
        buesse[2] = new Linienbus(47, 3, true, 50);
        
        buesse[0].tuerOeffnen(3);
        buesse[1].tuerOeffnen(6);
        buesse[2].tuerOeffnen(2);
        
        for(int i = 0; i<=buesse.length;i++)
        {
            for(int j = 1; i<=buesse[i].getAnzahlTueren(); j++)
            {
                buesse[i].tuerSchliessen(j);
            }
        }
        
        buesse[2].equals(buesse[0]);
        buesse[2].equals(buesse[1]);
        
        Bus linien = new Linienbus(20, 4, true, 66);
        
        for(int i = 0; i<buesse.length; i++)
        {
            linien.equals(buesse[i]);
        }
    }
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     Fussballspieler [] Mannschaft1 = new Fussballspieler[11];
     Fussballspieler [] Mannschaft2 = new Fussballspieler[11];
     
     
    //Werte einfügen
     Mannschaft1[0] = new Torwart(""Alireza Beiranvand"", 27, 345);
     Mannschaft1[1] = new Sturmspieler(""Sardar Azmoun"", 25, 983);
     Mannschaft1[2] = new Sturmspieler(""Alireza Jahanbakhsh"", 26, 763);
     Mannschaft1[3] = new Sturmspieler(""Mehdi Taromi"", 27, 98);
     Mannschaft1[4] = new Abwehrspieler(""Ramin Rezaian"", 30, 88);
     Mannschaft1[5] = new Mittelfeldspieler(""Saeid Ezatolahi"", 23, 75);
     Mannschaft1[6] = new Sturmspieler(""Karim Ansarifard"", 30, 98);
     Mannschaft1[7] = new Mittelfeldspieler(""Ashkan Dejagah"", 33, 976);
     Mannschaft1[8] = new Abwehrspieler(""Vouria Ghafouri"", 32, 64);
     Mannschaft1[9] = new Mittelfeldspieler(""Mehdi Torabi"", 25, 89);
     Mannschaft1[10] = new Abwehrspieler(""Morteza Pouraliganji"", 28, 865);
     
     Mannschaft2[0] = new Torwart(""Manuel Neuer"", 34, 645);
     Mannschaft2[1] = new Mittelfeldspieler(""Toni Kroos"", 30, 765);
     Mannschaft2[2] = new Sturmspieler(""Julian Brandt"", 24, 237);
     Mannschaft2[3] = new Sturmspieler(""Timo Werner"", 24, 95);
     Mannschaft2[4] = new Sturmspieler(""Leroy Sané"", 24, 76);
     Mannschaft2[5] = new Mittelfeldspieler(""Kai Havertz"", 21, 87);
     Mannschaft2[6] = new Sturmspieler(""Marco Reus"", 31, 7);
     Mannschaft2[7] = new Abwehrspieler(""Joshua Kimmich"", 25, 37);
     Mannschaft2[8] = new Mittelfeldspieler(""Serge Gnabry"", 24, 86);
     Mannschaft2[9] = new Abwehrspieler(""Jonathan Tah"", 24, 87);
     Mannschaft2[10] = new Abwehrspieler(""Antonio Ruediger"", 27, 14);
     
     Mannschaft1[7].geburtstagFeiern();
     
     
     
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(Mannschaft1)+""\n"");
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(Mannschaft2)+""\n"");
    ausgeben(Mannschaft1);
    ausgeben(Mannschaft2);
    fussballspielen(Mannschaft1, Mannschaft2);
  }

  public static double roteKartenZaehlen(Fussballspieler [] mannschaft){
    
   /* bitte implementieren */
     double roteKarten = 0;
     for(int i = 0; i<mannschaft.length; i++)
     {
         if(mannschaft[i] instanceof Abwehrspieler)
         {
             roteKarten+=((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
         }
     }
     return roteKarten;
  }
  
  public static void ausgeben(Fussballspieler [] Mannschaft){
    
   /* bitte implementieren */
    for(int i = 0; i<Mannschaft.length; i++)
     {
         System.out.println(Mannschaft[i]);
     }
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
   double punkte1 = 0;
   double punkte2 = 0;
   
    punkte1 -= roteKartenZaehlen(mannschaft1);
    punkte2 -= roteKartenZaehlen(mannschaft2);
    
     for(int i = 0; i<mannschaft1.length; i++)
     {
         if(mannschaft1[i] instanceof Sturmspieler)
         {
             punkte1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
         }
     }
         
     for(int i = 0; i<mannschaft2.length; i++)
     {
         if(mannschaft2[i] instanceof Sturmspieler)
         {
             punkte2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
         }
     }
     
    for(int i = 0; i<mannschaft1.length; i++)
     {
         if(mannschaft1[i] instanceof Torwart)
         {
             punkte1 -= ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
         }
     }
     
     for(int i = 0; i<mannschaft2.length; i++)
     {
         if(mannschaft2[i] instanceof Torwart)
         {
             punkte2 -= ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
         }
     }
     
     for(int i = 0; i<mannschaft1.length; i++)
     {
         if(mannschaft1[i] instanceof Mittelfeldspieler)
         {
             punkte1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
         }
     }
     
     for(int i = 0; i<mannschaft2.length; i++)
     {
         if(mannschaft2[i] instanceof Mittelfeldspieler)
         {
             punkte2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
         }
     }
     
         
     if(punkte1 == punkte2)
     {
         System.out.println(""Unentschieden!"");
     }
         
     else if(punkte1 < punkte2)
     {
         System.out.println(""\nMannschaft 2 gewinnt!"");
     }
         
     else if(punkte1 > punkte2)
     {
         System.out.println(""\nMannschaft 1 gewinnt!"");
     }   
  }
}"
Keshishzadeh,"Noah Alexander",keshishzadeh@campus.tu-berlin.de,Beendet,"1. Juli 2020  23:23","5. Juli 2020  23:28","4 Tage","11,72","Es wird die Methode der Sub-Klasse aufgerufen",Object,extends,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     
         Fussballspieler[] AraratFC = {
        new Torwart (""Aram Hayrapetyan"",34,1),
        new Abwehrspieler(""Levo Hayrapetyan"",31,1),
        new Abwehrspieler(""Narek Petrosyan"",24,0),
        new Abwehrspieler(""Hambartsum Hambartsumyan"",24,0),
        new Abwehrspieler(""Garo Koshkkaryan"",23,0),
        new Mittelfeldspieler(""Alik Arakelyan"",24,23),
        new Mittelfeldspieler(""Gevo Ghazaryan"",32,34),
        new Mittelfeldspieler(""Apo Nazaryan"",25,27),
        new Mittelfeldspieler(""Artak Demirdjian"",21,30),
        new Sturmspieler(""Khacho Dersimtsian"",25,27),
        new Sturmspieler(""Henrikh Mkhitaryan"",31,26)
         };
         
        Fussballspieler[] Amedspor = {
        new Torwart (""Mohammad Artak"",34,2),
        new Abwehrspieler(""Ali al-Dersim"",31,1),
        new Abwehrspieler(""Misto Barzani "",24,1),
        new Abwehrspieler(""Cihan Badini"",24,0),
        new Abwehrspieler(""Djivan Tuezuen"",23,0),
        new Mittelfeldspieler(""Sipan Behdadi"",24,20),
        new Mittelfeldspieler(""Veysel Zazai"",32,31),
        new Mittelfeldspieler(""Mirkan Mardin"",25,24),
        new Mittelfeldspieler(""Azad Berxwedan Jiyan"",21,28),
        new Sturmspieler(""Miran Arasi"",25,25),
        new Sturmspieler(""Dilo Amedi"",31,24)
        };
   
    AraratFC[1].geburtstagFeiern();
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(AraratFC));
    System.out.println();
    ausgeben(AraratFC);
    System.out.println();
    fussballspielen(AraratFC, Amedspor);
  }

  public static double roteKartenZaehlen(Fussballspieler[] M){
      double roteKarten = 0;
    for(int i = 0; i<M.length;i++){
        if(M[i] instanceof Abwehrspieler)
        roteKarten += ((Abwehrspieler)M[i]).getAnzahlRoteKartenJeSpiel();
        }
   return roteKarten;
  }
  public static void ausgeben(Fussballspieler[] M){
      for(int i = 0; i < M.length;i++){
          System.out.println(M[i]);
      }
  
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double punkteM1 = 0;
    double punkteM2 = 0;
    double paesseM1 = 0;
    double paesseM2 = 0;
    double toreM1 = 0;
    double toreM2 = 0;
    double gegentoreM1 = 0;
    double gegentoreM2 = 0;
    double rk1 = roteKartenZaehlen(mannschaft1);
    double rk2 = roteKartenZaehlen(mannschaft2);
    for(int i = 0;i< mannschaft1.length;i++){
        if(mannschaft1[i] instanceof Mittelfeldspieler){
        paesseM1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
    }
    }
    for(int i = 0;i< mannschaft2.length;i++){
        if(mannschaft2[i] instanceof Mittelfeldspieler){
        paesseM2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
    }
    }
    for(int i = 0;i<mannschaft1.length;i++){
        if(mannschaft1[i] instanceof Sturmspieler){
            toreM1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
            
        }
        
    }
     for(int i = 0;i<mannschaft2.length;i++){
        if(mannschaft2[i] instanceof Sturmspieler){
            toreM2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
            
        }
        
    }
    for(int i = 0; i< mannschaft1.length;i++){
        if(mannschaft1[i] instanceof Torwart){
            gegentoreM1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
        }
    }
    for(int i = 0; i< mannschaft2.length;i++){
        if(mannschaft2[i] instanceof Torwart){
            gegentoreM2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
}
}
    punkteM1 = (toreM1 + paesseM1)-(rk1+gegentoreM1);
	punkteM2 = (toreM2 + paesseM2)-(rk2+gegentoreM2);

	if(punkteM1 > punkteM2){
		System.out.println(""Mannschaft 1 gewinnt!"");
	}
	else if(punkteM1 < punkteM2){
		System.out.println(""Mannschaft 2 gewinnt!"");
	}
	else if(punkteM1 == punkteM2){
		System.out.println(""Unentschieden!"");
	}
}
}",-
Standl,"Jacob Jeremy",standl@campus.tu-berlin.de,Beendet,"1. Juli 2020  23:37","6. Juli 2020  00:05","4 Tage","8,50","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",Java,"Es wird die Methode der Sub-Klasse aufgerufen",extends,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,"public class TestBus{
	
	public static void main(String[] args){
		
		Bus[] busse = {new Bus(34,0), new Reisebus(80,2,true), new Linienbus(50,8,true,30)};
		busse[0].tuerOeffnen(1);
		busse[1].tuerOeffnen(1);
		busse[1].tuerOeffnen(2);
		busse[2].tuerOeffnen(2);
		busse[2].tuerOeffnen(1);
		busse[2].tuerOeffnen(0);
		System.out.println(busse[0].istFahrbereit());
		System.out.println(busse[1].istFahrbereit());
		System.out.println(busse[2].istFahrbereit());
		
		busse[1].tuerSchliessen(1);
		busse[1].tuerSchliessen(2);
		
		System.out.println(busse[0].istFahrbereit());
		System.out.println(busse[1].istFahrbereit());
		System.out.println(busse[2].istFahrbereit());
		System.out.println(busse[2].equals(busse[0]));
		System.out.println(busse[2].equals(busse[1]));
		Reisebus r = new Reisebus(80,2,true);
		System.out.println(r.equals(busse[0]));
		System.out.println(r.equals(busse[1]));
		System.out.println(r.equals(busse[2]));
		
	}
	

}"
"Montenegro Retana",Lydia-Salome,l.schuecker@campus.tu-berlin.de,Beendet,"2. Juli 2020  08:38","3. Juli 2020  11:31","1 Tag 2 Stunden","20,00","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
	public static void main(String[] args){
   
		Fussballspieler [] deutschland = {
			new Torwart (""Bob1"", 16, 5), 
			new Abwehrspieler (""Bob2"", 17, 1), 
			new Abwehrspieler (""Bob3"", 16, 2),
			new Abwehrspieler (""Bob4"", 16, 0),
			new Sturmspieler (""Bob5"", 20, 2),
			new Sturmspieler (""Bob6"", 19, 2),
			new Sturmspieler (""Bob7"", 18, 2),
			new Mittelfeldspieler (""Bob8"", 16, 55),
			new Mittelfeldspieler (""Bob9"", 19, 94),
			new Mittelfeldspieler (""Bob10"", 20, 32),
			new Mittelfeldspieler (""Bob11"", 160, 43)};

		Fussballspieler [] guatemala = {
			new Torwart (""Tom1"", 16, 6), 
			new Abwehrspieler (""Tom2"", 17, 1), 
			new Abwehrspieler (""Tom3"", 16, 2),
			new Abwehrspieler (""Tom4"", 16, 0),
			new Sturmspieler (""Tom5"", 20, 5),
			new Sturmspieler (""Tom6"",19, 0),
			new Sturmspieler (""Tom7"", 18, 0),
			new Mittelfeldspieler (""Tom8"", 16, 55),
			new Mittelfeldspieler (""Tom9"", 19, 94),
			new Mittelfeldspieler (""Tom10"", 20, 32),
			new Mittelfeldspieler (""Tom11"", 160, 43)};
    
		deutschland[0].geburtstagFeiern();
		
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
		System.out.println();
		ausgeben(deutschland);
		System.out.println();
		fussballspielen(deutschland, guatemala);
	}

	public static double roteKartenZaehlen(Fussballspieler [] mannschaft){
	//nichts damit zu tun
		double anzahlRoteKarten = 0;
		for (int i = 0; i < mannschaft.length; i++){
			if (mannschaft[i] instanceof Abwehrspieler) { 
			anzahlRoteKarten = anzahlRoteKarten + ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return anzahlRoteKarten;	
	}
	// Jedes generische Objekt, jeder genereische Fusballspieler und jeder spezielle Fußballspieler implementiert die Funktion toString()
	// Hier wird immer die naheliegenste Funktion aufgerufe, also die der speziellen Spieler
	public static void ausgeben(Fussballspieler [] mannschaft){
		for (int i = 0; i < mannschaft.length; i++){
			System.out.println (mannschaft[i].toString());
		}	
	  }

	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
		double spielstärke1 = 0;
		for (int i = 0; i < mannschaft1.length; i++){
			if (mannschaft1[i] instanceof Sturmspieler) { 
			spielstärke1 = spielstärke1 + ((Sturmspieler) mannschaft1[i]).getToreJeSpiel();
			}

			if (mannschaft1[i] instanceof Abwehrspieler) { 
			spielstärke1 = spielstärke1 - ((Abwehrspieler) mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			}

			if (mannschaft1[i] instanceof Mittelfeldspieler) { 
			spielstärke1 = spielstärke1 + ((Mittelfeldspieler) mannschaft1[i]).getPaesseJeSpiel();
			}

			if (mannschaft1[i] instanceof Torwart) { 
			spielstärke1 = spielstärke1 - ((Torwart) mannschaft1[i]).getGegentoreJeSpiel();
			}
		}

		double spielstärke2 = 0;
		for (int i = 0; i < mannschaft2.length; i++){
			if (mannschaft2[i] instanceof Sturmspieler) { 
			spielstärke2 = spielstärke2 + ((Sturmspieler) mannschaft2[i]).getToreJeSpiel();
			}

			if (mannschaft1[i] instanceof Abwehrspieler) { 
			spielstärke2 = spielstärke2 - ((Abwehrspieler) mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
			}

			if (mannschaft1[i] instanceof Mittelfeldspieler) { 
			spielstärke2 = spielstärke2 + ((Mittelfeldspieler) mannschaft2[i]).getPaesseJeSpiel();
			}

			if (mannschaft1[i] instanceof Torwart) { 
			spielstärke2 = spielstärke2 - ((Torwart) mannschaft2[i]).getGegentoreJeSpiel();
			}
		}

		if (spielstärke1 > spielstärke2){
			System.out.println (""Mannschaft 1 gewinnt!"");	
		}

		if (spielstärke1 < spielstärke2){
			System.out.println (""Mannschaft 2 gewinnt!"");	
		}

		if (spielstärke1 == spielstärke2){
			System.out.println (""Unentschieden!"");
		}
	}
     
}","public class TestBus {

	public static void main(String[] argv){
	
		Bus[] arr = new Bus[5];
		arr[0] = new Bus(100, 4);
		arr[1] = new Linienbus(20,-1,true, 10);
		arr[2] = new Linienbus(20, 5, false, 10);
		arr[3] = new Reisebus(29, 3, true);
		arr[4] = new Reisebus(29,2,false);

		arr[0].tuerOeffnen(4);
		arr[1].tuerOeffnen(1);
		System.out.println(arr[1].istFahrbereit());
		arr[2].tuerOeffnen(3);
		System.out.println(arr[2].istFahrbereit());
		
		arr[3].tuerOeffnen(4);
		arr[3].tuerOeffnen(1);
		System.out.println(arr[3].istFahrbereit());
		arr[4].tuerOeffnen(3);
		System.out.println(arr[4].istFahrbereit());

		System.out.println(""alle Busse bereitmachen"");
		arr[3].tuerSchliessen(1);
		arr[3].tuerSchliessen(2);
		arr[3].tuerSchliessen(3);
		arr[4].tuerSchliessen(1);
		arr[4].tuerSchliessen(2);
		arr[4].tuerSchliessen(3);
		for(int i = 0; i<5; i++) {
			System.out.println(arr[i].istFahrbereit());
		}

		System.out.println(""Busse vergleichen"");
		System.out.println(arr[1].equals(arr[0]));
		System.out.println(arr[1].equals(arr[4]));

		Bus boss = new Reisebus(29,2,false);
		for(int i = 0; i< 5; i++) {
			System.out.println(boss.equals(arr[i]));			
		}
	}	


}"
Ghebreselasie,Lena,l.ghebreselasie@campus.tu-berlin.de,Beendet,"2. Juli 2020  16:32","5. Juli 2020  23:33","3 Tage 7 Stunden","11,74","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",Object,"Es wird die Methode der Sub-Klasse aufgerufen",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String[] args[]) {
		Bus[] busse = {
			new Bus(43, 3),
			new Reisebus(34, 1, false),
			new Linienbus(43,3,true,34),
		};
	
	
	
		
		busse[0].tuerOeffnen(1);
		busse[1].tuerOeffnen(3);
		busse[1].tuerOeffnen(4);
		busse[2].tuerOeffnen(4);
		
		busse[0].istFahrbereit();
		busse[1].istFahrbereit();
		busse[2].istFahrbereit();
		
		busse[1].tuerSchliessen(1);
			
		
		busse[2].equals(busse[0]);
		busse[2].equals(busse[1]);
		
		
		Bus b2 = new Linienbus(45,2,false,34);
		
		for(int i=0; i<busse.length; i++) {
			b2.equals(busse[i]);
		}
	}
}","public class TestMannschaft{
  public static void main(String[] args){ 
  // Arrays definieren
      Fussballspieler[] fcBarcelona = {
		new Torwart(""Ter Stegen"", 28,0.5),
		new Abwehrspieler(""Dani Alves"", 25,0.01),
		new Abwehrspieler(""Puyol"", 26,0.0),
		new Abwehrspieler(""Pique"", 26,0.03),
		new Abwehrspieler(""Jordi Alba"", 27,0.02),
		new Mittelfeldspieler(""Iniesta"",28,99.99),
		new Mittelfeldspieler(""Xavi"",29,99.99),
		new Mittelfeldspieler(""Busquets"",26,99.99),
		new Sturmspieler(""Henry"", 27,2.0),
		new Sturmspieler(""Messi"", 33,2.5),
		new Sturmspieler(""Eto'o"", 28,2.0)
		};
	
	Fussballspieler[] teamlegends = {
		new Torwart(""Dida"", 27,0.3),
		new Abwehrspieler(""Roberto Carlos"", 26,0.05),
		new Abwehrspieler(""Maldini"", 25,0.01),
		new Abwehrspieler(""Ferdinand"", 27,0.05),
		new Abwehrspieler(""Cafu"", 26,0.0),
		new Mittelfeldspieler(""Zidane"", 25,100.0),
		new Mittelfeldspieler(""Pirlo"",29,120.0),
		new Mittelfeldspieler(""Ronaldinho"", 25,80.0),
		new Sturmspieler(""Ronaldo"", 26,2.7),
		new Sturmspieler(""Drogba"",27,2.5),
		new Sturmspieler(""Weah"" ,26,1.5)
		};
		

    teamlegends[6].geburtstagFeiern();
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(fcBarcelona));
    System.out.println();
    ausgeben(teamlegends);
    System.out.println();
    fussballspielen(fcBarcelona,teamlegends);
  }

  public static double roteKartenZaehlen(Fussballspieler [] team) {
	double summe=0;
		for (int i = 0; i<team.length; i++) {
			if(team[i] instanceof Abwehrspieler) {
				Abwehrspieler v = (Abwehrspieler)team[i];
				summe += v.getAnzahlRoteKartenJeSpiel();
			}
			else {
			}
			
		}
			
		
	return summe;
  }
  
  public static void ausgeben(Fussballspieler[] team){
	for (int i = 0; i<team.length; i++) {
			
	if(team[i] instanceof Torwart) {
		Torwart tw = (Torwart)team[i];
		System.out.print(tw);
	}
	
	if(team[i] instanceof Abwehrspieler){
		Abwehrspieler iv = (Abwehrspieler)team[i];
		System.out.print(iv);
	}
	if(team[i] instanceof Mittelfeldspieler) {
		Mittelfeldspieler cm =(Mittelfeldspieler)team[i];
		System.out.print(cm);
	}
	if(team[i] instanceof Sturmspieler) {
		Sturmspieler st = (Sturmspieler)team[i];
		System.out.print(st);
	}
	
	else {
	}
		
	}
		
	 
	  
	  

    
   /* bitte implementieren */
  }
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	  double spielst1 = 0;
	  double spielst2 = 0;
	for(int i=0;i<mannschaft1.length;i++) {
	
	if(mannschaft1[i] instanceof Torwart) {
		Torwart tw = (Torwart)mannschaft1[i];
		spielst1 += tw.getGegentoreJeSpiel();
	}
	
	if(mannschaft1[i] instanceof Abwehrspieler){
		Abwehrspieler iv = (Abwehrspieler)mannschaft1[i];
		spielst1 += iv.getAnzahlRoteKartenJeSpiel();
	}
	if(mannschaft1[i] instanceof Mittelfeldspieler) {
		Mittelfeldspieler cm =(Mittelfeldspieler)mannschaft1[i];
		spielst1 += cm.getPaesseJeSpiel();
	}
	if(mannschaft1[i] instanceof Sturmspieler) {
		Sturmspieler st = (Sturmspieler)mannschaft1[i];
		spielst1 += st.getToreJeSpiel();
	}
	else {
	}
	}
	for(int i=0;i<mannschaft2.length;i++) {
		
	if(mannschaft2[i] instanceof Torwart) {
		Torwart tw2= (Torwart)mannschaft2[i];
		spielst2 += tw2.getGegentoreJeSpiel();
	}
	
	if(mannschaft2[i] instanceof Abwehrspieler){
		Abwehrspieler iv2=(Abwehrspieler)mannschaft2[i];
		spielst2 += iv2.getAnzahlRoteKartenJeSpiel();
	}
	if(mannschaft2[i] instanceof Mittelfeldspieler) {
		Mittelfeldspieler cm2 = (Mittelfeldspieler)mannschaft2[i];
		spielst2 += cm2.getPaesseJeSpiel();
	}
	if(mannschaft2[i] instanceof Sturmspieler) {
		Sturmspieler st2= (Sturmspieler)mannschaft1[i];
		spielst2 += st2.getToreJeSpiel();
	
	}
	else {
	}
	}
  

	if(spielst1>spielst2) {
		System.out.println(""Fc Barcelona gewinnt"");
	}
	else if(spielst2>spielst1) {
		System.out.println(""Team Legends gewinnt!"");
	}
	else if(spielst1==spielst2) {
		System.out.println(""Unentschieden!"");
	}
   /* bitte implementieren */
  }
}"
Türkmen,Meryem,meryem.tuerkmen@campus.tu-berlin.de,Beendet,"2. Juli 2020  18:53","2. Juli 2020  19:19","25 Minuten 13 Sekunden","5,50","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen","Zeile 1 : Klasse A hat keinen Konstruktor",super,Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Schedlich,"Klara Josephine",klara.schedlich@campus.tu-berlin.de,Beendet,"2. Juli 2020  19:52","5. Juli 2020  23:58","3 Tage 4 Stunden","9,38","Es wird die Methode der Super-Klasse aufgerufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Zeile 1 : Klasse A hat keinen Konstruktor","die Klasse Hund erbt von der Klasse Tier",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {

	public static void main(String[] args) {
		Bus[] busse = new Bus[3];
		busse[0] = new Bus(25, 4);
		busse[1] = new Reisebus(30, 2, true);
		busse[2] = new Linienbus(20, 3, true, 30);
		busse[0].tuerOeffnen(3);
		busse[1].tuerOeffnen(2);
		busse[2].tuerOeffnen(1);
		for(Bus b: busse) {
			System.out.println(""ist fahrbereit: "" + b.istFahrbereit());
		}
		busse[1].tuerSchliessen(2);
		busse[2].equals(busse[0]);
		busse[1].equals(busse[2]);
		
		Linienbus lb = new Linienbus(20, 3, true, 30);
		for(Bus b: busse) {
			System.out.println(""lb equals b: "" + b.equals(lb));
		}
		

	}

}",-
Wang,Wenjia,0e3820341f6427a89be74b338557c97b,Beendet,"2. Juli 2020  22:09","5. Juli 2020  23:59","3 Tage 1 Stunde","4,09","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Superklasse den Konstruktor einer Subklasse auf.",super,Class,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String args[]) {
		Bus1 b1 = new Bus1(55, 4);
		Reisebus r = new Reisebus(55, 2, false);
		Linienbus l = new Linienbus(30, 2, false, 25);
		b1.tuerOeffnen(0);
		b1.istTuerOffen();
		b1.istFahrbereit();
		l.equals(b1);
		l.equals(r);
		Reisebus r1 = new Reisebus(55, 2, false);
		r1.equals(b1);
		r1.equals(r);
		r1.equals(l);
	}

}
//Hier kommt die TestBus Klasse rein",-
Hilel,Arad,arad.hilel@campus.tu-berlin.de,Beendet,"2. Juli 2020  22:42","5. Juli 2020  17:43","2 Tage 19 Stunden","15,21",extends,Java,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","//Hier kommt die TestBus Klasse rein

class TestBus {


    public static void main(String[] args) {

       Bus[] busse = {
                    new Bus(10, -2),
                    new Bus(30, 6),
                    new Linienbus(20, 8, false, 10),
                    new Linienbus(30, -3, true, 15),
                    new Reisebus(10, -2, true),
                    new Reisebus(30, 2, true),
                    new Reisebus(10, -2, true),
            };


            busse[1].tuerOeffnen(2);
            busse[1].tuerOeffnen(4);

            busse[2].tuerOeffnen(2);

            busse[2].tuerOeffnen(3);
            busse[4].tuerOeffnen(3);

            System.out.println(busse[0].istFahrbereit());
            System.out.println(busse[1].istFahrbereit());
            System.out.println(busse[2].istFahrbereit());
            System.out.println(busse[3].istFahrbereit());
            System.out.println(busse[4].istFahrbereit());
            System.out.println(busse[5].istFahrbereit());

            busse[4].tuerSchliessen(1);
            busse[5].tuerSchliessen(1);
            busse[5].tuerSchliessen(2);

            busse[2].equals(busse[1]);
            busse[3].equals(busse[4]);

            for (int i = 0 ; i<busse.length ; i++){
                  if (busse[6].equals(busse[i])) {
                        if (i == 6) {
                              continue ;
                        }
                        System.out.println(""The bus is the same for bus number "" + (i+1));
                  }
            }

      }
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
    
    public static double roteKartenZaehlen (Fussballspieler [] a) {
		double gesamteRoteKartenJeSpiel = 0;
		for (Fussballspieler i : a) {
			if (i instanceof Abwehrspieler) {
				gesamteRoteKartenJeSpiel = ((Abwehrspieler) i).getAnzahlRoteKartenJeSpiel () + gesamteRoteKartenJeSpiel ;
		}
	}
        return gesamteRoteKartenJeSpiel ;
	}

    public static double paesseJeSpielZahlen (Fussballspieler [] a) {
        double gesamtePaesseJeSpiel = 0;
        for (Fussballspieler i : a) {
            if (i instanceof Mittelfeldspieler) {
                gesamtePaesseJeSpiel = ((Mittelfeldspieler) i).getPaesseJeSpiel () + gesamtePaesseJeSpiel ;
            }
        }
        return gesamtePaesseJeSpiel ;
    }

    public static double toreJeSpielZahlen (Fussballspieler [] a) {
        double gesamteToreJeSpiel = 0;
        for (Fussballspieler i : a) {
            if (i instanceof Sturmspieler) {
                gesamteToreJeSpiel = ((Sturmspieler) i).getToreJeSpiel () + gesamteToreJeSpiel ;
            }
        }
        return gesamteToreJeSpiel ;
    }

    public static double gegenToreJeSpielZahlen (Fussballspieler [] a) {
        double gesamteGegentoreJeSpiel = 0;
        for (Fussballspieler i : a) {
            if (i instanceof Torwart) {
                gesamteGegentoreJeSpiel = ((Torwart) i).getGegentoreJeSpiel () + gesamteGegentoreJeSpiel;
            }
        }
        return gesamteGegentoreJeSpiel ;
    }

    public static void fussballspielen  (Fussballspieler [] a, Fussballspieler [] b) {
        double punkteA = paesseJeSpielZahlen(a) + toreJeSpielZahlen(a) + gegenToreJeSpielZahlen(a) - roteKartenZaehlen(a);
        double punkteB = paesseJeSpielZahlen(b) + toreJeSpielZahlen(b) + gegenToreJeSpielZahlen(b) - roteKartenZaehlen(b);
        if (punkteA > punkteB) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (punkteB > punkteA) {
            System.out.println(""Mannschaft 2 gewinnt!"");

        } else {
            System.out.println(""Unentschieden!"");

        }
    }

    public static void ausgeben (Fussballspieler [] a) {
        for (Fussballspieler i : a) {
            System.out.println (i.toString ()) ;
        }
        //die methode ausgeben ist andere für jede class. Ich habe sie daher in 2 Methoden geteilt, wobei eine Methode die Grund Ausgabe hat (die methode out () ) und die zweite Methode die spezielle Methode für die unterclasse ist
    }
    
    
    

 

    
    
  public static void main(String[] args){
      
     // Arrays definieren
     Fussballspieler deutschland[] = new Fussballspieler[11];
        Fussballspieler mannschaftB[] = new Fussballspieler[11];
     
    //Werte einfügen
Torwart A = new Torwart(""John"", 33, 2.1);
        Abwehrspieler B = new Abwehrspieler(""Michael"", 21, 2.6);
        Abwehrspieler C = new Abwehrspieler(""Chaim"", 25, 2.3);
        Abwehrspieler D = new Abwehrspieler(""Jack"", 19, 3.3);
        Mittelfeldspieler E = new Mittelfeldspieler(""Aeriel"", 21, 2.6);
        Mittelfeldspieler F = new Mittelfeldspieler(""Jory"", 27, 2);
        Mittelfeldspieler G = new Mittelfeldspieler(""Moritz"", 29, 2.8);
        Sturmspieler H = new Sturmspieler(""Aegon"", 18, 3.8);
        Sturmspieler I = new Sturmspieler(""Jeff"", 22, 1.7);
        Sturmspieler J = new Sturmspieler(""Koni"", 24, 2.1);
        Sturmspieler K = new Sturmspieler(""Venus"", 25, 1.9);

        Torwart L = new Torwart(""John"", 33, 2.6);
        Abwehrspieler M = new Abwehrspieler(""Michael"", 21, 2.5);
        Abwehrspieler N = new Abwehrspieler(""Chaim"", 25, 2.2);
        Abwehrspieler O = new Abwehrspieler(""Jack"", 19, 3.5);
        Mittelfeldspieler P = new Mittelfeldspieler(""Aeriel"", 21, 2.6);
        Mittelfeldspieler Q = new Mittelfeldspieler(""Jory"", 27, 3);
        Mittelfeldspieler R = new Mittelfeldspieler(""Moritz"", 29, 4);
        Sturmspieler S = new Sturmspieler(""Aegon"", 18, 5);
        Sturmspieler T = new Sturmspieler(""Jeff"", 22, 0.8);
        Sturmspieler U = new Sturmspieler(""Koni"", 24, 1);
        Sturmspieler V = new Sturmspieler(""Venus"", 25, 3);


        deutschland[0] = A;
        deutschland[1] = B;
        deutschland[2] = C;
        deutschland[3] = D;
        deutschland[4] = E;
        deutschland[5] = F;
        deutschland[6] = G;
        deutschland[7] = H;
        deutschland[8] = I;
        deutschland[9] = J;
        deutschland[10] = K;

        mannschaftB[0] = L;
        mannschaftB[1] = M;
        mannschaftB[2] = N;
        mannschaftB[3] = O;
        mannschaftB[4] = P;
        mannschaftB[5] = Q;
        mannschaftB[6] = R;
        mannschaftB[7] = S;
        mannschaftB[8] = T;
        mannschaftB[9] = U;
        mannschaftB[10] = V;



    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    ausgeben(deutschland);
    fussballspielen(deutschland, mannschaftB);
  }
  
  
  
  
  
  
}"
Wienröder,Robert,a7189b32bdf77e577b2d10bdb402b928,Beendet,"2. Juli 2020  23:20","5. Juli 2020  19:46","2 Tage 20 Stunden","19,30",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,"Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
	
	public static void main(String[] args){
		Fussballspieler[] weltauswahl = new Fussballspieler[11];
		weltauswahl[0] = new Torwart(""Marc-André ter Stegen"", 28, 0.95);
		weltauswahl[1] = new Abwehrspieler(""Virgil van Dijk"", 28, 0.01);
		weltauswahl[2] = new Abwehrspieler(""David Alaba"", 28, 0.01);
		weltauswahl[3] = new Abwehrspieler(""Trent Alexander-Arnold"", 21, 0.01);
		weltauswahl[4] = new Abwehrspieler(""Jordi Alba"", 31, 0.01);
		weltauswahl[5] = new Mittelfeldspieler(""N'Golo Kanté"", 29, 98.9);
		weltauswahl[6] = new Mittelfeldspieler(""Paul Pogba"", 27, 73.3);
		weltauswahl[7] = new Mittelfeldspieler(""Lionel Messi"", 33, 103.7);
		weltauswahl[8] = new Sturmspieler(""Kylian Mbappé"", 21, 0.91);
		weltauswahl[9] = new Sturmspieler(""Sadio Mané"", 28, 0.46);
		weltauswahl[10] = new Sturmspieler(""Robert Lewandowski"", 31, 1.16);
		
		weltauswahl[1].geburtstagFeiern();
		
		Fussballspieler[] eintracht = new Fussballspieler[11];
		eintracht[0] = new Torwart(""Kevin Trapp"", 28, 0.3);
		eintracht[1] = new Abwehrspieler(""Martin Hinteregger"", 28, 0.01);
		eintracht[2] = new Abwehrspieler(""Makoto Hasebe"", 28, 0.01);
		eintracht[3] = new Abwehrspieler(""David Abraham"", 21, 0.005);
		eintracht[4] = new Mittelfeldspieler(""Dominik Kohr"", 31, 130.0);
		eintracht[5] = new Mittelfeldspieler(""Sebastian Rode"", 29, 140.0);
		eintracht[6] = new Mittelfeldspieler(""Filip Kostic"", 27, 20.0);
		eintracht[7] = new Mittelfeldspieler(""Daichi Kamada"", 33, 150.0);
		eintracht[8] = new Mittelfeldspieler(""Mijat Gacinovic"", 21, 200.00);
		eintracht[9] = new Sturmspieler(""André Silva"", 28, 3.0);
		eintracht[10] = new Sturmspieler(""Bas Dost"", 31, 4.5);
		
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(weltauswahl));
		System.out.println();
		ausgeben(weltauswahl);
		System.out.println();
		fussballspielen(weltauswahl, eintracht);
	}
	
	
	
	/* 
	Methode roteKartenZaehlen: Hier spielt Polymorphie insofern eine Rolle, als dass das von der Methode
	""roteKartenZaehlen"" aufgerufene Fussballspieler-Array aus verschiedenen
	Objekten verschiedener Sub-Klassen der Klasse Fussballspieler
	(Torwart, Abwehrspieler, Mittelfeldspieler, Sturmspieler) besteht,
	die aber alle denselben Datentyp Fussballspieler haben.
	Es sollen aber nur von allen im Array befindlichen Abwehrspieler-Objekte
	die Werte der roten Karten pro Spiel addiert werden, da dieser Wert auch 
	nur für Objekte der Klasse Abwehrspieler existiert.
	Daher lasse ich eine for-Schleife über das gesamte Array laufen und prüfe jedes
	Objekt mit ""instanceof Abwehrspieler"", ob es sich um ein Objekt der Klasse
	Abwehrspieler handelt; nur in dem Fall versucht dann das Programm die Anzahl
	der roten Karten pro Spiel für diesen Fussballspieler über ""getAnzahlRoteKartenJeSpiel""
	abzurufen und aufzuaddieren, was auch nur dann gelingen kann, da diese Methode nur
	in der Klasse Abwehrspieler existiert; andernfalls passiert nichts; dafür sorgt die if-Klausel.
	*/
	public static double roteKartenZaehlen(Fussballspieler[] mannschaft) {
		double anzahlRoteKartenJeSpiel = 0.0;
		for(int i = 0; i < mannschaft.length; i++) {
			if(mannschaft[i] instanceof Abwehrspieler) {
				Abwehrspieler as = (Abwehrspieler) mannschaft[i];
				anzahlRoteKartenJeSpiel += as.getAnzahlRoteKartenJeSpiel();
			}
		}
		return anzahlRoteKartenJeSpiel;
	}
	
	
	
	/* 
	Methode ausgeben: Hier spielt Polymorphie insofern eine Rolle, als dass das von der Methode
	""ausgeben"" aufgerufene Fussballspieler-Array aus verschiedenen
	Objekten verschiedener Sub-Klassen der Klasse Fussballspieler
	(Torwart, Abwehrspieler, Mittelfeldspieler, Sturmspieler) besteht,
	die aber alle denselben Datentyp Fussballspieler haben.
	Jede Sub-Klasse hat eine eigene toString-Methode, daher muss sichergestellt
	werden, dass für jeden Fussballspieler die richtige toString-Methode aufgerufen wird.
	Hierzu wird zunächst überprüft, zu welcher Sub-Klasse das vorliegende Objekt gehört;
	das geschieht mit vier hintereinandergeschalteten if-Klauseln, die jeweils überprüfen,
	ob das Objekt eine Instanz einer bestimmten Sub-Klasse ist; wenn ja, wird die toString-Methode
	der jeweiligen Klasse aufgerufen, wenn nein, geht es weiter zur nächsten if-Klausel;
	da nur Objekte der vier angelegten Sub-Klassen vorkommen, landet spätestens die letzte
	if-Klausel einen ""Treffer"".
	*/
	public static void ausgeben(Fussballspieler[] mannschaft) {		
		for(int i = 0; i < mannschaft.length; i++) {
			if(mannschaft[i] instanceof Torwart) {
				System.out.println(((Torwart)mannschaft[i]).toString());
			}
			if(mannschaft[i] instanceof Abwehrspieler) {
				System.out.println(((Abwehrspieler)mannschaft[i]).toString());
			}
			if(mannschaft[i] instanceof Mittelfeldspieler) {
				System.out.println(((Mittelfeldspieler)mannschaft[i]).toString());
			}
			if(mannschaft[i] instanceof Sturmspieler) {
				System.out.println(((Sturmspieler)mannschaft[i]).toString());
			}
		}
	}
	
	
	
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
		double spielstaerke1 = 5.0;
		double spielstaerke2 = 5.0;
		
		for(int i = 0; i < mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Torwart) {
				Torwart tw = (Torwart) mannschaft1[i];
				spielstaerke1 -= tw.getGegentoreJeSpiel();
			}
			if(mannschaft1[i] instanceof Abwehrspieler) {
				Abwehrspieler as = (Abwehrspieler) mannschaft1[i];
				spielstaerke1 -= as.getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft1[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler ms = (Mittelfeldspieler) mannschaft1[i];
				spielstaerke1 += ms.getPaesseJeSpiel();
			}
			if(mannschaft1[i] instanceof Sturmspieler) {
				Sturmspieler ss = (Sturmspieler) mannschaft1[i];
				spielstaerke1 += ss.getToreJeSpiel();
			}
		}
		for(int i = 0; i < mannschaft1.length; i++) {
			if(mannschaft2[i] instanceof Torwart) {
				Torwart tw = (Torwart) mannschaft2[i];
				spielstaerke2 -= tw.getGegentoreJeSpiel();
			}
			if(mannschaft2[i] instanceof Abwehrspieler) {
				Abwehrspieler as = (Abwehrspieler) mannschaft2[i];
				spielstaerke2 -= as.getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft2[i] instanceof Mittelfeldspieler) {
				Mittelfeldspieler ms = (Mittelfeldspieler) mannschaft2[i];
				spielstaerke2 += ms.getPaesseJeSpiel();
			}
			if(mannschaft2[i] instanceof Sturmspieler) {
				Sturmspieler ss = (Sturmspieler) mannschaft2[i];
				spielstaerke2 += ss.getToreJeSpiel();
			}
		}
		if(spielstaerke1 > spielstaerke2) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		if(spielstaerke1 < spielstaerke2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		if(spielstaerke1 == spielstaerke2) {
			System.out.println(""Unentschieden!"");
		}
	}
}","public class TestBus {
	
	public static void main(String[] args) {
		Bus[] flotte = new Bus[3];
		flotte[0] = new Bus(63, 3);
		flotte[1] = new Reisebus(97, 4, true);
		flotte[2] = new Linienbus(35, 2, true, 53);
		
		flotte[0].tuerOeffnen(1);
		flotte[0].tuerOeffnen(2);
		flotte[0].istFahrbereit();
		
		flotte[1].tuerOeffnen(1);
		flotte[1].tuerOeffnen(4);
		flotte[1].istFahrbereit();
		
		flotte[2].tuerOeffnen(1);
		flotte[2].tuerOeffnen(2);
		flotte[2].istFahrbereit();		
		
		flotte[1].tuerSchliessen(1);
		flotte[1].tuerSchliessen(2);
		flotte[1].tuerSchliessen(3);
		flotte[1].tuerSchliessen(4);
		
		flotte[2].equals(flotte[0]);
		flotte[2].equals(flotte[1]);
		
		
		Bus b = new Linienbus(35, 2, true, 53);
		
		for(int i = 0; i < flotte.length; i++) {
			b.equals(flotte[i]);
		}	
	
	}

}"
Bialokoz,"Frederick Alexander",bialokoz@campus.tu-berlin.de,Beendet,"3. Juli 2020  16:29","6. Juli 2020  00:05","2 Tage 7 Stunden","7,66","die Klasse Hund erbt von der Klasse Tier",Object,"Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Zeile 1 : Klasse A hat keinen Konstruktor","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {13. <sub>spannweite:} Dropzone 8 -> {4. <sub>double} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {12. <sub>schnabelfarbe:} Dropzone 11 -> {3. <sub>String} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {15. <sub>kannSprechen:} Dropzone 16 -> {16. <sub>boolean} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {4. <sub>double} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
  public static void main(String[] args){
      
    // Arrays definieren
     Fussballspieler [] deutschland = {
		 new Torwart (""Manuel Neuer"",33 , 0.9),
		 new Abwehrspieler (""Philip Lahm"",38, 0.1),
		 new Abwehrspieler (""Mats Hummels"",34, 0.2),
		 new Abwehrspieler (""Jerome Boateng"",29, 0.12),
		 new Abwehrspieler (""Joshua Kimmich"",25, 0.3),
		 new Mittelfeldspieler (""Leon Goretzka"", 24,54.3),
		 new Mittelfeldspieler (""Toni Kroos"",32, 74.2),
		 new Mittelfeldspieler (""Sami Khedira"", 32,43.9),
		 new Mittelfeldspieler (""Kai Havertz"",23, 66.9),
		 new Sturmspieler (""Miroslav Klose"",38,1.5),
		 new Sturmspieler (""Leroy Sane"",25, 1.12)
	 };
	 
	 deutschland[4].geburtstagFeiern();
	 
     Fussballspieler [] england = {
		 new Torwart (""Jordan Pickford"",27 , 0.9),
		 new Abwehrspieler ( ""Phil Jones"",32, 2.0),
		 new Abwehrspieler (""Kyle Walker"",26,  0.2),
		 new Abwehrspieler ( ""John Stones"", 25,0.12),
		 new Abwehrspieler ( ""Trent Alexander-Arnold"",23, 0.3),
		 new Mittelfeldspieler (""Eric Dier"", 27, 54.3),
		 new Mittelfeldspieler (""Dele Alli"", 25, 74.2),
		 new Mittelfeldspieler ( ""Raheem Sterling"",26, 43.9),
		 new Mittelfeldspieler ( ""Mason Mount"",22, 66.9),
		 new Sturmspieler ( ""Harry Kane"",30,1.5),
		 new Sturmspieler ( ""Emile Heskey"",38, 3.5)
	 };	 
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland,england);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
    
   double rkz=0;
   
   for (int i =0 ; i<mannschaft.length; i++){
	   if (mannschaft[i].getPosition()==""Abwehrspieler""){
		   rkz+=((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
	   }
	   else{
		   rkz+=0;
	   }
   }
   return rkz;
  }

  
  
  public static void ausgeben(Fussballspieler [] mannschaft){
	String aus = """";  
 	for (int i=0; i<mannschaft.length;i++){
		if (i<(mannschaft.length-1)){
			aus+=mannschaft[i].toString()+""\n"";
		}
		else if (i==(mannschaft.length-1)){
			aus+=mannschaft[i].toString();
		}

	}
   	System.out.println(aus);
  }
  
  
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	  
	  
	 double m1 = roteKartenZaehlen(mannschaft1);
	 double m2 = roteKartenZaehlen(mannschaft2);
	 
	
	if (m2>m1){
		System.out.println(""Mannschaft 1 gewinnt!"");
	}
	else if (m1==m2){
		System.out.println(""Unentschieden!"");
	}
	else {
		System.out.println(""Mannschaft 2 gewinnt!"");
	}
  }
}","public class TestBus{
	
	public static void main (String [] args){
		Bus [] b = {
			new Bus (10,4),
			new Reisebus(12,3,true),
			new Linienbus(20,2,true,34),
			new Linienbus(20,2,true,34)
		};
		
		b[0].tuerOeffnen(2);
		b[0].tuerOeffnen(0);
		b[2].tuerOeffnen(1);
		
		b[0].tuerSchliessen(2);
		
		for(int i=0;i<b.length;i++){
			System.out.println(b[i].istFahrbereit());
		}

		for (int i=0; i<b.length;i++){
			if(b[i].getTyp()==""Reisebus""){
				for(int j=0;j<(b.length-1);j++){
					b[i].tuerSchliessen(j);
				}
			}
		}

	}
	
}"
Babst,"Robert Martin",babst@campus.tu-berlin.de,Beendet,"3. Juli 2020  17:05","3. Juli 2020  20:14","3 Stunden 8 Minuten","19,50","Es wird die Methode der Sub-Klasse aufgerufen","Zeile 1 : Klasse A hat keinen Konstruktor",Object,"die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","//Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
//Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
public static void main(String[] args){
   
  // Arrays definieren
  Fussballspieler obj[] = new Fussballspieler[11];
  Fussballspieler obj2[] = new Fussballspieler[11];
  
 //Werte einfügen
	
		obj[0] = new Mittelfeldspieler (""Bernd"", 20,2.0);
		obj[1] = new Mittelfeldspieler (""Klaus"", 21,3.0);
		obj[2] = new Mittelfeldspieler (""Herbert"", 22,3.0);
		obj[3] = new Sturmspieler (""Holger"", 24,6.0);
		obj[4] = new Sturmspieler (""Fred"", 25,6.0);
		obj[5] = new Sturmspieler (""Ulli"", 26,8.0);
		obj[6] = new Abwehrspieler (""Norbert"", 20,8.0);
		obj[7] = new Abwehrspieler (""Krause"", 25,4.0);
		obj[8] = new Abwehrspieler (""Bodo"", 28,7.0);
		obj[9] = new Abwehrspieler (""Joseph"", 19,2.0);
		obj[10] = new Torwart (""Uwe"", 19,1.0);
		
		obj2[0] = new Mittelfeldspieler (""Bernd"", 20,3.0);
		obj2[1] = new Mittelfeldspieler (""Klaus"", 21,3.0);
		obj2[2] = new Mittelfeldspieler (""Herbert"", 22,7.0);
		obj2[3] = new Sturmspieler (""Holger"", 24,3.0);
		obj2[4] = new Sturmspieler (""Fred"", 25,5.0);
		obj2[5] = new Sturmspieler (""Ulli"", 26,8.0);
		obj2[6] = new Abwehrspieler (""Norbert"", 20,8.0);
		obj2[7] = new Abwehrspieler (""Krause"", 25,2.0);
		obj2[8] = new Abwehrspieler (""Bodo"", 28,5.0);
		obj2[9] = new Abwehrspieler (""Joseph"", 19,4.0);
		obj2[10] = new Torwart (""Uwe"", 19, 1.0);
 System.out.println(""Rote Karten: "" + roteKartenZaehlen(obj));
 System.out.println();
 ausgeben(obj);
 System.out.println();
 fussballspielen(obj, obj2);
}

	//hier wird mithilfe von instanceof geprüft, um welche Unterklasse von Fussballspieler
	//es sich handelt, ohne, dass Konflikte im Klassenaufruf geschehen, da ohnehin nur
	//auf getAnzahlRK zugegriffen wird, falls fb[i] ein Abwehrspieler ist.
public static double roteKartenZaehlen(Fussballspieler[] fb){
 
	double c = 0;
	for(int i = 0; i < fb.length; i++) {
		if(fb[i] instanceof Abwehrspieler) {
			c+= ((Abwehrspieler) fb[i]).getAnzahlRoteKartenJeSpiel();
		};
	}
	return c;
}

	//in jeder Unterklasse wird die Methode der Superklasse toString überschrieben,
	//sodass für jedes Aufrufen von toString auf den Fussballspielerobjekten in fb jeweils
	//die toString-Methode benutzt wird, die die Unterklasse, der das Objekt fb[i] angehört,
	//zur Verfügung stellt.
public static void ausgeben(Fussballspieler[] fb){
	for(int i = 0; i < fb.length; i++) {
	    System.out.println(fb[i].toString());
	}
}
public static void fussballspielen(Fussballspieler[] f1, Fussballspieler[] f2){
 
		double s1 = 0.0;
		double s2 = 0.0;
		
		for(int i = 0; i < f1.length; i++) {
			if(f1[i] instanceof Abwehrspieler) {
				s1-= ((Abwehrspieler) f1[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(f2[i] instanceof Abwehrspieler) {
				s2-= ((Abwehrspieler) f2[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(f1[i] instanceof Sturmspieler) {
				s1+= ((Sturmspieler) f1[i]).getToreJeSpiel();
			}
			if(f2[i] instanceof Sturmspieler) {
				s2+= ((Sturmspieler) f2[i]).getToreJeSpiel();
			}
			if(f1[i] instanceof Torwart) {
				s1-= ((Torwart) f1[i]).getGegentoreJeSpiel();
			}
			if(f2[i] instanceof Torwart) {
				s2-= ((Torwart) f2[i]).getGegentoreJeSpiel();
			}
			if(f1[i] instanceof Mittelfeldspieler) {
				s1+= ((Mittelfeldspieler) f1[i]).getPaesseJeSpiel();
			}
			if(f2[i] instanceof Mittelfeldspieler) {
				s2+= ((Mittelfeldspieler) f2[i]).getPaesseJeSpiel();
			}
		}
		if(s1<s2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		if(s2==s1) {
			System.out.println(""Unentschieden!"");
		}
		if(s2<s1){
			System.out.println(""Mannschaft 1 gewinnt!"");			
		}
}
}","public class TestBus {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Bus b[] = new Bus[4];
		b[0] = new Bus (20,1);
		b[1] = new Reisebus (24,3, true);
		b[2] = new Linienbus (30, 2, false, 15);
		
		b[2].tuerOeffnen(2);
		b[1].tuerOeffnen(1);
		b[1].tuerOeffnen(2);
		System.out.println(b[1].istFahrbereit());
		b[0].tuerSchliessen(1);		
		b[2].tuerSchliessen(1);
		b[2].tuerSchliessen(2);		
		b[1].tuerSchliessen(1);
		b[1].tuerSchliessen(2);
		b[1].tuerSchliessen(3);
		System.out.println(b[0].istFahrbereit());
		System.out.println(b[1].istFahrbereit());
		System.out.println(b[2].istFahrbereit());
		System.out.println(b[2].equals(b[0]));
		System.out.println(b[2].equals(b[1]));
		Linienbus k = new Linienbus(30,2,false,15);
		System.out.println(k.equals(b[0]));
		System.out.println(k.equals(b[1]));
		System.out.println(k.equals(b[2]));

		

	}

}"
Ketterer,"Alexandra Maria",d86d1fb1fbbc20ac1b65dd874d10479c,Beendet,"3. Juli 2020  21:47","5. Juli 2020  22:35","2 Tage","13,59","die Klasse Hund erbt von der Klasse Tier",Object,super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String[] args){
    	Bus bus = new Bus(30, 2);
    	Linienbus linienbus = new Linienbus(40, 3, true, 10);
    	Reisebus reisebus = new Reisebus(50, 3, true);
    	Bus[] busse = new Bus[3];
    	busse[0] = bus;
    	busse[1] = linienbus;
    	busse[2] = reisebus; 

    	Linienbus copyLinienbus = new Linienbus(40, 3, true, 10);

    	// tueren oeffnen und auf fahrbereitschaft checken
    	for (int i = 0; i < busse.length; i ++) {
        (busse[i]).tuerOeffnen(0);
        busse[i].istFahrbereit();
    	}

    	// Busse fahrbereit machen
    	for (int i = 0; i < busse.length; i ++) {
       	for (int j = 0; j < busse[i].getAnzahlTueren(); j ++) {
           busse[i].tuerSchliessen(j);
       	}    
    	}

   	 	linienbus.equals(bus);

    	linienbus.equals(reisebus);

    	// vergleiche Linienbus mit buss-array
    	for (int i = 0; i < busse.length; i ++) {
        copyLinienbus.equals(busse[i]);
    	}
    }
}","// TestMannschaft
public class TestMannschaft {
    public static void main(String[] args) {
        Fussballspieler[] mannschaft1 = new Fussballspieler[11]; 
        mannschaft1[0] =  new Abwehrspieler(""m1s1"", 22, 2.9);
        mannschaft1[1] =  new Abwehrspieler(""m1s2"", 22, 2.8);
        mannschaft1[2] =  new Abwehrspieler(""m1s3"", 22, 2.7);
        mannschaft1[3] =  new Mittelfeldspieler(""m1s4"", 22, 4);
        mannschaft1[4] =  new Mittelfeldspieler(""m1s5"", 22, 4);
        mannschaft1[5] =  new Mittelfeldspieler(""m1s6"", 22, 4);
        mannschaft1[6] =  new Mittelfeldspieler(""m1s7"", 22, 4);
        mannschaft1[7] =  new Sturmspieler(""m1s8"", 22, 2);
        mannschaft1[8] =  new Sturmspieler(""m1s9"", 22, 6);
        mannschaft1[9] =  new Sturmspieler(""m1s10"", 22, 4);
        mannschaft1[10] =  new Torwart(""m1s11"", 22, 2);

        mannschaft1[0].geburtstagFeiern();

        Fussballspieler[] mannschaft2 = new Fussballspieler[11]; 
        mannschaft2[0] =  new Abwehrspieler(""m2s1"", 22, 2.9);
        mannschaft2[1] =  new Abwehrspieler(""m2s2"", 22, 2.9);
        mannschaft2[2] =  new Abwehrspieler(""m2s3"", 22, 2.9);
        mannschaft2[3] =  new Mittelfeldspieler(""m2s4"", 22, 2);
        mannschaft2[4] =  new Mittelfeldspieler(""m2s5"", 22, 2);
        mannschaft2[5] =  new Mittelfeldspieler(""m2s6"", 22, 2);
        mannschaft2[6] =  new Mittelfeldspieler(""m2s7"", 22, 2);
        mannschaft2[7] =  new Sturmspieler(""m2s8"", 22, 2);
        mannschaft2[8] =  new Sturmspieler(""m2s9"", 22, 2);
        mannschaft2[9] =  new Sturmspieler(""m2s10"", 22, 2);
        mannschaft2[10] =  new Torwart(""m2s11"", 22, 2);



        System.out.println(""Rote Karten: "" + roteKartenZaehlen(mannschaft1));
        System.out.println();
        ausgeben(mannschaft1);
        System.out.println();
        fussballspielen(mannschaft1, mannschaft2);
    }
    
    // Polymorphie kommt hier zur Anwendung, da als Object ein Array als mannschaft uebergeben wird, 
    // aber dann nur die roten Karten des Abwehrspielers gezaehlt werden. Diese koennen einfach
    // in einer if-Abfrage mit instanceof aus der Oberklasse Fussballspieler herausgefiltert werden.
    public static double roteKartenZaehlen(Fussballspieler[] mannschaft) {
        double anzahlRoteKartenJeSpiel = 0;
        for (int i = 0; i < mannschaft.length; i ++) {
            if (mannschaft[i] instanceof Abwehrspieler) {
                anzahlRoteKartenJeSpiel = anzahlRoteKartenJeSpiel + ((Abwehrspieler)mannschaft[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return anzahlRoteKartenJeSpiel;
    } 
    
    // Polymorphie kommt hier nur in der jeweiligen toString methode zur Anwendung,
    // da dort je nach Unterklasse des Fussballspielers eine ueberschriebene toString-Methode aufgerufen wird,
    // die dann den Mittelfeldspieler, Abwehrspieler, Sturmspieler oder Torwart klassifizieren.
    public static void ausgeben(Fussballspieler[] mannschaft) {
        for (int i = 0; i < mannschaft.length; i ++) {
            System.out.println(mannschaft[i]);
        }
    }
    
    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
        double spielstaerkeMannschaft1 = 0;
        for (int i = 0; i < mannschaft1.length; i ++) {
            if (mannschaft1[i] instanceof Abwehrspieler) {
                spielstaerkeMannschaft1 = spielstaerkeMannschaft1 - ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
            } else if (mannschaft1[i] instanceof Mittelfeldspieler) {
                spielstaerkeMannschaft1 = spielstaerkeMannschaft1 + ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
            } else if (mannschaft1[i] instanceof Sturmspieler) {
                spielstaerkeMannschaft1 = spielstaerkeMannschaft1 + ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
            } else if (mannschaft1[i] instanceof Torwart) {
                spielstaerkeMannschaft1 = spielstaerkeMannschaft1 - ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
            }
        }

        double spielstaerkeMannschaft2 = 0;
        for (int i = 0; i < mannschaft2.length; i ++) {
            if (mannschaft2[i] instanceof Abwehrspieler) {
                spielstaerkeMannschaft2 = spielstaerkeMannschaft2 - ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
            } else if (mannschaft2[i] instanceof Mittelfeldspieler) {
                spielstaerkeMannschaft2 = spielstaerkeMannschaft2 + ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
            } else if (mannschaft2[i] instanceof Sturmspieler) {
                spielstaerkeMannschaft2 = spielstaerkeMannschaft2 + ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
            } else if (mannschaft2[i] instanceof Torwart) {
                spielstaerkeMannschaft2 = spielstaerkeMannschaft2 - ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
            }
        }

        if (spielstaerkeMannschaft1 > spielstaerkeMannschaft2) {
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if (spielstaerkeMannschaft1 == spielstaerkeMannschaft2) {
            System.out.println(""Unentschieden!"");
        } else {
            System.out.println(""Mannschaft 2 gewinnt!"");
        }
    }
}"
Frickenstein,Fabian,fabian.frickenstein@campus.tu-berlin.de,Beendet,"3. Juli 2020  22:33","5. Juli 2020  17:40","1 Tag 19 Stunden","5,86",Object,super,"Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Spitzer,Jonas,jonas.spitzer@campus.tu-berlin.de,Beendet,"4. Juli 2020  10:20","4. Juli 2020  10:26","5 Minuten 26 Sekunden","5,50","Zeile 6,7 : super(); müsste vor x=0; stehen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Es wird die Methode der Super-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Lieberknecht,"Jan David",j.lieberknecht@campus.tu-berlin.de,Beendet,"4. Juli 2020  11:06","5. Juli 2020  23:56","1 Tag 12 Stunden","9,38",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier","Zeile 1 : Klasse A hat keinen Konstruktor","Es wird die Methode der Super-Klasse aufgerufen",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {

	public static void main(String[] args) {
		Bus[] busse = new Bus[3];
		busse[0] = new Bus(25, 4);
		busse[1] = new Reisebus(30, 2, true);
		busse[2] = new Linienbus(20, 3, true, 30);
		busse[0].tuerOeffnen(3);
		busse[1].tuerOeffnen(2);
		busse[2].tuerOeffnen(1);
		for(Bus b: busse) {
		    b.istFahrbereit();
		}
		busse[1].tuerSchliessen(2);
		busse[2].equals(busse[0]);
		busse[1].equals(busse[2]);
		
		Linienbus lb = new Linienbus(20, 3, true, 30);
		for(Bus b: busse) {
			b.equals(lb);
		}
		

	}

}",-
Schadach,Lennart,9a05e9adb808bc929c34a0637bc4bd04,Beendet,"4. Juli 2020  11:28","5. Juli 2020  23:54","1 Tag 12 Stunden","4,73","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier","Es wird die Methode der Super-Klasse aufgerufen","Zeile 1 : Klasse A hat keinen Konstruktor",Object,super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","package test10;

public class TestBus {

	public static void main(String[] args) {
		Bus[] busse = new Bus[3];
		busse[0] = new Bus(25, 4);
		busse[1] = new Reisebus(30, 2, true);
		busse[2] = new Linienbus(20, 3, true, 30);
		busse[0].tuerOeffnen(3);
		busse[1].tuerOeffnen(2);
		busse[2].tuerOeffnen(1);
		for(Bus b: busse) {
			System.out.println(""ist fahrbereit: "" + b.istFahrbereit());
		}
		busse[1].tuerSchliessen(2);
		busse[2].equals(busse[0]);
		busse[1].equals(busse[2]);
		
		Linienbus lb = new Linienbus(20, 3, true, 30);
		for(Bus b: busse) {
			System.out.println(""lb equals b: "" + b.equals(lb));
		}
		

	}

}",-
"Rodriguez Martin",Alvaro,alvaro.rodriguezmartin@campus.tu-berlin.de,Beendet,"4. Juli 2020  12:58","5. Juli 2020  22:31","1 Tag 9 Stunden","14,35","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 1 : Klasse A hat keinen Konstruktor","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",Java,super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft{
    public static void main(String[] args){
        
        // Arrays definieren
        Fussballspieler[] deutschland = new Fussballspieler[11];
        Fussballspieler[] spanien = new Fussballspieler[11];
       
        spanien[0] = new Torwart(""Iker"", 40, 3);
        spanien[1] = new Abwehrspieler(""Anton"", 26, 6);
        spanien[2] = new Abwehrspieler(""Matthias"", 33, 4);
        spanien[3] = new Abwehrspieler(""Etoo"", 40, 8);
        spanien[4] = new Abwehrspieler(""Dani"", 32, 1);
        spanien[5] = new Mittelfeldspieler(""Ekaitz"", 29, 9);
        spanien[6] = new Mittelfeldspieler(""Endika"", 26, 7);
        spanien[7] = new Mittelfeldspieler(""Pepe"", 45, 2);
        spanien[8] = new Sturmspieler(""Toni"", 34, 2);
        spanien[9] = new Sturmspieler(""Paco"", 25, 6);
        spanien[10] = new Sturmspieler(""Fernando"", 35, 3);
        
        deutschland[0] = new Torwart(""Ronaldo"", 55, 6);
        deutschland[1] = new Abwehrspieler(""Alonso"", 40, 9);
        deutschland[2] = new Abwehrspieler(""David"", 45, 10);
        deutschland[3] = new Abwehrspieler(""Batang"", 45, 20);
        deutschland[4] = new Abwehrspieler(""Nose"", 50, 30);
        deutschland[5] = new Mittelfeldspieler(""Tampo"", 46, 39);
        deutschland[6] = new Mittelfeldspieler(""Idiota"", 47, 20);
        deutschland[7] = new Mittelfeldspieler(""Chapo"", 40, 20);
        deutschland[8] = new Sturmspieler(""Inutil"", 45, 0);
        deutschland[9] = new Sturmspieler(""Cachis"", 40, 1);
        deutschland[10] = new Sturmspieler(""Yuyu"", 45, 3);
    

  
        System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
        System.out.println();
        ausgeben(spanien);
        System.out.println();
        fussballspielen(deutschland, spanien);
    }
  
    public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
        double roteKartenGesamt = 0;

        for(int i = 0; i < mannschaft.length; i++){
            if (mannschaft[i] instanceof Abwehrspieler){
                roteKartenGesamt += ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiel();
            }
        }
        return roteKartenGesamt;
    }

    public static void ausgeben(Fussballspieler[] mannschaft){
        for(int i = 0; i < mannschaft.length; i++){
            System.out.print(mannschaft[i].toString());
        }
    }

    public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
        int scoreMannschaft1 = 0;
        int scoreMannschaft2 = 0;
        int alter1 = 0;
        int alter2 = 0;
        double rot1 = roteKartenZaehlen(mannschaft1);
        double rot2 = roteKartenZaehlen(mannschaft2);
        double paesse1 = 0;
        double paesse2 = 0;
        double ggtore1 = 0;
        double ggtore2 = 0;
        double tore1 = 0;
        double tore2 = 0;

        for (int i = 0; i < mannschaft1.length; i ++){
            alter1 = mannschaft1[i].getAlter();
            if(mannschaft1[i] instanceof Mittelfeldspieler){
                paesse1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
            }
            else if(mannschaft1[i] instanceof Torwart){
                ggtore1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
            }
            else if (mannschaft1[i] instanceof Sturmspieler){
                tore1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
            }
        }
        for (int i = 0; i < mannschaft2.length; i ++){
            alter2 = mannschaft2[i].getAlter();
            if(mannschaft2[i] instanceof Mittelfeldspieler){
                paesse2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
            }
            else if(mannschaft2[i] instanceof Torwart){
                ggtore2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
            }
            else if (mannschaft2[i] instanceof Sturmspieler){
                tore2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
            }
        }

        if(alter1 < alter2){
            scoreMannschaft1 += 1;
        } 
        else if (alter1 > alter2){
            scoreMannschaft2 += 1;
        } else {
            scoreMannschaft1 += 0;
            scoreMannschaft2 += 0;
        }

        if (rot1 < rot2){
            scoreMannschaft1 += 1;
        } 
        else if (rot1 > rot2){
            scoreMannschaft2 += 1;
        } else {
            scoreMannschaft1 += 0;
            scoreMannschaft2 += 0;
        }

        if (paesse1 > paesse2){
            scoreMannschaft1 += 1;
        } 
        else if (paesse1 < paesse2){
            scoreMannschaft2 += 1;
        } else {
            scoreMannschaft1 += 0;
            scoreMannschaft2 += 0;
        }

        if (ggtore1 < ggtore2){
            scoreMannschaft1 += 1;
        } 
        else if (ggtore1 > ggtore2){
            scoreMannschaft2 += 1;
        } else {
            scoreMannschaft1 += 0;
            scoreMannschaft2 += 0;
        }

        if (tore1 > tore2){
            scoreMannschaft1 += 1;
        } 
        else if (tore1 < tore2){
            scoreMannschaft2 += 1;
        }else {
            scoreMannschaft1 += 0;
            scoreMannschaft2 += 0;
        }

        if (scoreMannschaft1 > scoreMannschaft2){
            System.out.println(""Mannschaft 1 gewinnt!"");
        } else if(scoreMannschaft2 > scoreMannschaft1){
            System.out.println(""Mannschaft 2 gewinnt!"");
        } else {
            System.out.println(""Unentschieden!"");
        }
    }
  }","public class TestBus {

    public static void main(String[] args) {
        
        Bus[] arr = { 
            new Bus(30, 4),
            new Linienbus(15, 3, true, 20),
            new Reisebus(40, 2, true)
        };

        arr[0].tuerOeffnen(2);
        arr[1].tuerOeffnen(1);
        arr[2].tuerOeffnen(2);

        System.out.println(arr[0].istFahrbereit());
        System.out.println(arr[1].istFahrbereit());
        System.out.println(arr[2].istFahrbereit());

        for (int i = 0; i < arr.length; i++){
            for(int j = 0; j < arr[i].getAnzahlTueren(); j++){
                arr[i].tuerSchliessen(j);
            }
        }

        System.out.println(arr[0].istFahrbereit());
        System.out.println(arr[1].istFahrbereit());
        System.out.println(((Reisebus) arr[2]).istFahrbereit());

        System.out.println(arr[1].equals(arr[0]));
        System.out.println(arr[1].equals(arr[2]));

        Reisebus rb = new Reisebus(12, 4, true);
        
        for(int i = 0; i<arr.length; i++){
            System.out.println(rb.equals(arr[i]));
        }

    }
    
}"
Helmers,Ole,591d0ea52f428f351a9f706c6a7f6295,Beendet,"4. Juli 2020  13:29","5. Juli 2020  16:40","1 Tag 3 Stunden","15,13","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es wird die Methode der Sub-Klasse aufgerufen","Zeile 6,7 : super(); müsste vor x=0; stehen",extends,Object,"die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){

Fussballspieler[] deutschland;
deutschland = new Fussballspieler[11];
deutschland[0] = new Torwart(""name0"", 11, 1000000d);
deutschland[1] = new Abwehrspieler(""name1"", 12, 100000000000d);
deutschland[2] = new Mittelfeldspieler(""name2"", 13, 123000d);
deutschland[3] = new Sturmspieler(""name3"", 10004, 23400d);
deutschland[4] = new Abwehrspieler(""name4"", 15, 1d);
deutschland[5] = new Mittelfeldspieler(""name5"", 16, 574d);
deutschland[6] = new Sturmspieler(""name6"", 17, 3456d);
deutschland[7] = new Abwehrspieler(""name7"", 18, 1d);
deutschland[8] = new Mittelfeldspieler(""name8"", 19, 3457d);
deutschland[9] = new Sturmspieler(""name9"", 20, 3416d);
deutschland[10] = new Sturmspieler(""name10"", 21, 3465d);

Fussballspieler[] Team2;
Team2 = new Fussballspieler[11];
Team2[0] = new Torwart(""name1u0"", 101, 60000d);
Team2[1] = new Abwehrspieler(""name1u1"", 102, 70100d);
Team2[2] = new Mittelfeldspieler(""name1u2"", 103, 12300d);
Team2[3] = new Sturmspieler(""name1u3"", 104, 23400d);
Team2[4] = new Abwehrspieler(""name1u4"", 105, 86500d);
Team2[5] = new Mittelfeldspieler(""name1u5"", 106, 57400d);
Team2[6] = new Sturmspieler(""name1u6"", 107, 345600d);
Team2[7] = new Abwehrspieler(""name1u7"", 108, 354700d);
Team2[8] = new Mittelfeldspieler(""name1u8"", 109, 345700d);
Team2[9] = new Sturmspieler(""name1u9"", 200, 341600d);
Team2[10] = new Sturmspieler(""name1u10"", 201, 346500d);


    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(Team2);
    System.out.println();
    fussballspielen(deutschland, Team2);
  }

  public static double roteKartenZaehlen(Fussballspieler[] array){
  double f=0d;
    for(int i=0; i<array.length; i++) {
    if (array[i] instanceof Abwehrspieler){ //instanceof prüft nach richtigem Objekttyp
        f+=((Abwehrspieler)array[i]).getAnzahlRoteKartenJeSpiel();
    }
    }
  return f;
  }
  public static void ausgeben(Fussballspieler[] array){

    for(int i=0; i<array.length; i++) {
    System.out.println(array[i].toString()); //Spezialisierte Methode wird überschrieben bei erzeugung
    }
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
  double f1=0d;
      for(int i=0; i<mannschaft1.length; i++) {
    if(mannschaft1[i] instanceof Abwehrspieler) {
    f1+=((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
    f1+=((Abwehrspieler)mannschaft1[i]).getAlter();
    }
    else if(mannschaft1[i] instanceof Mittelfeldspieler) {
    f1+=((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
    f1+=((Mittelfeldspieler)mannschaft1[i]).getAlter();
    }
    else if(mannschaft1[i] instanceof Sturmspieler) {
    f1+=((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
    f1+=((Sturmspieler)mannschaft1[i]).getAlter();
    }
    else { //Torwart
    f1+=((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
    f1+=((Torwart)mannschaft1[i]).getAlter();
    }

    }
  double f2=0d;
    for(int i=0; i<mannschaft2.length; i++) {
    if(mannschaft2[i] instanceof Abwehrspieler) {
    f2+=((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
    f2+=((Abwehrspieler)mannschaft2[i]).getAlter();
    }
    else if(mannschaft2[i] instanceof Mittelfeldspieler) {
    f2+=((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
    f2+=((Mittelfeldspieler)mannschaft2[i]).getAlter();
    }
    else if(mannschaft2[i] instanceof Sturmspieler) {
    f2+=((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
    f2+=((Sturmspieler)mannschaft2[i]).getAlter();
    }
    else { //Torwart
    f2+=((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
    f2+=((Torwart)mannschaft2[i]).getAlter();
    }

    }

  if(f1>f2) {
  System.out.println(""Mannschaft 1 gewinnt!"");
  }
  else if(f1==f2) {
  System.out.println(""Unentschieden!"");
  }
  else if(f1<f2) {
  System.out.println(""Mannschaft 2 gewinnt!"");
  }
}

}","class TestBus {
public static void main(String[] args) {
Bus[] testArray;
testArray = new Bus[6];
testArray[0] = new Bus(10,0);
testArray[1] = new Reisebus(100,3,true);
testArray[2] = new Linienbus(200,2,false,15);
testArray[3] = new Bus(10,5);
testArray[4] = new Reisebus(500,1,false);
testArray[5] = new Linienbus(200,2,false,15);

testArray[0].tuerOeffnen(0);
testArray[1].tuerOeffnen(1);
testArray[2].tuerOeffnen(2);
testArray[3].tuerOeffnen(3);
testArray[4].tuerOeffnen(4);
testArray[5].tuerOeffnen(5);
System.out.println();
System.out.println(testArray[0].istFahrbereit());
System.out.println(testArray[1].istFahrbereit());
System.out.println(testArray[2].istFahrbereit());
System.out.println(testArray[3].istFahrbereit());
System.out.println(testArray[4].istFahrbereit());
System.out.println(testArray[5].istFahrbereit());
for(int i=0;i<testArray[1].getAnzahlTueren();i++){
    if (testArray[1].tueren[i].getOffen()) {
    testArray[1].tuerSchliessen(i+1);
    }
}
for(int i=0;i<testArray[4].getAnzahlTueren();i++){
    if (testArray[4].tueren[i].getOffen()) {
    testArray[4].tuerSchliessen(i+1);
    }
}
System.out.println();
System.out.println(testArray[0].istFahrbereit());
System.out.println(testArray[1].istFahrbereit());
System.out.println(testArray[2].istFahrbereit());
System.out.println(testArray[3].istFahrbereit());
System.out.println(testArray[4].istFahrbereit());
System.out.println(testArray[5].istFahrbereit());
System.out.println();
System.out.println(testArray[2].equals(testArray[0]));
System.out.println(testArray[2].equals(testArray[1]));
System.out.println();


Bus testReisebus = new Reisebus(500,1,false);
for(int i=0; i<6; i++){
System.out.println(testArray[i].equals(testReisebus));
}

}
}"
"Mailhos Nogues","Lucas Fel",642dc2fc24f2168530e7533d52e691ae,Beendet,"4. Juli 2020  15:56","6. Juli 2020  00:05","1 Tag 8 Stunden","0,00",-,-,-,-,-,-,-,-,-
Cai,Yingchu,yingchu.cai@campus.tu-berlin.de,Beendet,"5. Juli 2020  10:40","5. Juli 2020  23:55","13 Stunden 15 Minuten","12,86",Object,"Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus{
    public static void main(String[] args){
            Bus[] bus = {
                new Bus(12,3),
                new Reisebus(12,3,true),
                new Linienbus(12,3,true,6),
            };
            bus[0].tuerOeffnen(2);
            bus[1].tuerOeffnen(2);
            bus[2].tuerOeffnen(2);
            if(bus[0].istTuerOffen() == false) bus[0].istFahrbereit();
            if(bus[1].istTuerOffen() == false) bus[1].istFahrbereit();
            if(bus[2].istTuerOffen() == false){
               bus[2].istFahrbereit(); 
            }else{
                for(int i=1; i<=bus[2].getAnzahlTueren();i++){
                    bus[2].tuerSchliessen(i);
                } 
            }
            bus[0].tuerSchliessen(2);
            bus[1].tuerSchliessen(2);
            bus[2].equals(bus[0]);
            bus[2].equals(bus[0]);
            Bus r = new Linienbus(12,3,true,6);
            r.equals(bus[0]);
            r.equals(bus[1]);
            r.equals(bus[2]);
    }
}","public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
    Fussballspieler[] Berlin = new Fussballspieler[11];
    Fussballspieler[] Munich = new Fussballspieler[11];
    //Werte einfügen
    Berlin[0] = new Torwart(""cyc"",24,5.0);
    Munich[0] = new Torwart(""wzy"",23,3.0);
    Berlin[1] = new Sturmspieler(""hzh"",25,4.1);
    Berlin[2] = new Sturmspieler(""lbw"",25,2.0);
    Berlin[3] = new Sturmspieler(""wxy"",25,1.3);
    Munich[1] = new Sturmspieler(""xjy"",20,1.0);
    Munich[2] = new Sturmspieler(""xly"",20,1.7);
    Munich[3] = new Sturmspieler(""ljy"",20,3.0);
    Berlin[4] = new Mittelfeldspieler(""www"",26,19.7);
    Berlin[5] = new Mittelfeldspieler(""wow"",26,30.7);
    Berlin[6] = new Mittelfeldspieler(""wzw"",26,9.7);
    Berlin[7] = new Mittelfeldspieler(""wcw"",26,20.7);
    Munich[4] = new Mittelfeldspieler(""waw"",26,20.7);
    Munich[5] = new Mittelfeldspieler(""wdw"",26,20.7);
    Munich[6] = new Mittelfeldspieler(""wfw"",26,20.7);
    Munich[7] = new Mittelfeldspieler(""wjw"",26,20.7);
    Berlin[8] = new Abwehrspieler(""sdf"",29,0.3);
    Berlin[9] = new Abwehrspieler(""suf"",29,0.2);
    Berlin[10] = new Abwehrspieler(""stf"",29,0.11);
    Munich[8] = new Abwehrspieler(""saf"",29,0.43);
    Munich[9] = new Abwehrspieler(""ssf"",29,0.29);
    Munich[10] = new Abwehrspieler(""ytf"",29,0.01);
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(Berlin));
    System.out.println(""Sehr wichtige Rolle."");
    ausgeben(Berlin);
    System.out.println(""auch sehr wichtige Rolle."");
    fussballspielen(Berlin,Munich);
  }

  public static double roteKartenZaehlen(Fussballspieler[] DL){
    double sum = 0.0;
    for(int i=0;i<DL.length;i++){
        if(DL[i] instanceof Abwehrspieler){
            sum = sum +((Abwehrspieler)DL[i]).getAnzahlRoteKartenJeSpiel();
        }
    }
    return sum;
  }
  public static void ausgeben(Fussballspieler[] DL){
    for(int i=0;i<DL.length;i++){
        System.out.println(DL[i]);
    }
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double sum1 = 0.0;
    double sum2 = 0.0;
    for(int i=1;i<mannschaft1.length;i++){
        if(mannschaft1[i] instanceof Torwart) sum1= sum1+((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
        if(mannschaft1[i] instanceof Sturmspieler) sum1= sum1+((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
        if(mannschaft1[i] instanceof Mittelfeldspieler) sum1= sum1+((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
        if(mannschaft1[i] instanceof Abwehrspieler) sum1= sum1-((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
    }
    for(int i=1;i<mannschaft2.length;i++){
        if(mannschaft2[i] instanceof Torwart) sum2= sum2+((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
        if(mannschaft2[i] instanceof Sturmspieler) sum2= sum2+((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
        if(mannschaft2[i] instanceof Mittelfeldspieler) sum2= sum2+((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
        if(mannschaft2[i] instanceof Abwehrspieler) sum2= sum2-((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
    }
    if(sum1==sum2) System.out.println(""Unentschieden!"");
    if(sum1<sum2) System.out.println(""Mannschaft 2 gewinnt!"");
    if(sum1>sum2) System.out.println(""Mannschaft 1 gewinnt!"");
  }
}"
Sucuoglu,Alain,a.sucuoglu@campus.tu-berlin.de,Beendet,"5. Juli 2020  10:52","5. Juli 2020  22:55","12 Stunden 3 Minuten","11,63","Zeile 7 : super(); müsste this(); heißen","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",Object,super,"Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {  
    public static void main(String[] args) {
        
        
         Bus [ ] buese = new Bus[3];
         
         buese[0]=new Bus(10,4);
         buese[1]=new Linienbus(4, 2, true, 5);
         buese[2]=new Reisebus(15, 30, true);
         
         for(int i=0;i<buese.length;i++)
             System.out.println(buese[i].getAnzahlTueren());
         
         buese[0].tuerOeffnen(2);
         buese[0].tuerOeffnen(3);
         buese[0].tuerOeffnen(6);
         buese[0].tuerOeffnen(1);
         
         buese[2].tuerOeffnen(12);
         buese[2].tuerOeffnen(4);
         buese[2].tuerOeffnen(7);
         buese[2].tuerOeffnen(1);
         
         
         for(int i=0;i<buese.length;i++)
             System.out.println(""BUS-""+(i+1)+""\t""+buese[i].istFahrbereit());
         
         for(int i=0;i<buese.length;i++)
         {
             for(int j=0;j<buese[i].getAnzahlTueren();j++)
             {
                 buese[i].tuerSchliessen(j);
             }
         }
         
         
         
         System.out.println(""Linien-Bus\t""+buese[1].equals(buese[0]));
         
         
         System.out.println(""Linien-Reise\t""+buese[1].equals(buese[2]));
         
         Reisebus reisebus=new Reisebus(15, 30, true);
         
         
         for(int i=0;i<buese.length;i++)
         {
             System.out.println(""Bus-""+i+""\t""+buese[i].equals(reisebus));
         }
    }
    
}",-
Schran,"Konrad Henning",k.schran@campus.tu-berlin.de,Beendet,"5. Juli 2020  11:39","5. Juli 2020  20:04","8 Stunden 24 Minuten","17,85",Object,"Zeile 6,7 : super(); müsste vor x=0; stehen","die Klasse Hund erbt von der Klasse Tier",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	
	public static void main(String[] args) {
		Bus[] busse = new Bus[3];
		busse[0] = new Bus(30,3);
		busse[1] = new Reisebus(50,2,true);
		busse[2] = new Linienbus(40,4,true,20);
		busse[0].tuerOeffnen(2);
		busse[1].tuerOeffnen(1);
		busse[2].tuerOeffnen(4);
		if(busse[0].istFahrbereit()== true) System.out.println(""Bus ist fahrbereit."");
		if(busse[1].istFahrbereit()== true) System.out.println(""Reisebus ist fahrbereit."");
		if(busse[2].istFahrbereit()== true) System.out.println(""Linienbus ist fahrbereit."");
		busse[1].tuerSchliessen(1);
		busse[1].tuerSchliessen(2);
		if(busse[1].istFahrbereit()== true) System.out.println(""Reisebus ist jetzt fahrbereit."");
		if(!busse[2].equals(busse[0])) System.out.println(""nicht gleich"");
		if(!busse[2].equals(busse[1])) System.out.println(""auch nicht gleich"");
		Linienbus lb = new Linienbus(40,4,true,20);
		for(int i = 0; i < busse.length; i++) {
			if(!busse[i].equals(lb)) System.out.println(""nicht gleich"");
			else if(busse[i].equals(lb)) System.out.println(""gleicher Bus"");
		}
	}
	
}//Hier kommt die TestBus Klasse rein","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     Fussballspieler[] deutschland = new Fussballspieler[11];
	 Fussballspieler[] m1 = new Fussballspieler[11];
     
    //Werte einfügen
	deutschland[0] = new Torwart(""Neuer"", 30, 1.0);
	deutschland[1] = new Abwehrspieler(""Lahm"", 40, 0.03);
	deutschland[2] = new Abwehrspieler(""Boateng"", 35, 0.1);
	deutschland[3] = new Abwehrspieler(""Mertesacker"", 22, 0.17);
	deutschland[4] = new Mittelfeldspieler(""Goetze"", 25, 23.2);
	deutschland[5] = new Mittelfeldspieler(""Oezil"", 27, 42.1);
	deutschland[6] = new Mittelfeldspieler(""Schweinsteiger"", 32, 33.6);
	deutschland[7] = new Mittelfeldspieler(""Khedira"", 31, 39.2);
	deutschland[8] = new Sturmspieler(""Mueller"", 34, 2.1);
	deutschland[9] = new Sturmspieler(""Klose"", 41, 1.9);
	deutschland[10] = new Sturmspieler(""Podolski"", 36, 1.4);
	
	m1[0] = new Torwart(""Kahn"", 53, 2.7);
	m1[1] = new Abwehrspieler(""Meier"", 40, 0.3);
	m1[2] = new Abwehrspieler(""Maradonna"", 35, 0.2);
	m1[3] = new Abwehrspieler(""Ronaldo"", 22, 0.9);
	m1[4] = new Mittelfeldspieler(""Ronaldinho"", 25, 23.2);
	m1[5] = new Mittelfeldspieler(""Schulz"", 27, 52.1);
	m1[6] = new Mittelfeldspieler(""Beckham"", 42, 38.6);
	m1[7] = new Mittelfeldspieler(""Gomez"", 31, 19.2);
	m1[8] = new Sturmspieler(""Modeste"", 34, 2.91);
	m1[9] = new Sturmspieler(""Robben"", 41, 0.9);
	m1[10] = new Sturmspieler(""Hummels"", 36, 0.4);
	
	deutschland[9].geburtstagFeiern();
	
    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println(""Rote Karten: ""+ roteKartenZaehlen(m1));
    ausgeben(deutschland);
    //System.out.println();
    fussballspielen(deutschland, m1);
  }

  public static double roteKartenZaehlen(Fussballspieler[] mannschaft1){
	double summe = 0.0;
    for(int i = 0; i < mannschaft1.length; i++) {
		if(mannschaft1[i] instanceof Abwehrspieler) {
			Abwehrspieler sp = (Abwehrspieler) mannschaft1[i];
			summe += sp.getAnzahlRoteKartenJeSpiel(); 
		}
	} //instanceof sorgt dafür dass nur abwehrspieler gewahhlt werden, da nur sie das Attribut rotekarte haben
	return summe;
   /* bitte implementieren */
  }
  public static void ausgeben(Fussballspieler[] mannschaft1){
    for(int i = 0; i < mannschaft1.length; i++) {
		System.out.println(mannschaft1[i].toString());
	}
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    int a = 0;
	int b = 0;
	double c = 0.0;
	double d = 0.0;
	if(roteKartenZaehlen(mannschaft1) > roteKartenZaehlen(mannschaft2)) a += 1;
	else b += 1;
	Torwart t1 = (Torwart) mannschaft1[0];
	Torwart t2 = (Torwart) mannschaft2[0];
	if(t1.getGegentoreJeSpiel() < t2.getGegentoreJeSpiel()) a += 1;
	else b += 1;
	for(int i = 0; i < mannschaft1.length; i++) {
		if(mannschaft1[i] instanceof Mittelfeldspieler) {
			Mittelfeldspieler sp = (Mittelfeldspieler) mannschaft1[i];
			c += sp.getPaesseJeSpiel(); 
		}
	}
	for(int i = 0; i < mannschaft2.length; i++) {
		if(mannschaft2[i] instanceof Mittelfeldspieler) {
			Mittelfeldspieler sp = (Mittelfeldspieler) mannschaft2[i];
			d += sp.getPaesseJeSpiel(); 
		}
	}
	if(c > d) a += 1;
	else b += 1;
	c = 0.0;
	d = 0.0;
	for(int i = 0; i < mannschaft1.length; i++) {
		if(mannschaft1[i] instanceof Sturmspieler){
			Sturmspieler sp = (Sturmspieler) mannschaft1[i];
		 c += sp.getToreJeSpiel(); 
		}
	}
	for(int i = 0; i < mannschaft2.length; i++) {
		if(mannschaft2[i] instanceof Sturmspieler) {
			Sturmspieler sp = (Sturmspieler) mannschaft2[i];
			d += sp.getToreJeSpiel(); 
		}
	}
	if(c > d) a += 1;
	else b += 1;
	if(a > b) System.out.println(""Mannschaft 1 gewinnt!"");
	if(a < b) System.out.println(""Mannschaft 2 gewinnt!"");
	if(a == b) System.out.println(""Unentschieden!"");
   /* bitte implementieren */
  }
}"
Schäffner,"Maximilian Paul",m.schaeffner@campus.tu-berlin.de,Beendet,"5. Juli 2020  12:15","5. Juli 2020  23:36","11 Stunden 21 Minuten","5,50","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","die Klasse Hund erbt von der Klasse Tier",super,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {

    public static void main(String[] args){
      int[] array = new int[3];


    }


}",-
Cheung,"Alison Dzi",alison.d.cheung@campus.tu-berlin.de,Beendet,"5. Juli 2020  12:42","5. Juli 2020  23:05","10 Stunden 22 Minuten","4,05","die Klasse Hund erbt von der Klasse Tier",instanceof,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 5 : Methode B() hat keinen Rückgabewert","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {15. <sub>kannSprechen:} Dropzone 5 -> {16. <sub>boolean} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {6. <sub>gewicht:} Dropzone 8 -> {4. <sub>double} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {12. <sub>schnabelfarbe:} Dropzone 19 -> {3. <sub>String} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestMannschaft {

	public static void main(String[] args) {

		Fussballspieler[] team1 = new Fussballspieler[11];
		Fussballspieler[] team2 = new Fussballspieler[11];
		
		Torwart torwart11 = new Torwart(""Peter"", 29, 0.5);
		Torwart torwart21 = new Torwart(""Hans"", 29, 0.5);

		Abwehrspieler spieler11 = new Abwehrspieler(""Markus"", 20, 0);
		Abwehrspieler spieler12 = new Abwehrspieler(""Hans"", 22, 0.1);
		Abwehrspieler spieler13 = new Abwehrspieler(""Lauch"", 24, 0.4);
		Abwehrspieler spieler14 = new Abwehrspieler(""Louis"",23, 10);
		Abwehrspieler spieler21 = new Abwehrspieler(""Ali"", 22, 1);
		Abwehrspieler spieler22 = new Abwehrspieler(""Ahmed"",30, 5.2);
		Abwehrspieler spieler23 = new Abwehrspieler(""Baba"", 34, 3);
		
		
		Mittelfeldspieler spieler15 = new Mittelfeldspieler(""Yaya"", 23, 10);
		Mittelfeldspieler spieler16 = new Mittelfeldspieler(""Kevin"",27,  10);
		Mittelfeldspieler spieler17 = new Mittelfeldspieler(""Tobi"", 29, 10);
		Mittelfeldspieler spieler18 = new Mittelfeldspieler(""Denni"", 24, 10);
		Mittelfeldspieler spieler24 = new Mittelfeldspieler(""Vincent"", 22, 10);
		Mittelfeldspieler spieler25 = new Mittelfeldspieler(""Luiza"", 26, 10);
		Mittelfeldspieler spieler26 = new Mittelfeldspieler(""Ich"", 31, 10);
		Mittelfeldspieler spieler27 = new Mittelfeldspieler(""Viktor"", 30, 10);
		Mittelfeldspieler spieler28 = new Mittelfeldspieler(""Jacky"", 21, 10);
		
		Sturmspieler spieler19 = new Sturmspieler(""Merkel"", 29, 1);
		Sturmspieler spieler110 = new Sturmspieler(""Donald"", 28, 7);
		Sturmspieler spieler29 = new Sturmspieler(""Hans"", 21, 5);
		Sturmspieler spieler210 = new Sturmspieler(""Peter"", 33, 2);
		
		team1[0] = torwart11;
		team1[1] = spieler11;
		team1[2] = spieler12;
		team1[3] = spieler13;
		team1[4] = spieler14;
		team1[5] = spieler15;
		team1[6] = spieler16;
		team1[7] = spieler17;
		team1[8] = spieler18;
		team1[9] = spieler19;
		team1[10] = spieler110;
		
		team2[0] = torwart21;
		team2[1] = spieler21;
		team2[2] = spieler22;
		team2[3] = spieler23;
		team2[4] = spieler24;
		team2[5] = spieler25;
		team2[6] = spieler26;
		team2[7] = spieler27;
		team2[8] = spieler28;
		team2[9] = spieler29;
		team2[10] = spieler210;
		
		System.out.println(""Rote Karten: "" + roteKartenZaehlen(team1));
	    System.out.println();
	    ausgeben(team1);
	    System.out.println();
	    fussballspielen(team1, team2);
	}
	public static double roteKartenZaehlen(Fussballspieler[] mannschaft){
		double roteKarten = 0;
		for(int i=0; i<mannschaft.length; i++) {			
			if(mannschaft[i] instanceof Abwehrspieler) {
				roteKarten = roteKarten + ((Abwehrspieler) mannschaft[i]).getAnzahlRoteKartenJeSpiel();
			}
		}return roteKarten;
	}
	public static void ausgeben(Fussballspieler[] mannschaft){
	    
	   for(int i=0; i<mannschaft.length; i++) {
		   
		   System.out.println(mannschaft[i].toString());
		   if(mannschaft[i] instanceof Torwart) {
			   System.out.println(((Torwart) mannschaft[i]).toString());
		   }
		   if(mannschaft[i] instanceof Abwehrspieler) {
			   System.out.println( ((Abwehrspieler) mannschaft[i]).toString());
		   }
		   if(mannschaft[i] instanceof Mittelfeldspieler) {
			   System.out.println(((Mittelfeldspieler) mannschaft[i]).toString());
		   }
		   if(mannschaft[i] instanceof Sturmspieler) {
			   System.out.println(((Sturmspieler) mannschaft[i]).toString());
		   }
	   }
	}
	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
	    
		double bewertung1 = 0;
		double bewertung2 = 0;
		for(int i=0; i<mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Torwart) {
				bewertung1 = bewertung1 + ((Torwart) mannschaft1[i]).getGegentoreJeSpiel();
			}
			if(mannschaft1[i] instanceof Abwehrspieler) {
				bewertung1 = bewertung1 + ((Abwehrspieler) mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft1[i] instanceof Mittelfeldspieler) {
				bewertung1 = bewertung1 - ((Mittelfeldspieler) mannschaft1[i]).getPaesseJeSpiel();
			}
			if(mannschaft1[i] instanceof Sturmspieler) {
				bewertung1 = bewertung1 - ((Sturmspieler) mannschaft1[i]).getToreJeSpiel();
			}
		}
		
		for(int i=0; i<mannschaft2.length; i++) {
			if(mannschaft2[i] instanceof Torwart) {
				bewertung2 = bewertung2 + ((Torwart) mannschaft2[i]).getGegentoreJeSpiel();
			}
			if(mannschaft2[i] instanceof Abwehrspieler) {
				bewertung2 = bewertung2 + ((Abwehrspieler) mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft2[i] instanceof Mittelfeldspieler) {
				bewertung2 = bewertung2 - ((Mittelfeldspieler) mannschaft2[i]).getPaesseJeSpiel();
			}
			if(mannschaft2[i] instanceof Sturmspieler) {
				bewertung2 = bewertung2 - ((Sturmspieler) mannschaft2[i]).getToreJeSpiel();
			}
		}
		
		if(bewertung1 > bewertung2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}else if(bewertung1 < bewertung2) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		}else {
			System.out.println(""Unentschieden!"");
		}
	}
}",-
Sakran,Shebli,shebli.sakran@campus.tu-berlin.de,Beendet,"5. Juli 2020  13:28","5. Juli 2020  22:23","8 Stunden 54 Minuten","10,94","Zeile 6,7 : super(); müsste vor x=0; stehen","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen",super,Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","die Klasse Hund erbt von der Klasse Tier","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String[] args) {
		Bus[] b = {
		new Bus(50, 2),
		new Reisebus(80, 3, true),
		new Linienbus(60, 4, true, 30)
		};
	
		b[0].tuerOeffnen(1);
		b[1].tuerOeffnen(2);
		b[1].tuerOeffnen(3);
		b[2].tuerOeffnen(3);
		System.out.println(b[0].istFahrbereit());
		System.out.println(((Reisebus)b[1]).istFahrbereit());
		System.out.println(((Linienbus)b[2]).istFahrbereit());
		b[0].istFahrbereit();
		((Reisebus)b[1]).tuerSchliessen(2);
		((Reisebus)b[1]).tuerSchliessen(3);
		System.out.println(((Reisebus)b[1]).istFahrbereit());
		((Linienbus)b[2]).istFahrbereit();
	}
}","public class TestMannschaft {
	
	public static void main(String[] args) {
		Fussballspieler[] deutschland = {
			new Torwart(""Thor"", 23, 4),
			new Abwehrspieler(""Hans"", 27, 1),
			new Abwehrspieler(""Manfred"", 21, 0),
			new Abwehrspieler(""Jonas"", 19, 2),
			new Mittelfeldspieler(""Jan"", 28, 3),
			new Mittelfeldspieler(""Klaus"", 28, 1),
			new Mittelfeldspieler(""Markus"", 22, 4),
			new Mittelfeldspieler(""Lukas"", 20, 3),
			new Sturmspieler(""Julius"", 19, 6),
			new Sturmspieler(""Juergen"", 25, 3),
			new Sturmspieler(""Lauriz"", 18, 2)
		};

		Fussballspieler[] england = {
			new Torwart(""Kilo"", 23, 3),
			new Abwehrspieler(""Hunsil"", 27, 1),
			new Abwehrspieler(""Larry"", 21, 0),
			new Abwehrspieler(""Martin"", 19, 2),
			new Mittelfeldspieler(""Ken"", 28, 3),
			new Mittelfeldspieler(""Klausi"", 28, 1),
			new Mittelfeldspieler(""Guenter"", 22, 4),
			new Mittelfeldspieler(""Sali"", 20, 3),
			new Sturmspieler(""Mane"", 19, 6),
			new Sturmspieler(""Uli"", 25, 3),
			new Sturmspieler(""Tom"", 18, 2)
		};
	
		((Fussballspieler)deutschland[0]).geburtstagFeiern();
		System.out.println(""Rote Karten: ""+roteKartenZaehlen(deutschland));
		System.out.println();
		ausgeben(deutschland);
		System.out.println();
		fussballspielen(deutschland, england);
	}

 /*Die Klasse Fussballspieler ist polymorph, da es nicht eindeutig ist ob der
    *Fussballspieler ein Torwart, Abwehrspieler, Mittelfeldspieler oder Sturmspieler ist.
    */

	public static double roteKartenZaehlen(Fussballspieler[] Mannschaft) {
		double roteKartenGesamt=0; 
		for(int i=0; i < Mannschaft.length; i++) {

/* Die Methode getanzahlRoteKartenJeSpiel kann nur aufgerufen werden wenn es sich um
	* einen Abwehrspieler handelt, weswegen hier erstmal geprüft wird ob der Spiele der 
	* Mannschaft ein Abwehrspieler ist und wenn es einer ist, dann muss dieser Spieler erstmal zu einem
	* Abwehrspieler gecastet werden damit dann auch die get-Methode aufgerufen werden kann.
	*/

			if(Mannschaft[i] instanceof Abwehrspieler) {
				roteKartenGesamt += ((Abwehrspieler)Mannschaft[i]).getAnzahlRoteKartenJeSpiel();
			}
		}
		return roteKartenGesamt;
	}	

	public static void ausgeben(Fussballspieler[] Mannschaft) {
		for(int i=0; i < Mannschaft.length; i++) {

/* Hier muss für jeden Fussballspieler des Arrays Mannschaft geprüft werden, welche Position der Spieler spielt, um den
* entsprechenden toString Befehl aufrufen zu können, da der Befehl für jede Position etwas anderes ausgibt.
* Je nachdem welche Position der Fussballspieler spielt, wird der Spieler dementsprechend gecastet damit der richtige
* toString Befehl ausgeführt wird.
*/

			if(Mannschaft[i] instanceof Torwart) {
				System.out.println(((Torwart)Mannschaft[i]).toString());
			}
			if(Mannschaft[i] instanceof Abwehrspieler) {
				System.out.println(((Abwehrspieler)Mannschaft[i]).toString());
			}
			if(Mannschaft[i] instanceof Sturmspieler) {
				System.out.println(((Sturmspieler)Mannschaft[i]).toString());
			}
			if(Mannschaft[i] instanceof Mittelfeldspieler) {
				System.out.println(((Mittelfeldspieler)Mannschaft[i]).toString());
			}
		}
	}

	public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2) {
		double gesamtRoteKarten1=0;
		double gesamtRoteKarten2=0;
		double gesamtPaesse1=0;
		double gesamtPaesse2=0;
		double gesamtTore1=0;
		double gesamtTore2=0;
		double gesamtGegentore1=0;
		double gesamtGegentore2=0;
		int score1 = 0;
		int score2 = 0;
		for(int i=0; i < mannschaft1.length; i++) {
			if(mannschaft1[i] instanceof Torwart) {
				gesamtGegentore1 += ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
			}
			if(mannschaft1[i] instanceof Abwehrspieler) {
				gesamtRoteKarten1 += ((Abwehrspieler)mannschaft1[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft1[i] instanceof Mittelfeldspieler) {
				gesamtPaesse1 += ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
			}
			if(mannschaft1[i] instanceof Sturmspieler) {
				gesamtTore1 += ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
			}
		}
		for(int i=0; i < mannschaft2.length; i++) {
			if(mannschaft2[i] instanceof Torwart) {
				gesamtGegentore2 += ((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
			}
			if(mannschaft2[i] instanceof Abwehrspieler) {
				gesamtRoteKarten2 += ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
			}
			if(mannschaft2[i] instanceof Mittelfeldspieler) {
				gesamtPaesse2 += ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
			}
			if(mannschaft2[i] instanceof Sturmspieler) {
				gesamtTore2 += ((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
			}
		}
		if(gesamtRoteKarten1 > gesamtRoteKarten2) {
			score1 -= 1;
		}
		if(gesamtRoteKarten1 < gesamtRoteKarten2) {
			score2 -= 1;
		}
		if(gesamtPaesse1 > gesamtPaesse2) {
			score1 += 1;
		}
		if(gesamtPaesse1 < gesamtPaesse2) {
			score2 += 1;
		}
		if(gesamtTore1 > gesamtTore2) {
			score1 += 1;
		}
		if(gesamtTore1 < gesamtTore2) {
			score2 += 1;
		}
		if(gesamtGegentore1 > gesamtGegentore2) {
			score1 -= 1;
		}
		if(gesamtGegentore1 < gesamtGegentore2) {
			score2 -=1;
		}
		if(score1 > score2) {
			System.out.println(""Mannschaft 1 gewinnt!"");
		}
		if(score1 < score2) {
			System.out.println(""Mannschaft 2 gewinnt!"");
		}
		if(score1 == score2) {
			System.out.println(""Unentschieden!"");
		}
	}
}"
Rodehau,Sonja,d6035d85bae05ed2327da04224475a97,Beendet,"5. Juli 2020  14:08","5. Juli 2020  17:57","3 Stunden 48 Minuten","4,73","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",extends,"die Klasse Hund erbt von der Klasse Tier","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Arimbawa,"Made Niro Aditya",arimbawa@campus.tu-berlin.de,Beendet,"5. Juli 2020  14:38","5. Juli 2020  23:28","8 Stunden 49 Minuten","10,15","Zeile 6,7 : super(); müsste vor x=0; stehen","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen","die Klasse Hund erbt von der Klasse Tier",Object,instanceof,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {10. <sub>int} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
		Fussballspieler[] deutschland = {
			new Torwart(""Manuel Neuer"", 34, 3.4),
			new Abwehrspieler(""Robin Koch"", 23,  0.20),
			new Abwehrspieler(""Jonas Hector"", 30,  0.17),
			new Abwehrspieler(""Matthias Ginter"", 26,  0.4),
			new Mittelfeldspieler(""Toni Kroos"", 30, 11.2),
			new Mittelfeldspieler(""Joshua Kimmich"", 25, 7),
			new Mittelfeldspieler(""Julian Brandt"", 24, 8),
			new Mittelfeldspieler(""Sebastian Rudy"", 30, 5.5),
			new Mittelfeldspieler(""Leon Goretzka"", 25, 12),
			new Sturmspieler(""Timo Werner"", 24, 2.5),
			new Sturmspieler(""Serge Gnabry"", 24, 1.7)
			};
		
		
		Fussballspieler[] France = {
			new Torwart(""Alphonse Areola"", 27, 3.2),
			new Abwehrspieler(""Benjamin Pavard"", 24,  0.25),
			new Abwehrspieler(""Presnel Kimpembe"", 24,  0.3),
			new Abwehrspieler(""Kurt Zouma"", 25,  0.5),
			new Mittelfeldspieler(""Tanguy Ndombele"", 23, 10.4),
			new Mittelfeldspieler(""Corentin Tolisso"", 25, 6),
			new Mittelfeldspieler(""N'Golo Kanté"", 29, 7),
			new Mittelfeldspieler(""Matteo Guendouzi"", 21, 4.4),
			new Mittelfeldspieler(""Moussa Sissoko"", 30, 14),
			new Sturmspieler(""Antoine Griezmann"", 29, 1.1),
			new Sturmspieler(""Thomas Lemar"", 24, 2.7)
			}; ;
		
     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(deutschland);
    System.out.println();
    fussballspielen(deutschland, France); 
  }

  public static double roteKartenZaehlen(Fussballspieler[] x){
    double sum = 0; 
	for (int i = 0 ; i< x.length;i++){
		if (x[i] instanceof Abwehrspieler){
			sum = sum + ((Abwehrspieler)x[i]).getAnzahlRoteKartenJeSpiel();
		}
	}
	
	return sum; 
   /* bitte implementieren */
  }
  public static void ausgeben(Fussballspieler[] x){
	  for (int i= 0; i< x.length;i++){  
		  if (x[i] instanceof Abwehrspieler){ System.out.println(((Abwehrspieler)x[i]).toString());}
		  if (x[i] instanceof Mittelfeldspieler){ System.out.println(((Mittelfeldspieler)x[i]).toString());}
		  if (x[i] instanceof Sturmspieler){ System.out.println(((Sturmspieler)x[i]).toString());}
		  if (x[i] instanceof Torwart){ System.out.println(((Torwart)x[i]).toString());}	  
		  }
	  }
    
	 public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    double sum1 = 0; 
	double sum2 = 0;
	double gpasse1 = 0; 
	double gpasse2 = 0;
	double tore1 = 0; 
	double tore2 = 0; 
	double Spielstaerke1 = 0;
	double Spielstaerke2 = 0; 
	for (int i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Abwehrspieler){
			sum1 = sum1 + ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
		}	
	}
	for ( int i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Abwehrspieler){
			sum2 = sum2 + ((Abwehrspieler)mannschaft2[i]).getAnzahlRoteKartenJeSpiel();
		}	
	}
	if (sum1 <= sum2){ 
		if (sum1 == sum2) {}
			else { 
			Spielstaerke1 = Spielstaerke1 + 2;
			}
	}
	else { Spielstaerke2 = Spielstaerke2 + 2;
	}
	
	for (int  i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Mittelfeldspieler){
			gpasse1 = gpasse1 + ((Mittelfeldspieler)mannschaft1[i]).getPaesseJeSpiel();
		}	
	}
	for ( int i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Mittelfeldspieler){
			gpasse2 = gpasse2 + ((Mittelfeldspieler)mannschaft2[i]).getPaesseJeSpiel();
		}	
	}
	if (gpasse1 <= gpasse2){ 
		if (gpasse1 == gpasse2) {}
		else { Spielstaerke2 = Spielstaerke2 + 2;}
	}
	else { Spielstaerke1 = Spielstaerke1 + 2;
	}

  for ( int i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Sturmspieler){
			tore1 = tore1 + ((Sturmspieler)mannschaft1[i]).getToreJeSpiel();
		}	
	}
	for (int  i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Sturmspieler){
			tore2 = tore2 +((Sturmspieler)mannschaft2[i]).getToreJeSpiel();
		}	
	}
  for ( int i = 0 ; i< mannschaft1.length;i++){
		if (mannschaft1[i] instanceof Torwart){
			tore2 = tore2 - ((Torwart)mannschaft1[i]).getGegentoreJeSpiel();
		}	
	}
	for ( int i = 0 ; i< mannschaft2.length;i++){
		if (mannschaft2[i] instanceof Torwart){
			tore1 = tore1 -((Torwart)mannschaft2[i]).getGegentoreJeSpiel();
		}	
	}
  
  if (tore1 <= tore2){ 
		if (tore1 == tore2) {}
		else { Spielstaerke2 = Spielstaerke2 + 5;}
	}
	else { Spielstaerke1 = Spielstaerke1 + 5;}
  
   /* bitte implementieren */

  
  if (Spielstaerke1 <= Spielstaerke2){
	  if (Spielstaerke1 == Spielstaerke2){ 
	  System.out.println(""Unentschieden!"");
	  }
	  else {
		   System.out.println(""Mannschaft 2 gewinnt!""); 
	  }
  }
  else {
	   System.out.println(""Mannschaft 1 gewinnt!""); 
  }
  
  }
  
}","//Hier kommt die TestBus Klasse rein
public class TestBus{ 
    public static void main(String[] args){ 
        Bus[] m1 = {
            new Bus(20,3),
            new Reisebus(15,2,true),
            new Linienbus(40,4,true,20)
        };
        m1[0].tueren[1].oeffnen(); 
        m1[2].tueren[4].oeffnen();
        m1[0].istFahrbereit();
        ((Linienbus)m1[2]).istFahrbereit();
        for (int x = 0 ;x< m1.length;x++){
            for (int i = 0 ; i < m1[x].tueren.length;i++){
                m1[x].tueren[i].schliessen();
            }
        }
        
    ((Bus)m1[0]).istFahrbereit();
    ((Reisebus)m1[1]).istFahrbereit(); 
    ((Linienbus)m1[2]).istFahrbereit(); 
    
    ((Linienbus)m1[2]).equals(m1[0]);
    ((Reisebus)m1[1]).equals(m1[2]);
    
    Reisebus m2 = new Reisebus(15,2,true);
    for (int x = 0;x< m1.length;x++){
        ((Reisebus)m2).equals(m1[x]);
    }
        
    }
}"
Priebe,"Jessica Eva Sophie",jessica.priebe@campus.tu-berlin.de,Beendet,"5. Juli 2020  16:09","5. Juli 2020  17:12","1 Stunde 2 Minuten","5,50",super,"die Klasse Hund erbt von der Klasse Tier","Zeile 1 : Klasse A hat keinen Konstruktor","Es wird die Methode der Sub-Klasse aufgerufen",Object,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Baumann,"Florian Stefan",florian.baumann@campus.tu-berlin.de,Beendet,"5. Juli 2020  16:19","5. Juli 2020  17:21","1 Stunde 2 Minuten","4,14","Es wird die Methode der Sub-Klasse aufgerufen","die Klasse Hund erbt von der Klasse Tier",super,Object,"Zeile 1 : Klasse A hat keinen Konstruktor","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {6. <sub>gewicht:} Dropzone 8 -> {10. <sub>int} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {13. <sub>spannweite:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {15. <sub>kannSprechen:} Dropzone 16 -> {16. <sub>boolean} Dropzone 17 -> {4. <sub>double} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Hasan,"Fareza Aditya",f.hasan@campus.tu-berlin.de,Beendet,"5. Juli 2020  16:53","5. Juli 2020  23:52","6 Stunden 59 Minuten","6,76","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",extends,"die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen",Object,"Es wird die Methode der Sub-Klasse aufgerufen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {12. <sub>schnabelfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {15. <sub>kannSprechen:} Dropzone 11 -> {16. <sub>boolean} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {10. <sub>int} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","//Hier kommt die TestBus Klasse rein

public class TestBus{
	public static void main(String[] args){
		Bus[] bussen = new Bus[3];
		bussen[0] = new Bus(10,2);
		bussen[1] = new Reisebus(20,3,true);
		bussen[2] = new Linienbus(50,4,true,10);
		
		System.out.println(bussen[0].equals(bussen[1]));
		System.out.println(bussen[1].equals(bussen[2]));
		
		Reisebus r1 = new Reisebus(20,3,true);
		Linienbus l1 = new Linienbus(50,4,true,10);
		
		
		System.out.println(r1.equals(bussen[0]));
		System.out.println(r1.equals(bussen[1]));
		System.out.println(r1.equals(bussen[2]));
		
		System.out.println(l1.equals(bussen[0]));
		System.out.println(l1.equals(bussen[1]));
		System.out.println(l1.equals(bussen[2]));
	}
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
      
     // Arrays definieren
     
     
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(......);
    System.out.println();
    fussballspielen(................);
  }

  public static double roteKartenZaehlen(.................){
    
   /* bitte implementieren */
  }
  public static void ausgeben(...){
    
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  }
}"
Johnson,"Sidney Leroy",9d2970050515c12929e1066fa64b9062,Beendet,"5. Juli 2020  18:17","5. Juli 2020  23:58","5 Stunden 41 Minuten","4,86",Java,"die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus{
 
Bus[] b = { new Linienbus(20, 10, true, 7),
new Reisebus(10,5, true),
new Bus(6,3)
};

tuerOeffnen(1);
b.istFahrbereit();
b.tuerSchliessen(1);
}",-
Elsing,Matti,d31112f6ec4a207f1067be64a7903f10,Beendet,"5. Juli 2020  18:20","5. Juli 2020  18:28","7 Minuten 50 Sekunden","3,82",extends,"Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Es kommt ein Fehler, da man zuerst casten muss, um die überschriebene Methode der Sub-Klasse aufzurufen",Main,"die Klasse Hund erbt von der Klasse Tier","Zeile 6,7 : super(); müsste vor x=0; stehen","Dropzone 1 -> {1. Tier} Dropzone 2 -> {6. <sub>gewicht:} Dropzone 3 -> {4. <sub>double} Dropzone 4 -> {2. <sub>bezeichnung:} Dropzone 5 -> {3. <sub>String} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {10. <sub>int} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {10. <sub>int} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
Wowtscherk,Marcel,marcel.wowtscherk@campus.tu-berlin.de,Beendet,"5. Juli 2020  19:29","5. Juli 2020  20:50","1 Stunde 20 Minuten","9,24","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 5 : Methode B() hat keinen Rückgabewert",super,"die Klasse Hund erbt von der Klasse Tier",Object,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {5. Saeugetier} Dropzone 7 -> {7. <sub>fellfarbe:} Dropzone 8 -> {3. <sub>String} Dropzone 9 -> {8. Elefant} Dropzone 10 -> {9. <sub>ruessellaenge:} Dropzone 11 -> {4. <sub>double} Dropzone 12 -> {11. Vogel} Dropzone 13 -> {12. <sub>schnabelfarbe:} Dropzone 14 -> {14. Papagei} Dropzone 15 -> {13. <sub>spannweite:} Dropzone 16 -> {4. <sub>double} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {15. <sub>kannSprechen:} Dropzone 19 -> {16. <sub>boolean} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}","public class TestBus {
	public static void main(String[] args){
    	Bus bus = new Bus(30, 2);
    	Linienbus linienbus = new Linienbus(40, 3, true, 10);
    	Reisebus reisebus = new Reisebus(50, 3, true);
    	Bus[] busse = new Bus[3];
    	busse[0] = bus;
    	busse[1] = linienbus;
    	busse[2] = reisebus; 

    	Linienbus copyLinienbus = new Linienbus(40, 3, true, 10);

    	// tueren oeffnen und auf fahrbereitschaft checken
    	
        busse[0].tuerOeffnen(0);
		 busse[0].istFahrbereit();
    	


    	// Busse fahrbereit machen
    	for (int i = 0; i < busse.length; i ++) {
       	for (int j = 0; j < busse[i].getAnzahlTueren(); j ++) {
           busse[i].tuerSchliessen(j);  
    	}
    	}


    	for (int i = 0; i < busse.length; i ++) {
       

           System.out.println(busse[i].istTuerOffen());      
    	}

   	 	linienbus.equals(bus);

    	linienbus.equals(reisebus);

    	// vergleiche Linienbus mit buss-array
    	for (int i = 0; i < busse.length; i ++) {
        copyLinienbus.equals(busse[i]);
    	}
    }
}","// Hier ist ein Teil der TestMannschaft Klasse bereits vorgegeben.Vervollständigen Sie diese der Aufgabe entsprechend
// Denkt daran, dass ihr die anderen 5 Klassen hochladen müsst.

public class TestMannschaft{
  public static void main(String[] args){
       Abwehrspieler abwehrspieler = new Abwehrspieler(""Albert"", 22, 2.9);
    Sturmspieler sturmspieler = new Sturmspieler(""Simon"", 22, 2.9);
    Mittelfeldspieler mittelfeldspieler = new Mittelfeldspieler(""Martin"", 22, 2.9);
    Torwart torwart = new Torwart(""Timo"", 22, 2.9);
     // Arrays definieren
     
      abwehrspieler.toString();
        mittelfeldspieler.toString();
        sturmspieler.toString();
        torwart.toString();
    //Werte einfügen

    System.out.println(""Rote Karten: "" + roteKartenZaehlen(deutschland));
    System.out.println();
    ausgeben(......);
    System.out.println();
    fussballspielen(................);
  }

  public static double roteKartenZaehlen(.................){
    
   /* bitte implementieren */
  }
  public static void ausgeben(...){
    
   /* bitte implementieren */
  }
  public static void fussballspielen(Fussballspieler[] mannschaft1, Fussballspieler[] mannschaft2){
    
   /* bitte implementieren */
  }
}"
Zhou,Ying,zhou.1@campus.tu-berlin.de,Beendet,"5. Juli 2020  19:58","5. Juli 2020  20:59","1 Stunde 1 Minute","0,00",Java,-,-,extends,-,-,-,-,-
Singh,Abhishek,abhishek.singh@campus.tu-berlin.de,Beendet,"5. Juli 2020  21:42","6. Juli 2020  00:05","2 Stunden 23 Minuten","2,73",Main,"die Klasse Hund erbt von der Klasse Tier","Es kommt ein Fehler, da Objektvariablen der Super-Klasse keine Objekte von Sub-Klassen aufnehmen können","Dies ruft innerhalb einer Subklasse den Konstruktor der Superklasse auf.","Zeile 5 : Methode B() hat keinen Rückgabewert",super,"Dropzone 1 -> {1. Tier} Dropzone 2 -> {2. <sub>bezeichnung:} Dropzone 3 -> {3. <sub>String} Dropzone 4 -> {6. <sub>gewicht:} Dropzone 5 -> {4. <sub>double} Dropzone 6 -> {11. Vogel} Dropzone 7 -> {15. <sub>kannSprechen:} Dropzone 8 -> {16. <sub>boolean} Dropzone 9 -> {14. Papagei} Dropzone 10 -> {12. <sub>schnabelfarbe:} Dropzone 11 -> {3. <sub>String} Dropzone 12 -> {5. Saeugetier} Dropzone 13 -> {7. <sub>fellfarbe:} Dropzone 14 -> {8. Elefant} Dropzone 15 -> {15. <sub>kannSprechen:} Dropzone 16 -> {16. <sub>boolean} Dropzone 17 -> {3. <sub>String} Dropzone 18 -> {9. <sub>ruessellaenge:} Dropzone 19 -> {10. <sub>int} Dropzone 20 -> {17. Fisch} Dropzone 21 -> {18. <sub>lebtImSalzwasser:} Dropzone 22 -> {16. <sub>boolean}",-,-
