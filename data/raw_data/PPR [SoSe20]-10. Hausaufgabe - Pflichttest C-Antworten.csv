Nachname,Vorname,Antwort 8,Antwort 9
Name_310,VName_310,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist {
	int size;
	char** elems;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char* buf) {
	if (!al) exit(1);
	al->size++;
	al->elems = (char**)realloc(al->elems, al->size * sizeof(int*));
	al->elems[al->size - 1] = malloc(strlen(buf) * sizeof(char));
	strcpy(al->elems[al->size - 1], buf);
	return;
}

void arrlist_del_item(Arrlist* al, int i) {
	if (!al) exit(1);
	if (al->size == 0) return;
	for (int j = i + 1; j < al->size; j++) al->elems[j -1] = al->elems[j];
	al->size--;
	al->elems = (char**)realloc(al->elems, al->size * sizeof(int*));
	return;
}

void arrlist_free(Arrlist* al) {
	for (int i = 0; i < al->size; i++) {
		free(al->elems[i]);
	}
	free(al);
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q'){
			printf(""Verlassen"");
			break;
		}
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>

typedef struct student {
	char vorname[21];
	char nachname[21];
	int array[5];
}Student;

void student_einlesen(Student* p_stud) {
	for (int i = 0; i < 5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].nachname);
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for (int j = 0; j < 5; j++) {
			printf(""%i: "", j + 1);
			scanf(""%i"", &p_stud[i].array[j]);
		}
		printf(""\n"");
	}
}

void student_ausgeben(Student* p_stud) {
	for (int i = 0; i < 5; i++) {
		printf(""Student: %s %s\n"", p_stud[i].vorname, p_stud[i].nachname);
		printf(""Anzahl Punkte: %i\n\n"", p_stud[i].array[0] + p_stud[i].array[1] + p_stud[i].array[2] + p_stud[i].array[3] + p_stud[i].array[4]);
	}
}

int main() {
	Student p_stud[5];
	student_einlesen(p_stud);
	student_ausgeben(p_stud);
}"
Name_297,VName_297,"#include <stdio.h>

typedef struct student{
	char Vornamen[21];
	char Nachnamen[21];
	int Punkte[5];
} Student;

void student_einlesen(Student* p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->Vornamen);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->Nachnamen);
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int j = 0; j < 5; j++){
			printf(""%i: "", j+1);
			scanf(""%i"", &p_stud->Punkte[j]);
		}
		printf(""\n"");
}

void student_ausgeben(Student* p_student){
		printf(""Student: %s %s"", p_student->Vornamen, p_student->Nachnamen);
		int summe = 0;
		for(int j = 0; j < 5; j++){
			summe += p_student->Punkte[j];
		}
		printf(""\nAnzahl Punkte: %i\n\n"", summe);	
}

int main(){
	Student Studierende[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&Studierende[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&Studierende[i]);
	}
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist{
	char** elems;
	int size;
} Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

void arrlist_add(Arrlist* Liste, char* Ware){
	if(Liste == NULL) exit(1);
	int str_Laenge = strlen(Ware);
	char** tmp1 = realloc(Liste->elems, sizeof(char*) * (Liste->size+1));
	if(!tmp1){
		free(Liste->elems);
	}
	Liste->elems = tmp1;
	char* tmp2 = realloc(Liste->elems[Liste->size], sizeof(char) * (str_Laenge+1));
	if(!tmp2){
		free(Liste->elems);
	}
	Liste->elems[Liste->size] = tmp2;
	strcpy(Liste->elems[Liste->size], Ware);
	Liste->size++;
}

void arrlist_del_item(Arrlist* Liste, int Nummer){
	if(Liste == NULL) exit(1);	
	if(Liste->size == 0) return;
	if(Liste->size < Nummer) return;
	// Einträge verschieben
	for(int i = Nummer; i < Liste->size; i++){
		Liste->elems[i] = Liste->elems[i+1];
	}
	//letzten Eintrag löschen
	Liste->size--;
	Liste->elems = realloc(Liste->elems, Liste->size * sizeof(char*));
}

void arrlist_free(Arrlist* Liste){
	if(Liste == NULL) exit(1);
	for(int i = 0; i < Liste->size; i++){
	free(Liste->elems[i]);
	}
	Liste->size = 0;
	printf(""Verlassen"");	
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q'){
            arrlist_free(&einkaufsliste);
            break;
        }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_292,VName_292,"#include <stdlib.h> 
#include <stdio.h>  
#include <string.h> 

#define BUF_SIZE 100

typedef struct arrlist{
        int size;
        char** elems;
} Arrlist;


void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL; 
}


void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}


void arrlist_add(Arrlist* al, char string[]){
     
     if(al->size == 0){
         al->size++; 
         al->elems = malloc(sizeof(char*)*1);
         al->elems[al->size-1] = malloc(strlen(string+1)*sizeof(char)); 
         strcpy(al->elems[al->size-1], string);
         string[0] = '\0';
         
         return;
     }
     else{

           al->size++;  
           char** tmp = (char**) realloc(al->elems,(al->size+1)*sizeof(char*));
           if (!tmp){
               free(al->elems);
               return;
            } 
           al->elems = tmp; 
           al->elems[al->size-1] = malloc((strlen(string)+1)*sizeof(char)); 
           strcpy(al->elems[al->size-1], string); 
           string[0] = '\0';       
   }
}

void arrlist_del_item(Arrlist* al, int idx){
     
     if(al->size == 0){
     
        return;
     }
     
     for(int i = idx; i < al->size-1; i++){
         al->elems[i] = realloc(al->elems[i], (strlen((al->elems[i+1])+1))*sizeof(char)); 
         strcpy(al->elems[i], al->elems[i+1]);
     }
     al->size--;
     char** tmp = (char**) realloc(al->elems,(al->size)*sizeof(char*));
           if (!tmp){
               free(al->elems);
               return;
            } 
     al->elems = tmp; 
     
}

void arrlist_free(Arrlist* al){
     free(al->elems);
     al->size = 0;
}


int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
    printf(""Verlassen"");
    arrlist_free(&einkaufsliste);
    return(0);
    
    
}","#include<stdio.h>


typedef struct student{
        
        char vorname[21];
        char nachname[21];
        int note[5];
} Student;

void student_einlesen(Student *p_stud){

        printf(""Gebe den Vornamen ein: "");
        scanf(""%s"", p_stud->vorname);
        printf(""Gebe nun den Nachnamen ein: "");
        scanf(""%s"", p_stud->nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
     
        for(int j = 0; j <5; j++){
            printf(""%i: "", (j+1));
            scanf(""%i"", &p_stud->note[j]);
        } 
        printf(""\n"");
}

void student_ausgeben(Student *p_stud2){
     
    printf(""Student: %s %s\n"", p_stud2->vorname, p_stud2->nachname);
    int summe = 0;
    for(int l = 0; l <5; l++){
             
        summe += p_stud2->note[l];
    }
    
     printf(""Anzahl Punkte: %i\n"", summe);
     summe = 0;
     printf(""\n"");
     
}


int main(){
    
    Student array[5]; 
    for(int i= 0; i < 5; i++){
    
    student_einlesen(&array[i]);
    }
    
    for(int i= 0; i < 5; i++){
    
    student_ausgeben(&array[i]);
    
    }
    
    return 0;  
}"
Name_293,VName_293,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist{
    char** elems;
    int size;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char* str){
    if(!al) exit(1);
    al->size++;
    char* tmp = malloc(sizeof(char) *strlen(str));
    if(!tmp){
        return;
    }
    strcpy(tmp, str);
    al -> elems = realloc(al->elems, sizeof(char*) *al->size);
    al->elems[al->size-1] = tmp;
   
}

void arrlist_del_item(Arrlist* al, int n){
    if(!al) exit(1);
    if(al->size <= n) return;
    
    free(al->elems[n]);
    for(int i = n; i<(al->size-1); i++){
        al->elems[i] = al->elems[i+1];
    }
    al->elems[al->size-1] = NULL;
    al->size--;
    al->elems = realloc(al->elems, sizeof(char*) * al->size);
}

void arrlist_free(Arrlist *al){
    if(!al) exit(1);
    if(!al->elems) return;
    printf(""Verlassen"");
    for(int i = 0; i< al->size; i++){
        free(al ->elems[i]);
    }
    free(al->elems);
}



int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
    arrlist_free(&einkaufsliste);
    return(0);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define LEN 20
#define N 5


// Deklariert eine Struktur und damit den Typ
typedef struct student{
    char vorname[21]; // einen Vornamen von maximal 20 Zeichen Länge
    char nachname[21]; // einen Nachnamen von maximal 20 Zeichen Länge
    int score[5]; 
}Student;


void student_einlesen(Student* p_stud){
	// die Daten vom Nutzer einliest
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->nachname);
	// in die Struktur schreibt und diese dann in dem Array speichert

	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");

	for(int i = 0; i < 5; i++){
		printf(""%i: "", i+1);
		scanf(""%d"", &p_stud->score[i]);
		//getchar();
	}
	printf(""\n"");
}

void student_ausgeben(Student* p_stud){
	// alle Daten der übergebenen Struktur im Ternimal ausgibt
	// Anstatt der Punkte jedes Aufgabenbogens soll die Summe aller Punkte ausgegeben werden
	int sum=0;
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	for(int i=0; i<5; i++){
		sum += p_stud->score[i];

	}
	printf(""Anzahl Punkte: %i\n"",sum);
	printf(""\n"");
}

int main(){
// zuerst ein Array mit Platz für 5 Studierende erstellt
	Student stu[N];
	for(int i=0; i<N; i++){
		student_einlesen(&stu[i]);
	}
	for(int i=0; i<N; i++){
		student_ausgeben(&stu[i]);
	}


}



/*	Student stu[5];
	for(int* p = stu; p< stu+5; p++){
		student_einlesen(p);
	}
	for(int* p = stu; p< stu+5; p++){
		student_ausgeben(p);
	}
*/"
Name_307,VName_307,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>

 
typedef struct student{
	char vorname [20];
	char nachname [20];
	int punkte[5];
}Student;

void student_einlesen(Student*p_stud){
	
	
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->vorname);
		
		printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
		
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int j=1; j<=5; j++){
			
			
			printf(""%d: "", j);
			//printf(""%d"", liste[i].punkte[j-1]);
			scanf(""%d"", &p_stud->punkte[j-1]);
			//printf(""%d"", liste[i].punkte[j-1]);
			fflush(stdin);
			//liste.punkte [j-1]=getchar();
			//printf(""%d"", liste.punkte[j-1]);
		}
		printf(""\n"");
		
		// printf(""%s %s\n"",liste.vorname,liste.nachname);
}

void student_auslesen(Student*p_stud){
	
	printf(""Student: %s %s"", p_stud->vorname,  p_stud->nachname);
	int summe=0;
	for(int i=0; i<=4; i++){
	
		summe=summe+p_stud->punkte[i];
		
	}
	printf(""\nAnzahl Punkte: %d\n\n"", summe);
	
}


int main(){
	Student liste [5];
	
	for(int i=0; i<=4; i++){
		student_einlesen(&liste [i]);
		
	}
	for (int i=0; i<=4; i++){
	
	student_auslesen(&liste [i]);
	
	}
	
}"
Name_308,VName_308,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>

 
typedef struct student{
    char vorname [20];
    char nachname [20];
    int punkte[5];
}Student;

void student_einlesen(Student*p_stud){


printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);

printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);

printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int j=1; j<=5; j++){


printf(""%d: "", j);
//printf(""%d"", liste[i].punkte[j-1]);
scanf(""%d"", &p_stud->punkte[j-1]);
//printf(""%d"", liste[i].punkte[j-1]);
fflush(stdin);
//liste.punkte [j-1]=getchar();
//printf(""%d"", liste.punkte[j-1]);
}
printf(""\n"");

// printf(""%s %s\n"",liste.vorname,liste.nachname);
}

void student_auslesen(Student*p_stud){

printf(""Student: %s %s"", p_stud->vorname,  p_stud->nachname);
int summe=0;
for(int i=0; i<=4; i++){

summe=summe+p_stud->punkte[i];

}
printf(""\nAnzahl Punkte: %d\n\n"", summe);

}


int main(){
Student liste [5];

for(int i=0; i<=4; i++){
student_einlesen(&liste [i]);

}
for (int i=0; i<=4; i++){

student_auslesen(&liste [i]);

}

}"
Name_291,VName_291,"#include <stdio.h>
#include <stdlib.h>

typedef struct student
{
	char vorname[21];
	char nachname[21];
	int hausaufgaben[5];
}Student;


void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->vorname);
	getchar();
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->nachname);
	getchar();
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0; i<5; i++)
	{
	printf(""%i: "", i + 1);
	scanf(""%i"",&p_stud->hausaufgaben[i]);
	getchar();
	}
	printf(""\n"");
}


void student_ausgeben(Student* p_stud)
{	
	int gesamt = 0 ;
	printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
	for(int i=0; i<5; i++)
	{
	gesamt += p_stud->hausaufgaben[i];
	}
	printf(""Anzahl Punkte: %i"", gesamt);

}

int main()
{
	Student student1;
	Student student2;
	Student student3;
	Student student4;
	Student student5;
	student_einlesen(&student1);
	student_einlesen(&student2);
	student_einlesen(&student3);
	student_einlesen(&student4);
	student_einlesen(&student5);
	student_ausgeben(&student1);
	printf(""\n\n"");
	student_ausgeben(&student2);
	printf(""\n\n"");
	student_ausgeben(&student3);
	printf(""\n\n"");
	student_ausgeben(&student4);
	printf(""\n\n"");
	student_ausgeben(&student5);

}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_311,VName_311,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_323,VName_323,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include<stdio.h> 
#include<stdlib.h>
#include<time.h> 
#include<string.h> 


typedef struct student{
char Vorname[20]; 
char Nachname[20]; 
int Note[5]; 
} Student;

void readLine(char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}

void student_einlesen(Student *p_stud)
{
for (int i = 0; i < 5; i++)
{
printf(""Gebe den Vornamen ein: ""); 
readLine(p_stud[i].Vorname, 20);
printf(""Gebe nun den Nachnamen ein: "");
readLine(p_stud[i].Nachname, 20);
printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
printf(""1: "");
char str[5];
readLine(str, 100); 
p_stud[i].Note[0] = atoi(str);
printf(""2: "");
readLine(str, 100); 
p_stud[i].Note[1] = atoi(str);
printf(""3: "");
readLine(str, 100); 
p_stud[i].Note[2] = atoi(str);
printf(""4: "");
readLine(str, 100); 
p_stud[i].Note[3] = atoi(str);
printf(""5: \n"");
readLine(str, 100); 
p_stud[i].Note[4] = atoi(str);
}
}

void student_ausgeben(Student *p_stud)
{
for (int i = 0; i < 5; i++)
{
printf(""Student:""); 
printf("" %s %s\n"", p_stud[i].Vorname, p_stud[i].Nachname);

int sum;
sum = p_stud[i].Note[0] + p_stud[i].Note[1] + p_stud[i].Note[2] + p_stud[i].Note[3] + p_stud[i].Note[4]; 

printf(""Anzahl Punkte: %i\n\n"", sum); 
}
}

int main(){
Student p_stud[5]; 
student_einlesen(p_stud);
student_ausgeben(p_stud);
}"
Name_264,VName_264,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist{
	int size;
	char** elems;
} Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

void arrlist_add(Arrlist* al, char* buf){
	al->size++;
	if (al->size == 1){
		al->elems = malloc(sizeof(char*));
	}else{
		al->elems = realloc( al->elems, al->size * sizeof(char*));}
	int anzahl = strlen(buf);
	if(!al->elems) return;
	al->elems[al->size-1] = malloc(anzahl* sizeof(char));
	if(!al->elems[al->size-1]) return;
	strcpy(al->elems[al->size-1], buf);
}

void arrlist_del_item(Arrlist* al, int d){
	if (d > al->size-1) return;
	al->size--;
	free(al->elems[d]);
	for(int i = d; i != al->size; i++){
		al->elems[i] = al->elems[i+1];
	}
	al->elems = realloc( al->elems, al->size * sizeof(char*));
}

void arrlist_free(Arrlist* al){
	for(int i = 0; i < al->size; i++){
		free(al->elems[i]);
	}
	free(al->elems);
	al->size = 0;
	al->elems = NULL;
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q'){
            printf(""Verlassen\n"");
			arrlist_free(&einkaufsliste);
            break;}
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUF_SIZE 20

typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
fgets(p_stud->vorname, BUF_SIZE, stdin);
for(int i=0; i < 20; i++){
	if(p_stud->vorname[i] == '\n'){
p_stud->vorname[i] = '\0';
break;}
}
printf(""Gebe nun den Nachnamen ein: "");
fgets(p_stud->nachname, BUF_SIZE, stdin);
for(int i=0; i < 20; i++){
	if(p_stud->nachname[i] == '\n'){
p_stud->vorname[i] = '\0';
break;}
}
printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
for(int i = 0; i < 5; i++){
	printf(""%i: "", i+1);
	scanf(""%i"", &p_stud->punkte[i]);
	}
printf(""\n"");
	getchar();
}

void student_ausgeben(Student* p_stud){
	printf(""Student: %s %sAnzahl Punkte: %i\n\n"", p_stud->vorname, p_stud->nachname, p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}	

int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
		for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}	
}"
Name_303,VName_303,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <string.h>


typedef char Str20[21];

typedef struct student {
	Str20 firstName;
	Str20 lastName;
	int punkte[5];
} Student;

void readline(char* strbuffer, unsigned int buffersize){
	fgets(strbuffer, buffersize, stdin);
	int p = strlen(strbuffer);strbuffer[p-1] = '\0';
}

void student_einlesen(Student *p_stud)
{

	printf(""Gebe den Vornamen ein: "");
	readline(p_stud->firstName, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readline(p_stud->lastName, 20);
		
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", i+1);
		scanf(""%i"", &(p_stud->punkte[i]));
		getchar();
	}
	printf(""\n"");
}

void student_ausgeben(Student *p_stud)
{	
	int gesamtPunkte = 0;

	
	printf(""Student: %s %s\n"", p_stud->firstName, p_stud->lastName);
		
		for(int i = 0; i < 5; i++){
			gesamtPunkte += (p_stud->punkte[i]);
		}
		printf(""Anzahl Punkte: %i\n\n"", gesamtPunkte);
}
	

int main()
{
	Student array_studentenDaten[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&array_studentenDaten[i]);
	}
	
	for(int i = 0; i < 5; i++){
		student_ausgeben(&array_studentenDaten[i]);		
	}	
}"
Name_328,VName_328,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_105,VName_105,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
	typedef struct Student{
		char vorname[20];
		char nachname[20];
		int punkte_ha[5];
	}stud1[5];
	
void student_einlesen(struct Student *p_stud);
void student_ausgeben(struct Student *p_stud);


void student_einlesen(struct Student *p_stud){
	char *vorname2 = (char*)malloc(20);
	char *nachname2= (char*)malloc(20);
	

	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",vorname2);
	strcpy(p_stud->vorname , vorname2);
	//*p_stud->vorname  = &vorname2;
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",nachname2);
	strcpy(p_stud->nachname , nachname2);
	//*p_stud->nachname  = &nachname2;
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0;i < 5;i++){
	int punkte = 0;
	scanf(""%i"",&punkte);
	if(i != 4){
	printf(""%i: "",i+1);
	}
	else {
		printf(""%i: \n"",i+1);
	}
	p_stud->punkte_ha[i] = punkte;

	
	}
}

void student_ausgeben(struct Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int j = 0; j < 5;j++){
		sum+=p_stud->punkte_ha[j];
	}
	printf(""Anzahl Punkte: %i\n\n"",sum);
}


int main(){

struct Student stud[5];
	for(int i = 0;i < 5;i++){
	student_einlesen(&stud[i]);
	}
	for(int i = 0;i < 5;i++){
	student_ausgeben(&stud[i]);
	}
}"
Name_322,VName_322,"#include <stdio.h>

typedef struct student{
char vorname [20];
char nachname [20];
int punkte[5];
}Student;

void student_einlesen(Student*p_stud){

printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);

printf(""Gebe nun den Nachnamen ein: "");
scanf (""%s"", p_stud->nachname);

printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int j=1; j<=5; j++){
    printf(""%d: "", j);
    scanf(""%d"", &p_stud->punkte[j-1]);
    fflush(stdin);

}
printf(""\n"");

}

void student_auslesen(Student*p_stud){
    printf(""Student: %s %s"", p_stud->vorname, p_stud->nachname);
    int summe=0;
    for(int i=0; i<=4; i++){
        summe=summe+p_stud->punkte[i];

    }
    printf(""\nAnzahl Punkte: %d\n\n"", summe);
}

int main (){
    Student liste [5];

    for(int i=0; i<=4; i++){
        student_einlesen(&liste[i]);
    }
for(int i=0; i<=4; i++){
    student_auslesen(&liste[i]);
}
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_304,VName_304,"#include <stdio.h>
#include <stdlib.h>

typedef struct student {
    char vorname [20];
    char nachname [20];
    int Punkte [5];
}Student;

void student_einlesen (Student * p_stud) {
    for (int i = 0; i<1; i++){
        printf(""Gebe den Vornamen ein: "");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe nun den Nachnamen ein: "");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");

        for (int a = 0; a < 5; a++) {

            printf(""%d: "", a + 1);
            scanf(""%d"", &p_stud->Punkte[a]);

        }
        printf(""\n"");
    }

}


void student_ausgeben(Student * p_stud){


        printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
        int Punktezahl = 0;
        for (int b = 0; b<5; b++){
            Punktezahl += p_stud->Punkte[b];
        }
        printf(""Anzahl Punkte: %i\n\n"", Punktezahl );

    }


int main () {
    Student p_stud[5];
    for (int i = 0; i<5; i++) {
        student_einlesen(p_stud+i);
    }
    for (int i = 0; i<5; i++) {
        student_ausgeben(p_stud+i);
    }
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_306,VName_306,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_295,VName_295,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_316,VName_316,"#include <stdio.h>

typedef struct student {
 char vorname[21];
 char nachname[21];
 int array[5];
}Student;

void student_einlesen(Student *stu )
{
 int i = 0;
 int j = 0;
 for (i = 0; i < 5; i++)
 {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", (stu[i].vorname));
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", (stu[i].nachname));
        printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
  for (j = 0; j < 5; j++)
  {
            printf(""%i: "", j + 1);
   scanf(""%i"", &(stu[i].array[j]));
  }
        printf(""\n"");
 }
}

void student_ausgeben (Student* stu)
{
    int i= 0;
    int j = 0;
    int summe=0;
    for (i = 0; i < 5; i++) 
    {
        printf(""Student: %s %s\n"", stu[i].vorname, stu[i].nachname);
        for ( j = 0; j < 5; j++)
        {
            summe += stu[i].array[j];
        }
        printf(""Anzahl Punkte: %i\n\n"", summe);
        summe = 0;
    }
}
int main()
{
 struct student stu[5];
 student_einlesen(stu);
    student_ausgeben(stu);

}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist{
    char** elems;
    int size;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char* buf) {
      al->size++;
      al->elems = (char**)realloc(al->elems, al->size * sizeof(int*));
      al->elems[al->size - 1] = malloc(strlen(buf) * sizeof(char));
      strcpy(al->elems[al->size - 1], buf);
}

void arrlist_del_item(Arrlist* al, int i) 
{
    for (int j = i + 1; j < al->size; j++)
    {
        al->elems[j-1] = al->elems[j];
    }
            al->size--;
            al->elems = (char**)realloc(al->elems, al->size * sizeof(int*));
}

void Array_free(Arrlist* al)
{
    for (int i = 0; i < al->size; i++)
    {
    free(al->elems[i]);
    }
    free(al);
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
          if (choice == 'q') {
            printf(""verlassen"");
            break;
        }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_330,VName_330,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>

typedef struct student {
 char vorname[21];
 char nachname[21];
 int array[5];
}Student;

void student_einlesen(Student *stu )
{
 int i = 0;
 int j = 0;
 for (i = 0; i < 5; i++)
 {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", (stu[i].vorname));
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", (stu[i].nachname));
        printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
  for (j = 0; j < 5; j++)
  {
            printf(""%i: "", j + 1);
   scanf(""%i"", &(stu[i].array[j]));
  }
        printf(""\n"");
 }
}

void student_ausgeben (Student* stu)
{
    int i= 0;
    int j = 0;
    int summe=0;
    for (i = 0; i < 5; i++) 
    {
        printf(""Student: %s %s\n"", stu[i].vorname, stu[i].nachname);
        for ( j = 0; j < 5; j++)
        {
            summe += stu[i].array[j];
        }
        printf(""Anzahl Punkte: %i\n\n"", summe);
        summe = 0;
    }
}
int main()
{
 struct student stu[5];
 student_einlesen(stu);
    student_ausgeben(stu);

}"
Name_99,VName_99,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_131,VName_131,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_332,VName_332,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_296,VName_296,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_315,VName_315,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_314,VName_314,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef char String[101];
typedef struct arrlist{
	int size;
	String* elems;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char* new){
	int groesse = al->size;
	groesse++;
	String* tmp = (String*)realloc(al->elems, groesse*sizeof(String));
	if(tmp == 0) exit(-1);
	al->elems = tmp;
	al->size = groesse;
	strcpy(al->elems[groesse-1], new);
}

void arrlist_del_item(Arrlist* al, int index){
	if(al->size<2){
		arrlist_init(al);
		return;
	}
	Arrlist neueList;
	arrlist_init(&neueList);
	for(int i = 0; i<al->size; i++){
		if(i != index){
			arrlist_add(&neueList, al->elems[i]);
		}
	}
	String* tmp = (String*)realloc(al->elems, ((al->size)-1)*sizeof(String));
	if(tmp == 0) exit(-1);
	al->elems = tmp;
	al->size--;
	for(int i = 0; i<neueList.size; i++){
		strcpy(al->elems[i], neueList.elems[i]);
	}
	free(neueList.elems);
	neueList.size = 0;
}

void arrlist_free(Arrlist* al){
	printf(""Verlassen\n"");
	free(al->elems);
	al->size = 0;
	
}
int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
	arrlist_free(&einkaufsliste);
    return(0);
}","#include <stdio.h>

typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->punkte[i]);
	}
	printf(""\n"");
}

void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	printf(""\n"");
}

int main(){
	Student array[5];
	for(int i=0; i<5; i++){
		student_einlesen(&array[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&array[i]);
	}
}"
Name_312,VName_312,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_342,VName_342,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct arrlist{
	char** elems;
	unsigned int size;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

void arrlist_add(Arrlist* list, char* buffer)
{
	// Liste erweitern
	list->size++;
	char** tmp = (char**) realloc( list->elems, (list->size)*sizeof(char*) );
	if ( !tmp ) exit( -1 );
	list->elems = tmp;
	
	// neuen String hinzufuegen
	char* new; 
	new = (char*) malloc(strlen(buffer) * sizeof(char)); 
	strcpy(new, buffer);
	list->elems[list->size-1] = new;
}

void arrlist_del_item(Arrlist* list, int index)

{	
	// pruefen, ob ein sinnvoller Index uebergeben wurde oder ob die Liste leer ist
	if ( (index < 0) || (list->size <= index) || (list->size == 0)){
		return;
	}
	
	// String loeschen
	free(list->elems[index]);
	
	// alle Strings ab Index um 1 nach hinten verschieben
	for ( int i = index; i < list->size-1; i++ ){		
		list->elems[i] = list->elems[i+1];
	}
	
	// Listengroesse reduzieren
	list->size--;
	char** tmp = (char**) realloc( list->elems, (list->size)*sizeof(char*) );
	if ( !tmp && list->size > 0 ) exit( -1 );
	list->elems = tmp;
	
}

void arrlist_free( Arrlist* list )
{
	for(int i = 0; i < list->size; i++){
		free(list->elems[i]);
	}
	free( list->elems );
	list->size = 0;
}


/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
	
	arrlist_free(&einkaufsliste);
	printf(""Verlassen\n"");

    return(0);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

typedef struct student
{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;

void readLine( char* strbuffer, unsigned int buffersize )
{
	char format[30] = """";
	sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
	scanf( format, strbuffer );
  
}

void student_einlesen(Student* p_stud)
{
	// ""Gib"", btw
	printf(""Gebe den Vornamen ein:"");
	readLine(p_stud->vorname, 20);
	
	printf(""Gebe nun den Nachnamen ein:"");
	readLine(p_stud->nachname, 20);
	
	// Kommentiert man das jeweils andere aus, funktioniert das Einlesen des Namens und das Einlesen der Punkte.
	// Nur wenn beides zusammen ausgefuehrt werden soll, funktioniert es nicht. 
	// Ich wuerde schaetzen, dass sie sich in die Quere kommen, aber ich weiss nicht genau, wo.
	
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++)
	{
		int read = 0;
		printf(""%i:"", i);
		scanf(""%i"", &read);
		p_stud->punkte[i] = read;
	}

}

void student_ausgeben(Student studenten[]) 
{
	for(int i = 0; i < 5; i++)
	{
		printf(""Student: %s %s\n"", studenten[i].vorname, studenten[i].nachname);
		
		int punkte = 0;
		for(int j = 0; j < 5; j++)
		{
			punkte += (studenten[i].punkte)[j];
		}
		
		printf(""Anzahl Punkte: %i\n"", punkte);

	}
}

int main(){
	Student meineStudenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&meineStudenten[i]);
	}
	
	student_ausgeben(meineStudenten);
}"
Name_350,VName_350,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int p_counter = 0;
typedef struct student{
    char vorname[20];
    char nachname[20];
    int pktarray[5];
}Student;

void student_einlesen(Student* p_stud)
{
    int punkte = 0;
    char name[20];
    char* p_name = name;
    
    for (int i = 0; i<= p_counter; i++){
        if (i == p_counter) {
    
            //Vorname einlesen
            printf(""Gebe den Vornamen ein: "");
            scanf(""%19s"", p_name);
            //Vorname speichern
            strcpy(p_stud->vorname, name);

            //Nachname einlesen
            printf(""Gebe nun den Nachnamen ein: "");
            scanf(""%19s"", p_name);
            //nachname sepichern
            strcpy(p_stud->nachname, name);

            //Punkte einlesen
            printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
            int* p_liste = p_stud->pktarray;
            for (int j = 0; j < 5; j++) {
                printf(""%i: "", j+1);
                scanf(""%d"",&punkte);
                //Punkte speichern
                *(p_stud->pktarray+j) = punkte;
                p_liste++;
            }
            printf(""\n"");
            break;
        }
        p_stud++;
    }
}

void student_ausgeben(Student* p_stud)
{
    int summe = 0;
    for (int i = 0; i<= p_counter; i++){
        if (i == p_counter) {
            printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
            //Punkte-Schleife
            for (int i = 0; i < 5; i++) {
                summe += p_stud->pktarray[i];
            }
            printf(""Anzahl Punkte: %i\n\n"", summe);
            break;
        }
        p_stud++;
    }
}

int main()
{
    Student* tmp = (Student*)calloc(5,sizeof(Student)*5);
    if (!tmp) exit(-1);
    p_counter = 0;
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(tmp);
        p_counter++;
    }
    p_counter = 0;
    for (int i = 0; i < 5; i++)
    {
        student_ausgeben(tmp);
        p_counter++;
    }
    free(tmp);
}"
Name_302,VName_302,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_319,VName_319,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>

typedef char Str20[21];

typedef struct student{
		Str20 vorname;
		Str20 nachname;
		int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i=0;i<5;i++){
		printf(""%i: "",(i+1));
	 	scanf(""%i"",(*p_stud).punkte+i);
	}
	printf(""\n"");
}

void student_ausgeben(Student* p_stud){
	printf(""\nStudent: %s %s\n"",p_stud->vorname, p_stud->nachname);
	int sum=p_stud->punkte[4]+p_stud->punkte[3]+p_stud->punkte[2]+p_stud->punkte[1]+p_stud->punkte[0];
	printf(""Anzahl Punkte: %i\n"",sum);
}

int main(){
	Student studierende [5];
	for(int i=0;i<5;i++){
		student_einlesen(&studierende[i]);
	}
	
	for(int i=0;i<5;i++){
		student_ausgeben(&studierende[i]);
	}
}"
Name_149,VName_149,"#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;

void student_einlesen(Student* p_stud){
//    p_stud=realloc(p_stud,sizeof(Student));
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud[0].vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud[0].nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i=0; i<5; i++)
        {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud[0].punkte[i]));
        }
}

void student_ausgeben(Student s){
    int sum=0;
    for (int i=0; i<5; i++){
        sum+= s.punkte[i];
    }
    printf(""\nStudent: %s %s\n"", s.vorname, s.nachname );
    printf(""Anzahl Punkte: %i\n"", sum);
}

int main(){
    Student students[5];
//    student_einlesen(&students[0]);
    for (int i=0; i<5;i++){
        student_einlesen(&students[i]);
    }

    for (int i=0; i<5;i++){
        student_ausgeben(students[i]);
    }

}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_321,VName_321,"#include <stdio.h>
#include <stdlib.h>

typedef struct student{
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
	printf(""%i: "",i+1);
	scanf(""%i"",&p_stud->Punkte[i]);
	}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud)
{

for(int i=0;i<5;i++){
	int punkte = 0;
	for(int j=0;j<5;j++){
		punkte += p_stud[i].Punkte[j];
	}
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud[i].Vorname,p_stud[i].Nachname,punkte);
}
}
int main(){
 	Student Studierende[5];
 	for(int i=0;i<5;i++)student_einlesen( 			&Studierende[i]);
 student_ausgeben(Studierende);
 
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_317,VName_317,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
	char Vorname[21];
	char Nachname[21];
	int Punkte[5];
}Student; 

void student_einlesen();

void student_ausgeben();

int main(){
	Student Studierende[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&Studierende[i]);	
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&Studierende[i]);		
	} 
	return 0;
}

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 1; i < 6; i++){
		printf(""%i: "", i);
		scanf(""%i"", &(p_stud->Punkte)[i - 1]);
	}
	printf(""\n"");
}

void student_ausgeben(Student* p){
	int Punkt = 0;
	printf(""Student: %s %s\n"", p->Vorname, p->Nachname);
	for(int j = 0; j < 5; j++){
		Punkt += (p->Punkte)[j];	
	}
	printf(""Anzahl Punkte: %i\n\n"", Punkt);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_320,VName_320,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct arrlist{

    int size;
    char** elems; //elems ist ein Array mit Pointern, die auf die Stringarrays zeigen

} Arrlist;

void arrlist_init(Arrlist* al) //al ist ein dreifacher Pointer --> kann drei mal dereferenziert werden
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}


void arrlist_add (Arrlist* al, char* str){
    
    /* internes Array vergrößern
    1) Size hochzählen
    2) Arrlist realloc
    
    am Ende der Arrayliste einen String hinzufügen:
    1) letzter pointer mallocen, damit er auf stringarray mit 100 chars zeigt
    2) übergebenen String kopieren */

    //Size hochzählen
    al->size++;
    
    //Fallunterscheidung: malloc beim ersten Aufruf, realloc, wenns bereits existiert
    
    if (al->size == 1){
         //Array mit einem Pointer alloziieren
        al->elems =(char **)malloc(1 * sizeof(str) );
        if (!al->elems){
            printf(""Kein Speicher reserviert"");
            exit(1);
        }
            
        //an der Stelle auf die der Pointer zeigt einen Pointer auf ein Char-Array alloziieren
        char*tmp= (char *)malloc( 100 * sizeof (char) );
        if (!tmp){
            free(tmp);
            printf(""Kein Speicher reserviert"");
            exit(1);
        }
        strcpy(tmp, str);
        al->elems[0]= tmp; 
        
    // Nicht mehr der erste Aufruf, Arrayliste vergrößern
    } else if (al->size > 1) {
        char** tmparray = (char **)realloc(al->elems, al->size * sizeof(str) );
        if (!tmparray){
            free(tmparray);
            printf(""Kein Speicher reserviert"");
            exit(1);
        }
        al->elems=tmparray;
        
        //Stringarray alloziieren
        char*tmp2 = (char *)malloc(100 * sizeof(char));
        if (!tmp2){
            free(tmp2);
            printf(""Kein Speicher reserviert"");
            exit(1);
        }
        strcpy(tmp2, str);
        al->elems[al->size-1]=tmp2;
    }

}

void arrlist_del_item (Arrlist* al, int index){
    if(!al) exit(1);
    if (al->size < index) return;
    
    //Elemente kopieren
    for (int i = index; i < al->size; i++){
        al->elems[i] = al->elems[i+1]; //verschiebt die Adressen!
    }
    
    // letztes Element löschen
    al->size--;
    char** tmp = realloc(al->elems, al->size*sizeof(*al->elems));
    al->elems = tmp;
} 

void arrlist_free (Arrlist* al){
    
    free(al->elems);
    al->size=0;
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q'){
            printf(""Verlassen\n"");
            arrlist_free(&einkaufsliste);
            break;
        }
            
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_324,VName_324,"#include <stdio.h>
#include <string.h>

typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
} Student;

void student_einlesen(Student* st){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", st->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", st->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6; i++){
		printf(""%i: "", i);
		scanf(""%i"", &st->punkte[i-1]);
	}
	printf(""\n"");
	return;
}

void student_ausgeben(Student* st){
	int summe = 0;
	for(int i = 0; i < 5; i++) summe += st->punkte[i];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"", st->vorname, st->nachname, summe);
	return;
}

int main(){
	Student Studenten[5];
	for(int i = 0; i < 5; i++) student_einlesen(&Studenten[i]);
	for(int i = 0; i < 5; i++) student_ausgeben(&Studenten[i]);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

typedef struct arrlist{
	char** elems;
	int size;
} Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al) return;
    if(!al->elems) return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++) printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

void arrlist_add(Arrlist* al, char* str){
	if(!al) exit(1);
	int length = strlen(str);
	char** tmp1 = realloc(al->elems, (al->size+1)*sizeof(char*));
	if(!tmp1){
		free(al->elems);
		return;
	}
	al->elems = tmp1;
	char* tmp2 = realloc(al->elems[al->size], (length+1)*sizeof(char));
	if(!tmp2){
		free(al->elems);
		return;
	}
	al->elems[al->size] = tmp2;
	strcpy(al->elems[al->size], str);
	al->size++;
	return;
}

void arrlist_del_item(Arrlist* al, int pos){
	if(!al) exit(1);
	if(al->size == 0) return;
	if(al->size < pos) return;
	for(int i = pos; i < al->size; i++) al->elems[i] = al->elems[i+1];
	al->size--;
	al->elems = realloc(al->elems, al->size * sizeof(char*));
	return;
}

void arrlist_free(Arrlist* al){
	if(!al) exit(1);
	for(int i = 0; i < al->size; i++) free(al->elems[i]);
	al->size = 0;
	printf(""Verlassen\n"");
	return;
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q'){
            arrlist_free(&einkaufsliste); 
            break;
        }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break; 
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_166,VName_166,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>

typedef struct student"
Name_161,VName_161,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_334,VName_334,"#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char Vorname[21];
	char Nachname[21];
	int Punkte_HA[5];
} Student; 

void student_einlesen(Student* p_stud){
		printf(""Gebe den Vornamen ein: "");  
		fgets(p_stud -> Vorname, 20, stdin);
		printf(""Gebe nun den Nachnamen ein: "");
		fgets(p_stud -> Nachname, 20, stdin);
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int i=0; i<5; i++){
			int j = i+1;
			printf(""%i: "", j);	
			scanf(""%d"", &p_stud->Punkte_HA[i]);
			getchar();
		}
}


int main(){
        Student Student1;
		Student Student2;
		Student Student3;
		Student Student4;
		Student Student5;
		
		student_einlesen(&Student1);
		student_einlesen(&Student2);
		student_einlesen(&Student3);
		student_einlesen(&Student4);
		student_einlesen(&Student5);
			
	
	
	    printf(""Student: %s%s"", Student1.Vorname, Student1.Nachname);
		int Summe1 =0;
		for(int q=0; q<5;q++){
			Summe1 += Student1.Punkte_HA[q];
		}
		printf(""Anzahl Punkte: %d\n\n"", Summe1);
		
		
		
	    printf(""Student: %s%s"", Student2.Vorname, Student2.Nachname);
		int Summe2 =0;
		for(int q=0; q<5;q++){
			Summe2 += Student2.Punkte_HA[q];
		}
		printf(""Anzahl Punkte: %d\n\n"", Summe2);
		
		
		
	    printf(""Student: %s%s"", Student3.Vorname, Student3.Nachname);
		int Summe3 =0;
		for(int q=0; q<5;q++){
			Summe3 += Student3.Punkte_HA[q];
		}
		printf(""Anzahl Punkte: %d\n\n"", Summe3);
		
		
			
		printf(""Student: %s%s"", Student4.Vorname, Student4.Nachname);
		int Summe4 =0;
		for(int q=0; q<5;q++){
			Summe4 += Student4.Punkte_HA[q];
		}
		printf(""Anzahl Punkte: %d\n\n"", Summe4);
		
		
	    printf(""Student: %s%s"", Student5.Vorname, Student5.Nachname);
		int Summe5 =0;
		for(int q=0; q<5;q++){
			Summe5 += Student5.Punkte_HA[q];
		}
		printf(""Anzahl Punkte: %d\n\n"", Summe5);
				
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_300,VName_300,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include<stdio.h>

typedef struct student{
		char vorname[21];
		char nachname[21];
		int punkte[5];	
	}Student;
	
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for (int i=0; i<5; i++){
		printf(""%i: "", i+1);
		scanf(""%i"", &p_stud->punkte[i]);
	}
	printf(""\n"");
}

void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname );
	printf(""Anzahl Punkte: %i\n\n"", p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}

int main(){
	Student p_stud[5];
	for (int i=0; i<5; i++){
		student_einlesen(&p_stud[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(&p_stud[i]);
	}
}"
Name_347,VName_347,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void readLine(char* p_str) {
	char tmp[21];
	scanf(""%s"", tmp);
	strcpy(p_str, tmp);
}


typedef struct student {
	char firstNames[21];
	char lastNames[21];
	int note[5];
}Student;

void student_einlesen(Student* p_stud) {
	for (int i = 0; i < 5; i++) {
		printf(""Gebe den Vornamen ein: "");
		readLine(p_stud[i].firstNames);

		printf(""Gebe nun den Nachnamen ein: "");
		readLine(p_stud[i].lastNames);

		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");

		for (int j = 0; j < 5;j++) {
			printf(""%d: "", j + 1);
			scanf(""%d"", &p_stud[i].note[j]);
			if (j == 4) printf(""\n"");
		}
	}
}

void student_ausgeben(Student* p_stud) {
	for (int i = 0; i < 5; i++) {
		printf(""Student: %s %s\n"", p_stud[i].firstNames, p_stud[i].lastNames);
		printf(""Anzahl Punkte: %d\n\n"", p_stud[i].note[0] + p_stud[i].note[1] + p_stud[i].note[2] + p_stud[i].note[3] + p_stud[i].note[4]);
	}
}

int main() {
	Student names[5];
	student_einlesen(names);
	student_ausgeben(names);
	return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h> // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct arrlist {
	char** elems;
	int size;
} Arrlist;

void arrlist_init(Arrlist* al)
{
	al->size = 0;
	al->elems = NULL;
}

void arrlist_add(Arrlist* al, char* str)
{
	//Ueberpruefen ob al gueltig ist; wenn nicht, beenden
	if (!al)
		exit(- 1);
	//Listengroesse inkrementieren
	al -> size++;
	//Speicher fuer eine Kopie des uebergebenen Strings anfordern
	//bei fehlerhafter Allokation beenden
	char* tmp = malloc(sizeof(char) * strlen(str));
	if (!tmp)
		exit(-1);
	//uebergebenen String in neuen kopieren
	strcpy(tmp, str);
	//Listenarray um einen Eintrag vergroessern (re-allozieren)
	//bei fehlerhafter Allokation beenden
	al -> elems = realloc(al -> elems, sizeof(char*) * al -> size);
	if (!al -> elems) {
		exit(- 1);
	}
	//Kopierten String an das Listenarray anhaengen
	al -> elems[al -> size - 1] = tmp;
}

void arrlist_del_item(Arrlist* al, int index)
{
	/* Pointer ueberpruefen */
	if (!al)
		return;
	if (!al -> elems)
		return;
	if (index >= al -> size)
		return;

	/* Gesuchtes Element freigeben */
	free(al -> elems[index]);
	/* Elemente vorruecken */
	for (int i = index; i < (al -> size - 1); i++) {
		al->elems[i] = al->elems[i + 1];
	}
	/* Frei gewordenen Element nullen */
	al -> elems[al -> size - 1] = NULL;
	/* Groeße vermindern */
	if (al->size > 0)
		al->size --;
	/* Array verkleinern */
	al -> elems = realloc(al -> elems, sizeof(char*) * al -> size);
	if (!al -> elems) {
		perror(""Failed to allocate memory"");
		exit(- 1);
	}

}

void arrlist_free(Arrlist* al)
{
	if (!al)
		return;
	if (!al -> elems)
		return;
	for (int i = 0; i < al ->size; i++)
		free(al -> elems[i]);
	free(al -> elems);
}


void arrlist_print(Arrlist* al)
{
	if (!al)
		return;
	if (!al->elems)
		return;
	printf(""# Ware\n"");
	for (int i = 0; i < al->size; i++)
		printf(""%d %s"", i, al->elems[i]);
}

int main() {
	Arrlist einkaufsliste;
	char choice = 'q';
	char buf[BUF_SIZE];

	arrlist_init(&einkaufsliste);
	printf(""Einkaufsliste\n""
		""-----------------\n""
		""(h) - Hinzufuegen\n""
		""(l) - Loeschen\n""
		""(a) - Ausgeben\n""
		""(q) - Verlassen\n\n"");

	do {
		printf(""Auswahl: "");
		choice = getchar();
		getchar();
		if (choice == 'q') {
			printf(""Verlassen"");
			break;
		}
		switch (choice) {
		case 'h':
		{
			printf(""Hinzufuegen: \n"");
			fgets(buf, BUF_SIZE, stdin);
			buf[BUF_SIZE - 1] = '\0';
			arrlist_add(&einkaufsliste, buf);
		}
		break;
		case 'l':
		{
			printf(""Löschen - Nummer: \n"");
			int i = 0;
			scanf(""%d"", &i);
			getchar();
			arrlist_del_item(&einkaufsliste, i);
		}
		break;
		case 'a':
			printf(""Ausgabe: \n"");
			arrlist_print(&einkaufsliste);
			printf(""\n"");
			break;
		default:
			printf(""Unbekannte Option!\n"");
			break;
		}
	} while (1);
	arrlist_free(&einkaufsliste);
	return(0);
}"
Name_299,VName_299,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
 char Vorname[21];
 char Nachname[21];
 int Punkte[5];
}Student; 
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->Vorname);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->Nachname);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for(int i = 0; i < 5; i++){
  printf(""%i: "", i+1);
  scanf(""%i"", &(p_stud->Punkte)[i]);
 }
 printf(""\n"");
}

void student_ausgeben(Student* p){
 int Punkt = 0;
 printf(""Student: %s %s\n"", p->Vorname, p->Nachname);
 for(int j = 0; j < 5; j++){
  Punkt += (p->Punkte)[j]; 
 }
 printf(""Anzahl Punkte: %i\n\n"", Punkt);
}


int main(){
 Student Studierende[5];
 for(int i = 0; i < 5; i++){
  student_einlesen(&Studierende[i]); 
 }
 for(int i = 0; i < 5; i++){
  student_ausgeben(&Studierende[i]);  
 } 
 return 0;
}"
Name_40,VName_40,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_353,VName_353,"#include <stdio.h>
#include<stdlib.h>

typedef struct student{
    char firstname[20];
    char lastname[20];
    int hwpt[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i=0;i<5;++i){
        printf(""Gebe den Vornamen ein: "");
        scanf(""%s"",p_stud[i].firstname);
        
        printf(""Gebe nun den Nachnamen ein: "");
        scanf(""%s"",p_stud[i].lastname);
       
        
        printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
        printf(""1: "");
        scanf(""%d"",&p_stud[i].hwpt[0]);
        printf(""2: "");
        scanf(""%d"",&p_stud[i].hwpt[1]);
        printf(""3: "");
        scanf(""%d"",&p_stud[i].hwpt[2]);
        printf(""4: "");
        scanf(""%d"",&p_stud[i].hwpt[3]);
        printf(""5: "");
        scanf(""%d"",&p_stud[i].hwpt[4]);
        printf(""\n"");
        
    }
}
void student_ausgeben(Student* p_stud){
           for (int i=0; i<5;i++){
               printf(""Student: %s %s \n"",p_stud[i].firstname,p_stud[i].lastname);
               int s=0;
               for (int j=0;j<5;j++){
                   s+=p_stud[i].hwpt[j];
                   
               }
               printf(""Anzahl Punkte: %d\n"",s);
               s=0;
               printf(""\n"");
               
           }    
        
    }
    

int main(){
    Student* p_stud=(Student*)malloc(10*sizeof(Student));
    student_einlesen((Student*) p_stud);
    student_ausgeben((Student*) p_stud);
    free(p_stud);
    
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_325,VName_325,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct arrlist
{
    int size;
    char** elems;
} Arrlist;

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char* buf)
    {
        if(al==0) exit(1);
        al->size++;
        al->elems = realloc(al->elems, al->size*sizeof(char*));
        int size2 = strlen(buf)+1;
        al->elems[al->size-1] = malloc(size2*sizeof(char));
        if(!al->elems) 
        {
            free(al->elems);
            return;
        }
        strcpy(al->elems[al->size-1], buf);
        return;
    } 

void arrlist_del_item(Arrlist* al, int i)
{
    if(al==0) exit(1);
    free(al->elems[i]);
    for(; i < al->size; i++)
    {  
        al->elems[i] = al->elems[i+1];
    }
    al->size--;
    al->elems = realloc(al->elems, al->size*sizeof(char*));
    return;    
}

void arrlist_free(Arrlist* al)
{
    for(int i = 0; i < al->size; i++)
    {
        free(al->elems[i]);        
    }
    return;
}

int main()
{
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
        {
            printf(""Verlassen\n"");
            arrlist_free(&einkaufsliste);
            break;
        }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define BUF_SIZE 21


typedef struct student {
    char* vorname;
    char* nachname;
    int hpkt[5];
} Student;

void student_einlesen(Student* p_stud)
{
    for(int i = 0; i < 5; i++)
    { 
        char buf[BUF_SIZE];
        printf(""\nGebe den Vornamen ein: "");
        scanf(""%20s"", buf);
        buf[BUF_SIZE-1] = '\0';

        int groesse = strlen(buf)+1;
        p_stud[i].vorname = malloc(groesse*sizeof(char));
        strcpy(p_stud[i].vorname ,buf);

        printf(""Gebe nun den Nachnamen ein: "");
        char buf2[BUF_SIZE];
        scanf(""%20s"", buf2);
        buf2[BUF_SIZE-1] = '\0';

        p_stud[i].nachname = malloc(groesse*sizeof(char));
        strcpy(p_stud[i].nachname ,buf2);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");

        for(int j = 0; j < 5; j++)
        {
            printf(""%i: "", j+1);
            scanf(""%i"", p_stud[i].hpkt+j);
        }
        
    }
    
}

void student_ausgeben(Student* p_stud)
{
    static int i = 0;   
    int summe = *(p_stud[i].hpkt) + *(p_stud[i].hpkt+1) + *(p_stud[i].hpkt+2) + *(p_stud[i].hpkt+3) + *(p_stud[i].hpkt+4);
    printf(""\nStudent: %s %s\n"", p_stud[i].vorname, p_stud[i].nachname);
    printf(""Anzahl Punkte: %i\n"", summe);
    i++;
}

int main()
{
    Student daten[5];
    student_einlesen(daten);
    for(int i=0; i < 5; i++)
    {
       student_ausgeben(daten);
    }
    return 1;
}"
Name_313,VName_313,"#include <stdio.h>
#include <string.h>


typedef struct Student {
	char Vorname [21];
	char Nachname [21];
	int hapunkte [5];
} Student;

void student_einlesen(Student*p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->Vorname);fflush(stdin);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->Nachname);fflush(stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int b = 1;
	for ( int i = 0; i<5; i++) {
		printf(""%i: "",b);
		scanf(""%i"", &p_stud->hapunkte[i]);fflush(stdin);
		b++;
	}
	printf(""\n"");
}

void student_ausgeben(Student*p_stud){
	printf(""Student: %s %s\n"", p_stud->Vorname, p_stud->Nachname);
	int summe=0;
	for ( int c=0; c<5; c++){
		summe += p_stud->hapunkte[c];
		
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}

int main (){
	Student studierende[5];
	for ( int a = 0 ; a<5; a++){
	student_einlesen(&studierende[a]);
	}

	for ( int d =0 ; d < 5; d++){
		student_ausgeben(&studierende[d]);
	}
	return 0;
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_327,VName_327,"#include <stdio.h>
#include <stdlib.h>


typedef struct student {
    char prename[20];
    char surname[20];
    int points[5];
} Student;

void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->prename, p_stud->surname);
    int total = 0;
    for(int i=0;i<5; i++){
        total += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n\n"", total);
	return;
}

void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->prename);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->surname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5;i++){
        printf(""%d: "", i+1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
	return;
}

int main(void){
    int studentcount = 5;
    Student students[studentcount];
    for(int i = 0; i<studentcount; i++){
        Student tempstud;
        student_einlesen(&tempstud);
        students[i] = tempstud;
    }
    for(int i = 0; i<studentcount; i++){
        student_ausgeben(&students[i]);
    }
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct arrlist{
    int size;
    char **elems;
} Arrlist;

void arrlist_add(Arrlist* al, char buf[])
{
  char** elems = malloc(sizeof(char*) * (al->size+1) );
  for(int i=0; i<al->size; i++){
      elems[i] = al->elems[i];
  }
  elems[al->size] = malloc(strlen(buf));
  strcpy(elems[al->size], buf);
  al->elems = elems;
  al->size += 1;
}

void arrlist_del_item(Arrlist* al, int delete_index)
{
  char** elems = malloc(sizeof(char*) * (al->size-1) );
  int index=0;
  for(int i=0; i<al->size; i++){
    if(i == delete_index) continue;
    elems[index++] = al->elems[i];
  }
  al->elems = elems;
  al->size -= 1;
}

void arrlist_free(Arrlist* al)
{
  for(int i=0; i<al->size; i++){
      free(al->elems[i]);
  }
  printf(""Verlassen\n"");
}

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
    arrlist_free(&einkaufsliste);
    return(0);
}"
Name_301,VName_301,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_298,VName_298,"#include <stdio.h>

typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;

void student_einlesen(Student* p_stud){

  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", &p_stud->vorname[0]);
  getchar();
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", &p_stud->nachname[0]);
  getchar();
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; i++) {
    printf(""%i: "", i+1);
    scanf(""%i"", &p_stud->punkte[i]);
    getchar();
  }
  printf(""\n"");
}

void student_ausgeben(Student* p_stud){
  int summe = 0;
    for (int i = 0; i < 5; i++) summe += p_stud->punkte[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"", p_stud->vorname, p_stud->nachname, summe);
}


int  main() {
  Student array[5];
  for (int i = 0; i < 5; i++) {
    Student* p_stud = &array[i];
    student_einlesen(p_stud);
  }
  for (int i = 0; i < 5; i++) {
    Student* p_stud = &array[i];
    student_ausgeben(p_stud);
  }
  return 0;
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

typedef struct arrlist{
  int size;
  char **elems;
} Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

void arrlist_add(Arrlist* array, char* a){
  if (array == NULL) exit(1);
  char** tmp = realloc(array->elems, sizeof(char*) * (array->size +1));
  if(!tmp) {
    free(array->elems);
    return;
  }
  array->elems = tmp;
  char* tmp1 = realloc(array->elems[array->size], sizeof(char)*(strlen(a)+1));
  if(!tmp1) {
    free(array->elems[array->size]);
    return;
  }
  //array->elems[array->size] = a;
  //*array->elems[array->size] = strlen(a)+1;
  array->elems[array->size] = tmp1;
  strcpy(array->elems[array->size], a);
  array->size++;
  return;
}

void arrlist_del_item(Arrlist* array, int index){
  if(!array->elems) exit(1);
  if(array->size == 0) return;
  for(int i = index; i < array->size-1; i++) array->elems[i] = array->elems[i+1];
  array->size--;
  array->elems = realloc(array->elems, array->size * sizeof(char*));
  return;
}

void arrlist_free(Arrlist* array){
  free(array->elems);
  printf(""Verlassen\n"");
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q'){
            arrlist_free(&einkaufsliste);
            break;
          }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_318,VName_318,"#include<stdio.h>

typedef struct student{
	char vorname[20];
	char nachname[20];
	int noten[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i=0; i<5; i++){
		printf(""%i: "", i+1);
		scanf(""%i"", &p_stud->noten[i]);
	}
	printf(""\n"");
}

void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int i=0; i<5; i++){
		summe += p_stud->noten[i];
	}
	printf(""\nAnzahl Punkte: %i\n\n"", summe);
}

int main(){
	Student studierenden[5];
	for(int i=0; i<5; i++){
		student_einlesen(studierenden+i);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(studierenden+i);
	}

}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_326,VName_326,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h> 
#include <string.h>

typedef struct student{
	char vornamen[21];
	char nachnamen[21];
	int punkte[5];
}Student;


void student_einlesen(Student* p_stud){
	for (int j = 0; j < 5; j++)
	{
	  char vornamen[21] = """";
	  char nachnamen[21] = """";
	  printf(""Gebe den Vornamen ein: "");
	  scanf(""%s"", vornamen);
	  strcpy(p_stud[j].vornamen, vornamen);
	  printf(""Gebe nun den Nachnamen ein: "");
	  scanf(""%s"", nachnamen);
	  strcpy(p_stud[j].nachnamen, nachnamen);
	  printf(""Gebe nun nacheinander die 5 Punkte ein:\n "");
	  int punkte[5] = {0,0,0,0,0};
	  for(int i = 0; i < 5; i++)
	  {
	    printf(""%i: "", i+1);
	    scanf(""%i"", &punkte[i]);
	    p_stud[j].punkte[i] = punkte[i];
	  }
	  printf(""\n"");
	}
}

void student_ausgeben(Student* p_stud){
	for(int j = 0; j < 5; j++)
	{ 
	  int summe = 0;
	  printf(""Student: %s %s \n"", p_stud[j].vornamen, p_stud[j].nachnamen);
	  int punkte[5] = {0,0,0,0,0};
	  for (int i = 0; i < 5; i++)
	  {
	  	punkte[i] = p_stud[j].punkte[i];
		summe = summe + punkte[i]; 
	  }
	  printf(""Anzahl Punkte: %i\n\n"", summe);
	}
} 

int main(){
	 Student studenten[5];
	 student_einlesen(studenten);
	 student_ausgeben(studenten); 
}"
Name_355,VName_355,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>


struct Student {
    char vorname[20]; char nachname[20]; int punkte[5];
};
void student_einlesen(struct Student* p_stud){
    

        int a = 0;
        int b = 0;
        int c = 0;
        int d = 0;
        int e = 0;
        char vn[20];
        char nn[20];
        
        printf(""Gebe den Vornamen ein: "");
        scanf(""%s"", vn);
        printf(""Gebe nun den Nachnamen ein: "");
        scanf(""%s"", nn);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        printf(""1: "");
        scanf(""%i"", &a);
        printf(""2: "");
        scanf(""%i"", &b);
        printf(""3: "");
        scanf(""%i"", &c);
        printf(""4: "");
        scanf(""%i"", &d);
        printf(""5:\n"");
        scanf(""%i"", &e);
    strcpy(p_stud->vorname, vn);
    strcpy(p_stud->nachname, nn);
    p_stud->punkte[0] = a;
    p_stud->punkte[1] = b;
    p_stud->punkte[2] = c;
    p_stud->punkte[3] = d;
    p_stud->punkte[4] = e;
    

};
void student_ausgeben(struct Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    int x = p_stud->punkte[0] +  p_stud->punkte[1] + p_stud->punkte[2] + p_stud->punkte[3] + p_stud->punkte[4];
    printf(""Anzahl Punkte: %i\n\n"", x);
    
    
    
};

int main(void){
    struct Student liste[5];
    for(int i = 0; i<5; i++){
    student_einlesen(&liste[i]);
    }
    for(int i = 0; i<5; i++){
    student_ausgeben(&liste[i]);
    }
}"
Name_317,VName_317,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
 char firstname[21];
 char lastname[21];
 int Punkte[5];
}Student; 

void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->firstname);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->lastname);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for(int i = 1; i < 6; i++){
  printf(""%i: "", i);
  scanf(""%i"", &(p_stud->Punkte)[i - 1]);
 }
 printf(""\n"");
}

void student_ausgeben(Student* p){
 int Punkt = 0;
 printf(""Student: %s %s\n"", p->firstname, p->lastname);
 for(int j = 0; j < 5; j++){
  Punkt += (p->Punkte)[j]; 
 }
 printf(""Anzahl Punkte: %i\n\n"", Punkt);
} 


int main(){
 Student Studierende[5];
 for(int i = 0; i < 5; i++){
  student_einlesen(&Studierende[i]); 
 }
 for(int i = 0; i < 5; i++){
  student_ausgeben(&Studierende[i]);  
 } 
 return 0;
}"
Name_329,VName_329,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist
{
    int size;
    char* elems;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}
//arrlist_add(&einkaufsliste, buf);
void arrlist_add(Arrlist* arr, char* str)
{
    //copy string
    char string[strlen(str)];
    strcpy(string, str);
    char *p = string;

    if(arr == NULL) exit(1);
    char* tmp = (char*)realloc(arr->elems, strlen(str) * sizeof(char*) * (arr->size + 1));
    if(!tmp)
    {
    free(arr->elems);
    return;
    }
    arr->elems = tmp;
    arr->elems[arr->size] = (char*)p;
    arr->size++;
}


void arrlist_del_item(Arrlist* arr, int index)
{
    if(!arr) exit(1);
    if(arr->size == 0 || arr->size < index) return;
    arr->size--;
    if(arr->size > index)
    {
        for(int i = index; i < arr->size-1; i++) arr->elems[i] = arr->elems[i+1];
    }

    arr->elems = realloc(arr->elems, arr->size * sizeof(char*));
    return;
}

void arrlist_free(Arrlist* arr)
{
    free(arr->elems);
    return;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    arrlist_free(&einkaufsliste);
    printf(""Verlassen\n"");

    return(0);
}","#include <stdio.h>

int main()
{
    printf(""Hello Wolrd!\n"");
}"
Name_257,VName_257,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef char Str20[21];

typedef struct arrlist{
	int size;
	Str20* elems;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

void arrlist_add( Arrlist* al, char* a )
{
  al->size++;
  Str20* tmp = (Str20*)realloc( al->elems, (al->size)*sizeof(Str20) );
  if ( !tmp ) exit( -1 );
  al->elems = tmp;
  strcpy(al->elems[al->size-1], a);
}

void arrlist_del_item( Arrlist* al, int pos )
{
  if ( al->size == 0 )
     return;
 
	for (int i = pos; i < al->size-1; i++)
		strcpy(al->elems[i], al->elems[i+1]);
  al->size--;
  Str20* tmp = (Str20*)realloc( al->elems, (al->size)*sizeof(Str20) );
  if ( !tmp && al->size > 0 ) exit( -1 );
  al->elems = tmp;
}

void arrlist_free( Arrlist* al )
{
  free( al->elems );
  al->size = 0;
  printf(""Verlassen\n"");
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
    arrlist_free(&einkaufsliste);
    return(0);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef char Str20[21];
typedef struct student{
	Str20 firstName;
	Str20 lastName;
	int blatt[5];	
}Student;

void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
	strtok(buf, ""\n"");
    strcpy(p_stud->firstName, buf);
	char buf2[BUF_SIZE];
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf2, BUF_SIZE, stdin);
    buf2[BUF_SIZE-1] = '\0';
	strtok(buf2, ""\n"");
    strcpy(p_stud->lastName, buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "", i+1);
		int wert = 0;
		scanf(""%i"", &wert);
		getchar();
		p_stud->blatt[i]=wert;
	}
	printf(""\n"");
}

int summe(Student* p_stud){
	int summe = 0;
	for(int i = 0; i<5; i++){
		summe += p_stud->blatt[i];
	}
	return summe;
}

void student_ausgeben(Student* p_stud){
		printf(""Student: %s %s\n"", p_stud->firstName, p_stud->lastName);
		printf(""Anzahl Punkte: %i\n"", summe(p_stud));	
		printf(""\n"");
}

int main(){
	Student studenten[5];
	for(int i = 0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
	return 0;
}"
Name_515,VName_515,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist{
    int size;
    char **elems;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al,char buf[])
{
    if(al->size==0){
        al->elems=(char**)malloc(1);
    }
    else{
        al->elems=(char**)realloc(al->elems,1);
    }
    al->elems[al->size]=(char*)malloc(strlen(buf));
    strcpy(al->elems[al->size], buf);
    al->size+=1;
}

void arrlist_del_item(Arrlist* al,int i)
{
    al->size-=1;
    for(int k=0;k<(al->size-i);i++){
        strcpy(al->elems[i],al->elems[i+1]);
    }
    free(al->elems[al->size]);
}

void arrlist_free(Arrlist* al)
{
    for(int i=0;i<al->size;i++){
        free(al->elems[i]);
    }
    free(al->elems);
    al->size=0;
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            {
                printf(""Verlassen\n"");
                break;
            }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "",i+1);
		scanf(""%d"",&(p_stud->punkte[i]));
	}
	printf(""\n"");
}

void student_ausgeben(Student* p_stud){
	int summe= 0;
	for(int i=0;i<5;i++){
		summe+=p_stud->punkte[i];
	}
	printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"",p_stud->vorname,p_stud->nachname,summe);
}

int main(){
	Student p_stud[5];
	for(int i=0;i<5;i++){
		student_einlesen(&p_stud[i]);
	}
	for(int i=0;i<5;i++){
		student_ausgeben(&p_stud[i]);
	}
}"
Name_343,VName_343,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	getchar();
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	getchar();
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%i :"", i+1);
		scanf(""%i"", &p_stud->punkte[i]);
		getchar();
	}
}

void student_ausgeben(Student* p_stud){
	int sum=0;
	for(int i=0; i<5; i++){
	sum+=p_stud->punkte[i];
	}
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	printf(""Anzahl Punkte: %i\n"", sum);
}


int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_294,VName_294,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
 char Vorname[21];
 char Nachname[21];
 int Punkte[5];
}Student; 

void student_einlesen();

void student_ausgeben();

int main(){
 Student Studierende[5];
 for(int i = 0; i < 5; i++){
  student_einlesen(&Studierende[i]); 
 }
 for(int i = 0; i < 5; i++){
  student_ausgeben(&Studierende[i]);  
 } 
 return 0;
}

void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->Vorname);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->Nachname);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for(int i = 1; i < 6; i++){
  printf(""%i: "", i);
  scanf(""%i"", &(p_stud->Punkte)[i - 1]);
 }
 printf(""\n"");
}

void student_ausgeben(Student* p){
 int Punkt = 0;
 printf(""Student: %s %s\n"", p->Vorname, p->Nachname);
 for(int j = 0; j < 5; j++){
  Punkt += (p->Punkte)[j]; 
 }
 printf(""Anzahl Punkte: %i\n\n"", Punkt);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist{
 int size;
 char **elems;
}Arrlist; 

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char *Buf){
 int len = strlen(Buf);
 char **tmp = (char**)realloc(al->elems[al->size], (al->size + 1) * sizeof(char)); 
 for(int i = 0; i < len; i++){
  char *tmp = (char*)realloc(&al->elems[al->size][i], len * sizeof(char));
 }
 al->elems[al->size] = *tmp;
 printf(""%s"", Buf);
 //strcpy(al->elems[al->size], Buf);
 al->size++;
}

void arrlist_del_item(Arrlist* al, int j){
 if(al->size == 0)
  return;
 al->size--;
 char* tmp = (char*)realloc(al->elems, (al->size) * sizeof(char));
 if(!tmp) exit(-1);
 //for(j; j < al->size - 1; j++){
  //al->elems[j] = al->elems[j + 1];
 //}
 al->elems[al->size]= tmp;
}


void arrlist_free(Arrlist* al){
 printf(""Verlassen\n"");
 free(al->elems);
 al->size = 0;
}


int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];
    
    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
        {
         arrlist_free(&einkaufsliste);
            break;
  }

        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf"
Name_335,VName_335,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_333,VName_333,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist
{
    int size;
    char** elems; //Liste von Pointern aka PointerPointer 
}Arrlist;


void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* liste, char* elem_str) 
{
    // Platz reservieren und string in elem_ptr kopieren
    char* elem_ptr = malloc(strlen(elem_str)+1);
    if(elem_ptr == 0) exit(-1);
    strcpy(elem_ptr, elem_str);

    // elems um einen Platz vergroessern
    char** alt = liste->elems;
    liste->elems = realloc(alt, (liste->size +1)*sizeof(char*));
    if(liste==0) exit(-1); 

    //kopierten String in elems einfügen
    liste->elems[liste->size] = elem_ptr;

    //Listengroesse erhoehen
    liste->size += 1;
}


void arrlist_del_item(Arrlist* liste, int item_nr)
{
    if(item_nr >=0 && item_nr < liste->size)
    {
        //if(liste->size==0) exit(-1); //hier noch irgendwas freigeben??
        // item loeschen und andere nachschieben
        free(liste->elems[item_nr]);

        for(int i=item_nr; i<liste->size-1; i++)
        {
            liste->elems[i] = liste->elems[i+1];
        }

        // Groesse verringern
        liste->size -= 1;

        // Listengroesse verringern
        char** alt = liste->elems;
        liste->elems = realloc(alt, liste->size * sizeof(liste->elems));
        if(liste->elems == 0) exit(-1);
    }
}


void arrlist_free(Arrlist* liste) //noch was anderes freigeben??
{
    // Alles von elems freigeben
    for(int i=0; i<liste->size; i++)
    {
        free(liste->elems[i]);
    }

    // Groesse auf 0 setzen
    liste->size = 0;

    // elems freigeben und auf NULL setzen
    free(liste->elems);
    liste->elems = NULL;

    printf(""Verlassen\n"");
}





int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
        {
            arrlist_free(&einkaufsliste);
            break;
        }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <stdlib.h>


typedef struct student
{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;


void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->vorname);

    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->nachname);

    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    printf(""\n"");

    for(int i= 0; i<5; i++)
    {
        printf(""%i: "", (i+1));
        scanf(""%d"", &p_stud->punkte[i]); //getchar wegen enterzeichen?
        getchar();
    }
        printf(""\n"");
}


void student_ausgeben(Student* p_stud)
{
    int summe = 0;

    printf(""Student: %s %s \n"", p_stud->vorname, p_stud->nachname);
    for(int i=0; i<5; i++)
    {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}


int main()
{
    Student array[5];


    for(int i=0; i<5; i++)
    {
        student_einlesen(&array[i]);
    }

    for(int i=0; i<5; i++)
    {
        student_ausgeben(&array[i]);
    }

    return 0;
}"
Name_341,VName_341,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef char str20[21];

typedef struct arrlist{
    int size;
    str20* elems;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

void arrlist_add(Arrlist* hallo, char* buff ){
    hallo->size++;
    str20* tmp = (str20*)realloc(hallo->elems, (hallo->size)*(sizeof(str20)));
    if (!tmp) exit (-1);
    hallo->elems = tmp;
    strcpy(hallo->elems[hallo->size - 1], buff);
}

void arrlist_del_item(Arrlist* hallo, int buff){
  if ( hallo->size == 0 )
     return;
    for (int i = buff; i < hallo->size-1; i++)
        strcpy(hallo->elems[i], hallo->elems[i+1]);
    hallo->size--;
    str20* tmp = (str20*)realloc( hallo->elems, (hallo->size)*sizeof(str20) );
    if ( !tmp && hallo->size > 0 ) exit( -1 );
    hallo->elems = tmp;
}
    
void arrlist_free(Arrlist* hallo){
    free(hallo->elems);
    hallo->size = 0;
    printf(""Verlassen\n"");
}
    
int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
arrlist_free(&einkaufsliste);
    return(0);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef char Str20[21];
typedef struct student{
    Str20 firstName;
    Str20 lastName;
    int blatt[5];
}Student;

void student_einlesen(Student* p_copypaste){
    char buf[BUF_SIZE];
    printf(""Gebe den Vornamen ein: "");
    fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    strtok(buf, ""\n"");
    strcpy(p_copypaste->firstName, buf);
    char buf2[BUF_SIZE];
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(buf2, BUF_SIZE, stdin);
    buf2[BUF_SIZE-1] = '\0';
    strtok(buf2, ""\n"");
    strcpy(p_copypaste->lastName, buf2);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i<5; i++){
        printf(""%i: "", i+1);
        int halloooooooola = 0;
        scanf(""%i"", &halloooooooola);
        getchar();
        p_copypaste->blatt[i]=halloooooooola;
    }
    printf(""\n"");
}

int summe(Student* p_copypaste){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_copypaste->blatt[i];
    }
    return summe;
}

void student_ausgeben(Student* p_copypaste){
        printf(""Student: %s %s\n"", p_copypaste->firstName, p_copypaste->lastName);
        printf(""Anzahl Punkte: %i\n"", summe(p_copypaste));
        printf(""\n"");
}

int main(){
    Student copypaste[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&copypaste[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&copypaste[i]);
    }
    return 0;
}"
Name_336,VName_336,"#include <stdio.h>
#include <stdlib.h>

typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i= 0; i<5;i++){
	 	printf(""%i: "",i+1);
	 	scanf(""%i"",&p_stud->punkte[i]);
	} 
	printf(""\n"");
}

void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
	int summe =0;
	for (int i= 0; i<5;i++){
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %i \n\n"",summe);
}

int main(){
	Student studenten[5];
	for(int i = 0; i<5;i++) student_einlesen(studenten+i);
	for(int i = 0; i<5;i++) student_ausgeben(studenten+i);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct arrlist{
	unsigned int size;
	char** elems;
	unsigned int charcount;
}Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char* add){
	if(!al) return;
	al->size++;
	int addlenght = strlen(add);
	al->charcount += addlenght; 
	char** tmp = (char**) realloc(al->elems,al->charcount* sizeof(char));
	if(!tmp) {
		free (al->elems);
		exit(1);
	}
	al->elems = tmp;
	for(int i = 0; i < al->size; i++){
    	if(i==(al->size-1)) strcpy(al->elems[i],add);	
    }
}
void arrlist_del_item(Arrlist* al,int idx){
	if(!al) exit(1);
	if(al->size == 0) return;
	al->size--;
	al->charcount -= strlen(al->elems[idx]);  
	char** tmp = (char**) realloc(al->elems, al->charcount * sizeof(char));
	if(!tmp) {
		free (al->elems);
		exit(1);
	}
	al->elems = tmp;
	for (int i = idx; i < al->size; i++) al->elems[i]= al->elems[i+1];
}
void arrlist_free(Arrlist* al){
	printf(""Verlassen\n"");
	if(!al) return;
	free( al->elems );
  	al->size = 0;
}
int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_309,VName_309,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

typedef struct arrlist {
    int size;
    char** elems;
}Arrlist;

char waren[10][100];

void arrlist_init(Arrlist* al)
{
    al->size = 0;
    al->elems = NULL;
}

void arrlist_print(Arrlist* al)
{
    if (!al)
        return;
    if (!al->elems)
        return;
    printf(""# Ware\n"");
    for (int i = 0; i < al->size; i++)
        printf(""%d %s"", i, (char*)(al->elems[i]));
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

void arrlist_add(Arrlist* al,char* getbuf)
{
    if (!al) exit(1);
    char** tmp = (char**)realloc(al->elems, (al->size + 1)*8);
    if (!tmp) {
        free(al->elems);
        return;
    }

    strcpy(waren[al->size], getbuf);

    al->elems = tmp;
    al->elems[al->size] = waren[al->size];
    al->size++;
    return;
}

void arrlist_del_item(Arrlist* al,int n)
{
    if(!al) exit(1);
    if (al->size == 0)return;

    for (int m = n; m < al->size - 1; m++) 
        strcpy(waren[m], waren[m + 1]);
    

    al->size--;
    al->elems =(char**)realloc(al->elems,(al->size+1)*8);
    return;
}

void arrlist_free(Arrlist* al) 
{
    free(al->elems);
    printf(""Verlassen\n"");
    return;
}
 

int main() {
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);

    einkaufsliste.elems = (char**)malloc((einkaufsliste.size + 1) * 8);

    printf(""Einkaufsliste\n""
        ""-----------------\n""
        ""(h) - Hinzufuegen\n""
        ""(l) - Loeschen\n""
        ""(a) - Ausgeben\n""
        ""(q) - Verlassen\n"");

    do {
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if (choice == 'q') {
            arrlist_free(&einkaufsliste);
            break;
        }
        switch (choice) {
        case 'h':
        {
            printf(""Hinzufuegen: "");
            fgets(buf, BUF_SIZE, stdin);
            buf[BUF_SIZE - 1] = '\0';
            arrlist_add(&einkaufsliste, buf);
        }
        break;
        case 'l':
        {
            printf(""Löschen - Nummer: "");
            int i = 0;
            scanf(""%d"", &i);
            getchar();
            arrlist_del_item(&einkaufsliste, i);
        }
        break;
        case 'a':
            printf(""Ausgabe: \n"");
            arrlist_print(&einkaufsliste);
            break;
        default:
            printf(""Unbekannte Option!"");
            break;
        }
    } while (1);

    return(0);
}","#include<stdio.h>
#define num 5


typedef struct student {
	char vorname[20];
	char nachname[20];
	int punkt[5];
}Student;

void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->vorname);
	getchar();
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	getchar();
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%d: "",i+1);
		scanf(""%d"",&p_stud->punkt[i]);
		getchar();
                if(i==4) {printf(""\n"");}
	}
	return;
}

void student_ausgeben(Student* p_stud) {
	int sum = 0;
	
	for (int i = 0; i < 5; i++) {
		sum = sum + p_stud->punkt[i];
	}
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"",sum);
}


int main() {
	Student arr[num];
	for (int i = 0; i < 5;i++) {
		student_einlesen(&arr[i]);
	}
	for (int i = 0; i < 5; i++) {
		student_ausgeben(&arr[i]);
	}
	return 0;
}"
Name_354,VName_354,"#include <stdio.h>
#include <string.h>

typedef struct student {
	char firstname[21];
	char lastname[21];
	int punkte[5];
} Student;

void readline(char* strbuffer, unsigned int buffersize)
{
	fgets(strbuffer, buffersize, stdin);
	int p = strlen(strbuffer);
	strbuffer[p-1] = '\0';
}

void student_einlesen(Student* p_stud)
{
	for (int i = 0; i < 5; i++)
	{
		printf(""Gebe den Vornamen ein: "");
		readline(p_stud[i].firstname, 20);
		printf(""Gebe nun den Nachnamen ein: "");
		readline(p_stud[i].lastname, 20);
		
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for (int j = 0; j < 5; j++)
		{
			printf(""%d: "", j+1);
			scanf(""%d"", &p_stud[i].punkte[j]);
			getchar();
		}
		printf(""\n"");
	}
}

void student_ausgeben(Student* p_stud)
{
	for (int i = 0; i < 5; i++)
	{
		printf(""Student: %s %s\n"", p_stud[i].firstname, p_stud[i].lastname);
		
		int summe = 0;
		for (int j = 0; j < 5; j++)
		{
			summe = summe + p_stud[i].punkte[j];
		}
		printf(""Anzahl Punkte: %d\n\n"", summe);
	}
}

int main() 
{
	Student students[5];
	student_einlesen(students);
	student_ausgeben(students);
	return 0;
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist {
	unsigned int size;
	char** elems;
} Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
void arrlist_add(Arrlist* al, char* buf)
{
	// strlen(char* str) und strcpy(char* dest, char* src)
	
	if (al->elems == NULL)
	{
		al->elems = (char**) malloc(sizeof(char*));
	}
	
	al->size++;
	
	al->elems = (char**) realloc(al->elems, (al->size)*sizeof(char*));
	if (al->elems == 0) exit(-1);
	
	// al = (Arrlist*) realloc(al, (al->size)*sizeof(Arrlist));
	// if (al == 0) exit(-1);
	
	// al->elems[al->size-1] = (char*) realloc(al->elems[al->size-1], strlen(buf)*sizeof(char));
	// if(al->elems[al->size-1] == 0) exit(-1);
	
	strcpy(al->elems[(al->size)-1], buf);
}

void arrlist_del_item(Arrlist* al, int index)
{
	al->size--;
	for (int i = 0; i == index; i++) {
		al->elems[i] = NULL;
	}
}

void arrlist_free(Arrlist* al)
{
	printf(""Verlassen\n"");
	free(al);
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
        {
        	arrlist_free(&einkaufsliste);
        	break;
        }
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_339,VName_339,"#include <stdio.h>
#include <stdlib.h>


typedef struct student
{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;


void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->vorname);

    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->nachname);

    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    printf(""\n"");

    for(int i= 0; i<5; i++)
    {
        printf(""%i: "", (i+1));
        scanf(""%d"", &p_stud->punkte[i]); //getchar wegen enterzeichen?
        getchar();
    }
        printf(""\n"");
}


void student_ausgeben(Student* p_stud)
{
    int summe = 0;

    printf(""Student: %s %s \n"", p_stud->vorname, p_stud->nachname);
    for(int i=0; i<5; i++)
    {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}


int main()
{
    Student array[5];


    for(int i=0; i<5; i++)
    {
        student_einlesen(&array[i]);
    }

    for(int i=0; i<5; i++)
    {
        student_ausgeben(&array[i]);
    }

    return 0;
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist 
{
    int size;
    char** elems; 
}Arrlist;



void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}


void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}


/* TODO: arrlist_add, arrlist_del_item und arrlist_free */



void arrlist_add(Arrlist* liste, char* elem_str)
{
    // create new array and then copy
    // maybe resize struct???
    // strcpy(dest, ..);
    char* elem_ptr = malloc(strlen(elem_str)+1);
    if(elem_ptr == 0) exit(-1);
    strcpy(elem_ptr, elem_str);

    char** alt = liste->elems;
    liste->elems = realloc(alt, (liste->size +1)*sizeof(char*));
    if(liste==0) exit(-1);

    liste->elems[liste->size] = elem_ptr;

    liste->size += 1;
}


void arrlist_del_item(Arrlist* liste, int Index)
{
    if(Index >=0 && Index < liste->size)
    {

        free(liste->elems[Index]);

        for(int i=Index; i<liste->size-1; i++)
        {
            liste->elems[i] = liste->elems[i+1];
        }

        // Groesse verringern
        liste->size -= 1;

        // Listengroesse verringern
        char** alt = liste->elems;
        liste->elems = realloc(alt, liste->size * sizeof(liste->elems));
        if(liste->elems == 0) exit(-1);
    }
}


void arrlist_free(Arrlist* liste) 
{
    // Maybe free memory someway
    
    for(int i=0; i<liste->size; i++)
    {
        free(liste->elems[i]);
    }


    liste->size = 0;

    free(liste->elems);
    liste->elems = NULL;

    printf(""Verlassen\n"");
}





int main()
{
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();

        if(choice == 'q')
        {
            arrlist_free(&einkaufsliste);
            arrlist_print(&einkaufsliste);
            break;
        }

        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_335,VName_335,"#include <stdio.h>

typedef struct student{
    char vn[21];
    char nn[21];
    int noten[5];
}Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",p_stud->vn);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",p_stud->nn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "",i+1);
        scanf(""%i"",&p_stud->noten[i]);
    }
    printf(""\n"");
}

void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vn,p_stud->nn,p_stud->noten[0]+p_stud->noten[1]+p_stud->noten[2]+p_stud->noten[3]+p_stud->noten[4]);
}

int main(){
    Student list[5];
    for(int i = 0; i < 5; i++) student_einlesen(&list[i]);
    for(int i = 0; i < 5; i++) student_ausgeben(&list[i]);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_340,VName_340,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
  
  
  
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include<stdio.h>
#include <string.h>


void readLine( char* strbuffer, unsigned int buffersize )
{
    char format[30] = """";
    sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
    scanf( format, strbuffer );
    
}



typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vorname, 20);
    
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachname, 20);
    
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: "");
    scanf(""%i"", &p_stud-> punkte[0]);
    
    
    printf(""2: "");
    scanf(""%i"", &p_stud-> punkte[1]);
    
    printf(""3: "");
    scanf(""%i"", &p_stud-> punkte[2]);
    
    printf(""4: "");
    scanf(""%i"", &p_stud-> punkte[3]);

    printf(""5: "");
    scanf(""%i"", &p_stud-> punkte[4]);
    getchar();
    printf(""\n"");

}


void student_ausgeben(Student* p_stud){

    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
  
    printf(""Anzahl Punkte: %i\n"", p_stud->punkte[0] + (p_stud->punkte[1]) + (p_stud->punkte[2]) + (p_stud->punkte[3]) + (p_stud->punkte[4]));
    printf(""\n"");

}




int main(){
    
    Student student_nr[5];
    
    for (int i = 0; i < 5; i++) {
        student_einlesen(&student_nr[i]);
        }
    
    for (int i = 0; i < 5; i++) {
        student_ausgeben(&student_nr[i]);
    }

}"
Name_337,VName_337,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_344,VName_344,"#include <stdio.h>

typedef struct student{
char vorname [20];
char nachname [20];
int punkte[5];
}Student;

void student_einlesen(Student*p_stud){

printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);

printf(""Gebe nun den Nachnamen ein: "");
scanf (""%s"", p_stud->nachname);

printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int j=1; j<=5; j++){
    printf(""%d: "", j);
    scanf(""%d"", &p_stud->punkte[j-1]);
    fflush(stdin);

}
printf(""\n"");

}

void student_auslesen(Student*p_stud){
    printf(""Student: %s %s"", p_stud->vorname, p_stud->nachname);
    int summe=0;
    for(int i=0; i<=4; i++){
        summe=summe+p_stud->punkte[i];

    }
    printf(""\nAnzahl Punkte: %d\n\n"", summe);
}

int main (){
    Student liste [5];

    for(int i=0; i<=4; i++){
        student_einlesen(&liste[i]);
    }
for(int i=0; i<=4; i++){
    student_auslesen(&liste[i]);
}
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_338,VName_338,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_294,VName_294,"#include <stdio.h>

typedef struct student{
	char vornamen[21];
	char nachnamen[21];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""\nGebe den Vornamen ein: "");
	scanf(""%s"",p_stud->vornamen);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->nachnamen);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for (int i=0;i<5;i++){
		printf(""%i: "",i+1);
		scanf(""%i"",&(p_stud->punkte[i]));
	}
}

void student_ausgeben(Student* p_stud){
	int sum=0;
	printf(""\nStudent: %s %s\n"",p_stud->vornamen,p_stud->nachnamen);
	for (int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %i\n"",sum);
}

int main(){
	Student stud[5];
	for (int i=0;i<5;i++){
		student_einlesen(&stud[i]);
	}
	for (int i=0;i<5;i++){
		student_ausgeben(&stud[i]);
	}
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct Arrlist{
	unsigned int size;
	char** elems;
}Arrlist;

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

void arrlist_add(Arrlist* al, char* buf){
	al->size++;
	char** tmp1 = (char **)realloc( al->elems, (al->size)*sizeof(char*) );
	al->elems = tmp1;
	char* tmp2 = (char *)realloc( al->elems[al->size-1], sizeof(char)*strlen(buf) );
	al->elems[al->size-1]=tmp2;
	strcpy(al->elems[(al->size)-1], buf);
}

void arrlist_del_item(Arrlist* al, int i){
	char* tmp3 = al->elems[al->size-1];
	for ( int m = i; m < al->size-1; m++ ){
		char* tmp2 = (char *)realloc( al->elems[m], sizeof(char)*strlen(al->elems[m+1]) );
		al->elems[m]=tmp2;
		strcpy(al->elems[m],al->elems[m+1]);
	}
	al->size--;
	char** tmp = (char**)realloc( al->elems, (al->size)*sizeof(char) );
	al->elems = tmp;
	strcpy(al->elems[(al->size)-1], tmp3);
}

void arrlist_free(Arrlist* al){
	arrlist_init(al);
	printf(""Verlassen\n"");
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
	arrlist_free(&einkaufsliste);
    return(0);
}"
Name_351,VName_351,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_346,VName_346,"#include <stdio.h>
#include <stdlib.h>

typedef struct Student{
  char vorname[21];
  char nachname[21];
  unsigned int ha[5];
}Student;

void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);

int main()
{
  Student student_list[5];

  for (unsigned int i = 0; i < 5; i++)
    student_einlesen(&student_list[i]);

  for (unsigned int i = 0; i < 5; i++)
    student_ausgeben(&student_list[i]);
}

void student_einlesen(Student* p_stud)
{
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"",p_stud->vorname);
  getchar();

  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"",p_stud->nachname);
  getchar();

  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (unsigned int i = 0; i < 5; i++){
    printf(""%u: "", i+1);
    scanf(""%u"",&p_stud->ha[i]);
    getchar();
  }
  printf(""\n"");
}

void student_ausgeben(Student* p_stud)
{
  printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
  unsigned int sum = 0;
  for (unsigned int i = 0; i < 5; i++){
    sum += p_stud->ha[i];
  }
  printf(""Anzahl Punkte: %u\n\n"", sum);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_356,VName_356,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

typedef struct Arrlist {
    char **elems;
    size_t realsize;
    size_t size;
} Arrlist;

void arrlist_init(Arrlist* al)
{
  al->realsize = 8;
  al->size = 0;
  al->elems  = malloc(8 * sizeof(char *));
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0, j = 0; i < al->size; ++i)
        if (al->elems[i])
            printf(""%d %s"",j++, al->elems[i]);
}

void arrlist_free(Arrlist *al)
{
    for (size_t i = 0; i < al->size; ++i)
        free(al->elems[i]);
    free(al->elems);
}

void arrlist_del_item(Arrlist *al, size_t i)
{
    al->elems[i] = NULL;
}

void arrlist_add(Arrlist *al, const char *str)
{
    al->elems[al->size] = malloc(strlen(str) + 1);
    strcpy(al->elems[al->size], str);
    if (++al->size == al->realsize)
        al->elems = realloc(al->elems, al->realsize *= 2);
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
    
    arrlist_free(&einkaufsliste);
    printf(""Verlassen\n"");

    return(0);
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
    char vorname[20];
    char nachname[20];
    int p[5];
} Student;

void student_ausgeben(const Student *student)
{
    printf(""Student: %s %s\n"", student->vorname, student->nachname);
    printf(""Anzahl Punkte: %d\n\n"", student->p[0] +
    student->p[1] + student->p[2] + student->p[3] +
    student->p[4]);
    
}

void student_einlesen(Student *student)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", student->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", student->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%d: "", i + 1);
        scanf(""%d"", student->p + i);
    }
    puts("""");
}

int main(void)
{
    Student studenten[5];
    
    for (size_t i = 0; i < 5; ++i)
        student_einlesen(studenten + i);
    for (size_t i = 0; i < 5; ++i)
        student_ausgeben(studenten + i);
}"
Name_348,VName_348,"/*Deklariert zunächst eine Struktur struct student und damit den Typ Student (typedef). Diese soll folgende Elemente enthalten:

Einen Vornamen von maximal 20 Zeichen Länge
Einen Nachnamen von maximal 20 Zeichen Länge
Einen Array, in welchem die Punkte von 5 Hausaufgabenblättern gespeichert werden können (Nur ganzzahlige Punkte sind erforderlich)
Schreibt eine main()-Funktion, welche zuerst ein Array mit Platz für 5 Studierende erstellt.
Ruft nun für jeden Studenten eine (selbst zu schreibende!) Funktion void student_einlesen(Student* p_stud) auf,
welche die Daten vom Nutzer einliest,
in die Struktur schreibt
und diese dann in dem Array speichert.
Wenn alle Daten eingelesen wurden, ruft für jeden Studenten die (selbst zu schreibende...) Funktion void student_ausgeben(Student* p_stud) auf,
welche alle Daten der übergebenen Struktur im Terminal ausgibt.
Die Übergabe der Struktur soll by-reference, also als Zeiger erfolgen.
Anstatt der Punkte jedes Aufgabenbogens soll die Summe aller Punkte ausgegeben werden.*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student {
	char vorname[21];
	char nachname[21];
	int punkte[5];
} Student;

void name_einlesen(char* name)
{
	name = fgets(name, 20, stdin);
	//fgets liest auch das \n oder ein ähnliches Zeichen am Schluß mit ein, wird durch \0 ersetzt - das ginge auch mit chomp()
	name[strlen(name)-1] = '\0';
}

void student_einlesen (Student* p_stud)
{
	//den Vornamen einlesen
	char first[21];
	printf(""Gebe den Vornamen ein: "");
	name_einlesen(first);
	for(int i = 0; i < 21; i++)
		p_stud->vorname[i] = first[i];

	//den Nachnamen einlesen
	char last[21];
	printf(""Gebe nun den Nachnamen ein: "");
	name_einlesen(last);
	for(int i = 0; i < 21; i++)
		p_stud->nachname[i] = last[i];
	
	//die Punkte einlesen
	int points[5];
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i+1);
		scanf(""%i"", &points[i]);
		getchar();
	}
	for(int i = 0; i < 5; i++)
		p_stud->punkte[i] = points[i];
	printf(""\n"");
}

void student_ausgeben (Student* p_stud)
{
	//Ausgabe von Vor- und Nachname
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	
	//Berechnen und Ausgeben der Summe über alle Punkte
	int summe = 0;
	for (int i = 0; i < 5; i++)
		summe += p_stud->punkte[i];
	printf(""Anzahl Punkte: %i\n"", summe);
}

int main()
{
	//Array mit Platz für fünf Student-Elemente
	Student studenten[5];
	//für jedes Element student_einlesen() aufrufen
	for (int i = 0; i<5; i++)
		student_einlesen(&studenten[i]);
	//für jedes Element student_ausgeben() aufrufen
	for (int i = 0; i<5; i++)
		student_ausgeben(&studenten[i]);
}","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */
typedef struct arrlist {
	char** elems;
	int size;
} Arrlist;

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */
//Diese Funktion fügt am Ende der Arrayliste einen String hinzu. Dazu muss der übergebene String kopiert und das interne Array vergrößert werden.
void arrlist_add(Arrlist* liste, char* string)
{
	//liste gültige Adresse?
	if(liste == NULL || string == NULL)
		return;

	//Speicherbedarf neu berechnen, Fehler bei Speicherreservierung -> Meldung und Funktion beenden
	char** tmp = realloc (liste->elems, (liste->size + 1)*sizeof(char*));
	if(tmp == NULL)
	{
		printf(""Hier ist kein Platz mehr. Das Element kann nicht angehängt werden.\n"");
		exit(-1);
	}
	//wenn Speicherreservierung erfolgreich: Speicherbereich von tmp dem Array von liste zuweisen
	liste->elems = tmp;
	
	char* tmp_string;
	tmp_string = (char*) malloc ((strlen(string) + 1)*sizeof(char));
	if(tmp_string == NULL)
	{
		printf(""Hier ist kein Platz mehr. Das Element kann nicht angehängt werden.\n"");
		exit(-1);
	}
	//string in tmpstring kopieren
	strcpy(tmp_string, string);
	
	//tmp_string-Adresse an letzter Stelle von liste eintragen
	liste->elems[liste->size] = tmp_string;
	
	//Arraygröße aktualisieren
	liste->size++;
	
	return;
}
//Diese Funktion soll unter anderem einen Index von dem zu löschenden Listeneintrag übergeben bekommen. Außerdem soll die Liste verkleinert werden.
void arrlist_del_item(Arrlist* liste, int index)
{
	//liste gültige Adresse?
	if(liste == NULL)
		return;
	
	//index innerhalb des Arrays?
	if(index >= liste->size)
	{
		printf(""Gewünschter Index liegt außerhalb des Arrays.\n"");
		return;
	}
	
	//Listeneintrag an Stelle index löschen
	free(liste->elems[index]);
	
	//alle Element hinter dem gelöschten um je eine Stelle nach vorn kopieren
	for(int i = index; i < (liste->size-1); i++)
		liste->elems[i] = liste->elems[i+1];
	
	//Speicherplatz neu berechnen
	char** tmp = realloc(liste->elems, (liste->size-1)*sizeof(char*));
	
	//wenn Speicherreservierung erfolgreich: Speicherbereich von tmp dem Array von liste zuweisen
	liste->elems = tmp;
	
	//Arraygröße aktualisieren
	liste->size--;
}

//Fkt. arrlist_free, die die ihr übergebene Datenstruktur und beinhaltende Strings wieder freigibt. Hinweis: Ihr müsst in die Funktion - oder vor oder nach Aufruf -  noch printf(""Verlassen\n""); einbauen, sonst schlagen die Tests fehl.
void arrlist_free(Arrlist* liste)
{
	//liste gültige Adresse?
	if(liste == NULL)
		return;
	
	if(liste->elems != NULL)
	{
		for(int i = 0; i < liste->size; i++)
		{
			if(liste->elems[i] == NULL)
			{
				printf(""Hier steht kein Eintrag.\n"");
				continue;
			}
			free(liste->elems[i]);
		}
		free(liste->elems);
	}
	liste->size = 0;
	printf(""Verlassen\n"");
}

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);
    
	arrlist_free(&einkaufsliste);
    return(0);
}"
Name_349,VName_349,-,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_305,VName_305,"#include <stdio.h>
#include <stdlib.h>","#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}"
Name_352,VName_352,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student {
	char vorname[21];
	char nachname[21];
	int punkte[5];
} Student;


void readline(char* strbuffer, unsigned int buffersize) {
	fgets(strbuffer, buffersize, stdin);
	int p = strlen(strbuffer);
	strbuffer[p - 1] = '\0';
}


void student_einlesen(Student* p_stud) {

	for (int i = 0; i < 5; i++) {
		if (i != 0) getchar();
		printf(""Gebe den Vornamen ein: "");
		readline(p_stud->vorname, 20);

		printf(""Gebe nun den Nachnamen ein: "");
		readline(p_stud->nachname, 20);

		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for (int j = 0; j < 5; j++) {
			printf(""%d: "", j + 1);
			scanf(""%d"", &p_stud->punkte[j]);
		}
		printf(""\n"");

		p_stud++;
	}
}

void student_ausgeben(Student* p_stud) {
	for (int i = 0; i < 5; i++) {
		int summe = 0;
		printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);

		for (int j = 0; j < 5; j++) {
			summe += p_stud->punkte[j];
		}
		printf(""Punkte: %d\n\n"", summe);

		p_stud++;
	}
}


int main() {

	Student* p_stud = (Student*)malloc(2*sizeof(Student*));

	student_einlesen(p_stud);

	student_ausgeben(p_stud);

	return 0;
}"
Name_345,VName_345,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
Name_357,VName_357,"#include <stdlib.h> // malloc-Familie, exit()
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

#define BUF_SIZE 100

/* TODO: Arrlist */

void arrlist_init(Arrlist* al)
{
  al->size = 0;
  al->elems  = NULL;
}

void arrlist_print(Arrlist* al)
{
    if(!al)
        return;
    if(!al->elems)
        return;
    printf(""# Ware\n"");
    for(int i = 0; i < al->size; i++)
        printf(""%d %s"",i, al->elems[i]);
}

/* TODO: arrlist_add, arrlist_del_item und arrlist_free */

int main(){
    Arrlist einkaufsliste;
    char choice = 'q';
    char buf[BUF_SIZE];

    arrlist_init(&einkaufsliste);
    printf(""Einkaufsliste\n""
            ""-----------------\n""
            ""(h) - Hinzufuegen\n""
            ""(l) - Loeschen\n""
            ""(a) - Ausgeben\n""
            ""(q) - Verlassen\n"");

    do{
        printf(""\nAuswahl: "");
        choice = getchar();
        getchar();
        if(choice == 'q')
            break;
        switch(choice){
            case 'h':
                {
                    printf(""Hinzufuegen: "");
                    fgets(buf, BUF_SIZE, stdin);
                    buf[BUF_SIZE-1] = '\0';
                    arrlist_add(&einkaufsliste, buf);
                }
                break;
            case 'l':
                {
                    printf(""Löschen - Nummer: "");
                    int i = 0;
                    scanf(""%d"", &i);
                    getchar();
                    arrlist_del_item(&einkaufsliste, i);
                }
                break;
            case 'a':
                printf(""Ausgabe: \n"");
                arrlist_print(&einkaufsliste);
                break;
            default:
                printf(""Unbekannte Option!"");
                break;
        }
    }while(1);

    return(0);
}",-
