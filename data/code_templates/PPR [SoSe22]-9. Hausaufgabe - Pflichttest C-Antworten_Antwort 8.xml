<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 3420489  -->
  <question type="coderunner">
    <name>
      <text>Faktorisierung (Neu; FERTIG)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Schreiben Sie eine Funktion, die zu einer ganzen Zahl zwei mögliche Faktoren, die zusammen die übergebene Zahl ergeben, zurückgibt.<br>Verwenden Sie für die Funktion den folgenden <strong>Funktionskopf</strong>:<br></p><ul><li>void factorize(long {{ cr_random.product }}, long *{{ cr_random.f1 }}, long *{{ cr_random.f2 }})<br></li></ul><p></p>Dabei soll folgender <strong>Algorithmus </strong><strong>implementiert </strong>werden:<br><p></p><ul><li><strong>{{ cr_random.product }}</strong><strong></strong> = 0 ---&gt; <strong>{{ cr_random.f1 }}</strong><strong></strong> = 1;&nbsp;&nbsp; <strong>{{ cr_random.f2 }}</strong><strong></strong> = <strong>{{ cr_random.product }}</strong><strong></strong></li><li><strong>{{ cr_random.product }}</strong><strong></strong> = 1 ---&gt; <strong>{{ cr_random.f1 }}</strong><strong></strong> = 1;&nbsp;&nbsp; <strong>{{ cr_random.f2 }}</strong><strong></strong> = <strong>{{ cr_random.product }}</strong><strong></strong></li><li><strong>ansonsten</strong>: Wenn die Hälfte des Produktes keine ganzzahlige Vielfache vom Produkt selbst ist, verringere die Hälfte um 1 und <strong>prüfe mit der neuen Zahl erneut</strong><br>&nbsp;&nbsp;&nbsp;&nbsp; <strong>sobald </strong>es eine Vielfache des Produktes ist ---&gt; {{ cr_random.f1 }} = <em>die ganzzahlige Vielfache vom Produkt</em>;&nbsp;&nbsp; {{ cr_random.f2 }} = <em>das Produkt</em> / <em>die ganzzahlige Vielfache vom Produkt</em></li></ul><p><em><br></em></p><p>Da C-Funktionen immer nur <u>einen</u> Rückgabewert haben können (und wir 2 Werte zurückgeben wollen), soll die Wertrückgabe über <strong>Zeiger </strong>erfolgen.<br>Schreiben Sie <strong>außerdem </strong>eine <em>main</em>-Funktion, die eine ganze Zahl vom Benutzer <strong>einliest</strong>, diese mit Hilfe der Funktion in Faktoren zerlegt und anschließend die eingegebene Zahl und die Faktoren auf der Konsole <strong>ausgibt</strong>.</p><p>Verwendet die <span class="" style="color: rgb(197, 14, 31);">vorgegebenen Variablennamen</span>.<br><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>c_advanced</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0, 0, 5, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>32</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[#include <stdio.h>

void factorize(long {{ cr_random.product }}, long *{{ cr_random.f1 }}, long *{{ cr_random.f2 }})
{
	// Your factorization
}

int main(){
	printf("Please enter an Integer: ");
	printf("Possible Factors of %ld are %ld and %ld.\n");
	return 0;
}
]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[#include <stdio.h>

void factorize(long {{ cr_random.product }}, long *{{ cr_random.f1 }}, long *{{ cr_random.f2 }})
{
	unsigned long div = {{ cr_random.product }}/2;

	if({{ cr_random.product }} == 0 || {{ cr_random.product }} == 1){
		*{{ cr_random.f1 }} = 1;
		*{{ cr_random.f2 }} = {{ cr_random.product }};
		return;
	}
	while(({{ cr_random.product }}%div)!=0)
		div--;
	*{{ cr_random.f1 }} = div;
	*{{ cr_random.f2 }} = {{ cr_random.product }}/div;
	return;
}



int main(){
	long {{ cr_random.product }} = 0, {{ cr_random.f1 }} = 0, {{ cr_random.f2 }} = 0;
	printf("Please enter an Integer: ");
	scanf("%ld", &{{ cr_random.product }});
	getchar();
	factorize({{ cr_random.product }}, &{{ cr_random.f1 }}, &{{ cr_random.f2 }});
	printf("Possible Factors of %ld are %ld and %ld.\n",
			{{ cr_random.product }}, {{ cr_random.f1 }}, {{ cr_random.f2 }});
	return 0;
}
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams><![CDATA[{
    "cr_studentFileName": "StudentAnswer",
    {% set pool = [["faktor1", "factor1", "zahl1", "nummer1"],
    ["faktor2", "factor2", "zahl2", "nummer2"],
    ["produkt", "product", "ergebnis", "resultat"]] %}
    "cr_random_pool": {{ pool|json_encode(constant("JSON_PRETTY_PRINT")) }},
    {% set random_number = random((pool[0]|length)-1) %}
    "cr_random": {
        "f1": "{{ pool[0][random_number] }}",
        "f2": "{{ pool[1][random_number] }}",
        "product": "{{ pool[2][random_number] }}"
    }
}]]></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald><![CDATA[{"cr_studentFileName":"StudentAnswer","cr_random_pool":[["faktor1","factor1","zahl1","nummer1"],["faktor2","factor2","zahl2","nummer2"],["produkt","product","ergebnis","resultat"]],"cr_random":{"f1":"faktor1","f2":"faktor2","product":"produkt"}}]]></templateparamsevald>
    <twigall>1</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// 1. Test
main();</text>
      </testcode>
      <stdin>
                <text>50</text>
      </stdin>
      <expected>
                <text>Please enter an Integer: Possible Factors of 50 are 25 and 2.
</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")
test_if_suspicious()]]></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// 2. Test
main();</text>
      </testcode>
      <stdin>
                <text>1</text>
      </stdin>
      <expected>
                <text>Please enter an Integer: Possible Factors of 1 are 1 and 1.
</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")
test_if_suspicious()]]></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// 3. Test
main();</text>
      </testcode>
      <stdin>
                <text>27</text>
      </stdin>
      <expected>
                <text>Please enter an Integer: Possible Factors of 27 are 9 and 3.
</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")
test_if_suspicious()]]></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// 4. Test
main();</text>
      </testcode>
      <stdin>
                <text>100</text>
      </stdin>
      <expected>
                <text>Please enter an Integer: Possible Factors of 100 are 50 and 2.
</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")
test_if_suspicious()]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// 5. Test (Primzahl)
main();</text>
      </testcode>
      <stdin>
                <text>19</text>
      </stdin>
      <expected>
                <text>Please enter an Integer: Possible Factors of 19 are 1 and 19.
</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")
test_if_suspicious()]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[long {{ cr_random.product }} = 1, {{ cr_random.f1 }}, {{ cr_random.f2 }};
factorize({{ cr_random.product }}, &{{ cr_random.f1 }}, &{{ cr_random.f2 }});
printf("{{ cr_random.product }} = %li; {{ cr_random.f1 }} = %li; {{ cr_random.f2 }} = %li\n", {{ cr_random.product }}, {{ cr_random.f1 }}, {{ cr_random.f2 }});]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>{{ cr_random.product }} = 1; {{ cr_random.f1 }} = 1; {{ cr_random.f2 }} = 1
</text>
      </expected>
      <extra>
                <text>test_if_suspicious()</text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[long {{ cr_random.product }} = 0, {{ cr_random.f1 }}, {{ cr_random.f2 }};
factorize({{ cr_random.product }}, &{{ cr_random.f1 }}, &{{ cr_random.f2 }});
printf("{{ cr_random.product }} = %li; {{ cr_random.f1 }} = %li; {{ cr_random.f2 }} = %li\n", {{ cr_random.product }}, {{ cr_random.f1 }}, {{ cr_random.f2 }});]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>{{ cr_random.product }} = 0; {{ cr_random.f1 }} = 1; {{ cr_random.f2 }} = 0
</text>
      </expected>
      <extra>
                <text>test_if_suspicious()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[long {{ cr_random.product }} = 66, {{ cr_random.f1 }}, {{ cr_random.f2 }};
factorize({{ cr_random.product }}, &{{ cr_random.f1 }}, &{{ cr_random.f2 }});
printf("{{ cr_random.product }} = %li; {{ cr_random.f1 }} = %li; {{ cr_random.f2 }} = %li\n", {{ cr_random.product }}, {{ cr_random.f1 }}, {{ cr_random.f2 }});]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>{{ cr_random.product }} = 66; {{ cr_random.f1 }} = 33; {{ cr_random.f2 }} = 2
</text>
      </expected>
      <extra>
                <text>test_if_suspicious()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob ein for- oder while-Konstrukt verwendet wurde</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!
</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(re.search("while", S_A) or re.search("for", S_A))
test_if_suspicious()]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob der Nutzer nach einer Zahl gefragt wird</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(re.search("scanf", S_A))
test_if_suspicious()]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
<file name="Terminal.java" path="/" encoding="base64"></file>
<file name="__Tester__.java" path="/" encoding="base64">cHVibGljIGNsYXNzIF9fVGVzdGVyX18geyANCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7DQoJCcKpIlxcbiIuam9pbihbbGluZSBmb3IgbGluZSBpbiBUX0Muc3BsaXRsaW5lcygpXSnCrg0KICAgIH0gDQp9DQo=</file>
    </testcases>
  </question>

</quiz>