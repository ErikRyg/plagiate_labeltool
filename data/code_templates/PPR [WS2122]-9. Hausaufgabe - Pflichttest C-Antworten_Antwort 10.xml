<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 2261548  -->
  <question type="coderunner">
    <name>
      <text>Ohne Worte (String kopieren)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<ol>
    <li>Schreiben Sie eine Funktion&nbsp;<tt>void ersetzen(char* dest, int zahl, char* src)</tt>die den String <tt>src</tt> in den String <tt>dest</tt> kopiert (und dabei überschreibt), allerdings&nbsp;</li>
    <li>
        <ul>
            <li>nur maximal <tt>zahl</tt> Zeichen<br></li>
            <li>nur maximal bis zum Ende von <tt>dest</tt><br></li>
            <li>nur maximal den gesamten String <tt>src</tt>.<br></li>
        </ul>
    </li>
    <li>Schreiben Sie eine Funktion <tt>void umdrehen( char* str )</tt>, die die übergebene Zeichenkette umdreht.</li>

    <li>Legen Sie in <tt>main</tt> eine Testzeichenkette mit dem Inhalt "0123456789" an. Geben Sie diese auf der Konsole aus. Das Programm soll mit zwei Kommandozeilenparametern aufgerufen werden: die maximale Anzahl zu ersetzender Zeichen des Teststrings sowie
        der String, mit dem der Teststring überschrieben werden soll. Führt dementsprechend die Funktion <tt>ersetzen</tt> aus, gebt das Ergebnis aus, danach dann <tt>umdrehen</tt>, und gebt das Ergebnis nochmal aus.</li>
</ol>
Verwenden Sie keine Funktionen aus <tt>string.h&nbsp;</tt>!&nbsp; Sonst gibt es <b>keine Punkte </b>auf die Aufgabe.
<b>Freiwillig (ohne Punkte):</b> Welche Funktionen aus <tt>string.h</tt> wären hier nützlich gewesen und warum?
<br>
<br>
<i>Schaut euch die Beispielausgabe an:</i><br>
<br>
<pre>your_name@your_computer_name:~$ ./ohneWorte 0 ppr
Das Original ist: 0123456789&nbsp;
Ersetzt : 0123456789&nbsp;
Rückwärts : 9876543210&nbsp;
your_name@your_computer_name:~$ ./ohneWorte 2 ppr
Das Original ist: 0123456789&nbsp;
Ersetzt : pp23456789&nbsp;
Rückwärts : 98765432pp&nbsp;
your_name@your_computer_name:~$ ./ohneWorte 3 ppr
Das Original ist: 0123456789&nbsp;
Ersetzt : ppr3456789&nbsp;
Rückwärts : 9876543rpp&nbsp;
your_name@your_computer_name:~$ ./ohneWorte 4 ppr
Das Original ist: 0123456789&nbsp;
Ersetzt : ppr3456789&nbsp;
Rückwärts : 9876543rpp&nbsp;
your_name@your_computer_name:~$ ./ohneWorte 40 pprMachtSpass
Das Original ist: 0123456789&nbsp;
Ersetzt : pprMachtSp&nbsp;
Rückwärts : pSthcaMrpp&nbsp;
</pre>
<br>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>3</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>c_program</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0, 0, 5, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>25</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src)
{  
  
}

void umdrehen( char* str )
{
  
}

int main( int argc, char* argv[] )
{  
  char test[11]= "0123456789";
  printf( "Das Original ist: %s \n", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( "Ersetzt : %s \n", test );
  umdrehen( test );
  printf( "Rückwärts : %s \n", test );
}]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[{# name of the function you want to parse (flexibel) #}
{% set function_name = "main" %}
{# parse STUDENT_ANSWER #}
{% set text_after_function_name = STUDENT_ANSWER | split(function_name)[1] %}
{# constants (DO NOT CHANGE) #}
{% set occurence_of_open = 0 %}
{% set occurence_of_close = 0 %}
{% set function_string = "" %}
{% set parsing_done = false %}
{# outer loop { #}
{% for text_till_next_opened_brace in text_after_function_name | split("{")  %}
    {# Count how many { HAVE ALREADY occured.#}
    {% if not loop.first %}
        {% set occurence_of_open = occurence_of_open + 1 %}
    {% endif %}
    {# add { to string. First not because it has occured before first { second not, as we only want the content inside the {} #}
    {% if not parsing_done and loop.index0 >=2%}
        {% set function_string = function_string ~ "{" %}
    {% endif %}
    {# we need the information later #}
    {% set outer_loop_first = loop.first %}
    {# inner loop } #}
    {% for text_till_next_closed_brace in text_till_next_opened_brace | split("}")  %}
        {# Count how many } HAVE ALREADY occured.#}
        {% if not loop.first %}
            {% set occurence_of_close = occurence_of_close + 1 %}
        {% endif %}
        {# if this criterium holds, function is over } #}
        {% if occurence_of_open <= occurence_of_close and occurence_of_open > 0 %}
            {% set parsing_done = true %}
        {% endif %}
        {# content before and after fucntion is ignored } #}
        {% if not parsing_done and not outer_loop_first%}
            {# add } to string  #}
            {% if not loop.first %}
                {% set function_string = function_string ~ "}" %}
            {% endif %}
            {# add CONTENT to the string #}
            {% set function_string = function_string ~ text_till_next_closed_brace %}
        {% endif %}
    {% endfor %}
{% endfor %}

{% if "return" in function_string %}
    {% set function_has_return = true %}
{% else %}
    {% set function_has_return = false %}
{% endif %}

{% if function_has_return %}
{{ STUDENT_ANSWER | replace({'int main': 'int student_main2'}) }} 
{% else %}
{{ STUDENT_ANSWER | replace({'int main': 'void student_main2', 'void main': 'void student_main2'}) }} 
{% endif %}



void student_main(char* first, char* second) {
    
    int length = 3;
    char *a[length];
    a[0] = "name";
    a[1] = first;
    a[2] = second;
    student_main2(length, a);    

}

void testUmdrehen(char* str) {
    printf("%s\n", str);
    umdrehen(str);
    printf("%s\n", str);
}

int main() {
    {{TEST.testcode}}
}

]]></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src)
{  
  for ( int i = 0; i < zahl; i++ )
  {
    if ( dest[i] == '\0' || src[i] == '\0' )  break;
    dest[i] = src[i];
  } 
}

void umdrehen( char* str )
{
  char tmp = 0; 
  int strLen = 0;
  for ( ; str[strLen] != '\0'; strLen++ );
  for ( int i = 0; i < strLen / 2 ; i++ )
  {
    tmp = str[i];
    str[i] = str[strLen-i-1];
    str[strLen-i-1] = tmp;
  }
}

int main( int argc, char* argv[] )
{  
  char test[11]= "0123456789";
  printf( "Das Original ist: %s \n", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( "Ersetzt : %s \n", test );
  umdrehen( test );
  printf( "Rückwärts : %s \n", test );
}]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>NearEqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams><![CDATA[{"compileargs":["-std=c99"]}]]></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald></templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[student_main("0", "ppr");]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Das Original ist: 0123456789
Ersetzt : 0123456789
Rückwärts : 9876543210
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[student_main("40", "pprMachtSpassss");]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Das Original ist: 0123456789
Ersetzt : pprMachtSp
Rückwärts : pSthcaMrpp
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char str[6] = "Robin";
testUmdrehen(str);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Robin
niboR
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char str[11] = "0123456789";
testUmdrehen(str);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0123456789
9876543210
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
    </testcases>
  </question>

</quiz>