<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 2691741  -->
  <question type="coderunner">
    <name>
      <text>Das beste Passwort der Welt (Kommandozeilenargumente) (Neu; FERTIG)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Schreibt ein Programm</p><ul><li>Dass am Programmstart einige Wörter als <strong>Kommandozeilenargumente </strong>übergeben bekommt (diese stehen dann während des Programmablaufs als Zeichenketten zur Verfügung)</li><li>Diese Zeichenketten sollen aneinander <strong>gehängt </strong>und die Buchstaben 'x', 'y', 'q', bzw. auch 'X', 'Y' und 'Q' <strong>aussortiert </strong>werden. <strong>Speichert </strong>das Ergebnis also in einen neuen String und gebt das Ergebnis anschließend<strong> aus</strong></li><li>Erweitert das Programm dann so, dass von der <strong>verbliebenen </strong>Zeichenkette (das Ergebnis aus dem letzten Punkt) jedes <strong>3te</strong> Zeichen in einen <strong>neuen </strong>String kopiert wird, der dann am Ende ausgegeben wird. Beginnend vom ersten Buchstaben an (siehe erwartete Ausgabe des ersten Tests)<br></li><li>Ihr dürft string.h <strong>nicht </strong>verwenden</li></ul><p><span class="" style="color: rgb(197, 14, 31);">Hinweise:</span><br></p><ul><li>Kommandozeilenargumente wurden in der Vorlesung zu Strings besprochen</li><li> Denkt an das Terminationszeichen...</li><li><strong><span class="" style="color: rgb(239, 69, 64);">Orientiert </span></strong>euch bei den Ausgaben so wie immer an den Tests</li><li>die beiden Strings die ihr für diese Aufgabe benötigt, könnt ihr einfach <strong>statisch </strong>mit der größe 100 erzeugen</li><li>Denkt daran, dass bei char-Arrays nicht zwangsläufig nur '\0' in den Werten steht. Euer Computer, aber auch ISIS könnte also Probleme bekommen, wenn das Ende des Strings nicht eindeutig markiert ist<br></li></ul>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>4</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>c_advanced</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0, 0, 5, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>35</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[#include <stdio.h>

int main(int argc, char* argv[])
{
  int sammelzaehler = 0;
  char kollektion[100] = "";
  for(int j = 1; j < argc; j++)
  {
    for(char* p = argv[j]; (*p) != '\0'; p++)
    {
      if((*p != 'x')&&(*p != 'y')&&(*p != 'q')&&(*p != 'X')&&(*p != 'Y')&&(*p != 'Q'))
      {
        kollektion[sammelzaehler] = *p;
        sammelzaehler++;
      }
    }
  }
  kollektion[sammelzaehler] = '\0';
  printf("x,y,q und X,Y,Q aussortiert: %s\n", kollektion);
  char neuerString[100] = "";
  int i=0;
  for(; i < sammelzaehler; i += 3)
  {
      neuerString[i/3] = kollektion[i];
  }
  neuerString[i/3] = '\0';
  printf("Der neue String lautet: %s \n", neuerString );
}
 ]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[// 1. Test (./[programm] lasse roland max ivo)
char* str[] = {"./[programm]", "lasse", "roland", "max", "ivo"};
student_main(5, str);]]></text>
      </testcode>
      <stdin>
                <text>lasse
roland
max
ivo</text>
      </stdin>
      <expected>
                <text>x,y,q und X,Y,Q aussortiert: lasserolandmaivo
Der neue String lautet: lsonao
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[// 2. Test (./[programm] PPR macht Spass!)
char* str[] = {"./[programm]", "PPR", "macht", "Spass!"};
student_main(4, str);]]></text>
      </testcode>
      <stdin>
                <text>PPR
macht
Spass!</text>
      </stdin>
      <expected>
                <text>x,y,q und X,Y,Q aussortiert: PPRmachtSpass!
Der neue String lautet: Pmhps
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[// 3. test (./[programm] Dieser-Test-ist-geheim?!)
char* str[] = {"./[programm]", "Dieser-Test-ist-geheim?!"};
student_main(2, str);]]></text>
      </testcode>
      <stdin>
                <text>Dieser-Test-ist-geheim?!</text>
      </stdin>
      <expected>
                <text>x,y,q und X,Y,Q aussortiert: Dieser-Test-ist-geheim?!
Der neue String lautet: Ds-si-hm
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[// 4. Test (./[programm] Mein Name ist Quentin.)
char* str[] = {"./[programm]", "Mein", "Name", "ist", "Quentin."};
student_main(5, str);]]></text>
      </testcode>
      <stdin>
                <text>Mein
Name
ist
Quentin.</text>
      </stdin>
      <expected>
                <text>x,y,q und X,Y,Q aussortiert: MeinNameistuentin.
Der neue String lautet: Mnmsei
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[// 5. Test (./[programm] xYzq XyZQ)
char* str[] = {"./[programm]", "xYzq", "XyZQ"};
student_main(3, str);]]></text>
      </testcode>
      <stdin>
                <text>xYzq
XyZQ</text>
      </stdin>
      <expected>
                <text>x,y,q und X,Y,Q aussortiert: zZ
Der neue String lautet: z
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob der Code Schleifen enthält</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(re.search("for", S_A) or re.search("while", S_A))]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob der Code Ausgaben enthält</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(re.search("printf", S_A))]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob der Code bestimmte Buchstaben aussortiert ('x', 'y', 'z' und 'X', 'Y', 'Z')</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!
Passt!
</text>
      </expected>
      <extra>
                <text><![CDATA[S_A = remove_comments(S_A)
print_if(re.search("'x'", S_A) and re.search("'y'", S_A) and re.search("'q'", S_A), "Passt!", "'x', 'y' oder 'q' sind nicht im Code zu finden")
print_if(re.search("'X'", S_A) and re.search("'Y'", S_A) and re.search("'Q'", S_A), "Passt!", "'X', 'Y' oder 'Q' sind nicht im Code zu finden")
]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
    </testcases>
  </question>

</quiz>