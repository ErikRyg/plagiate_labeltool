<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 3420493  -->
  <question type="coderunner">
    <name>
      <text>Dynamischer Speicher (Sehr leicht) (Neu)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Warum funktioniert das unten stehende Programm nicht?<br><br>Verändern Sie den Quellcode so, dass das Programm funktioniert. Verändert werden dürfen nur die Funktionsrümpfe (oder auch Funktionskörper) der <b>allocArray</b><b>()</b> und <b>main</b><b>()</b> Funktion.<br><br><b>Hinweis</b>: Wenn Sie die Aufgabe mit static lösen, bekommen Sie dafür keine Punkte. Nutzen Sie Konzepte aus dieser Woche.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>3</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>c_advanced</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0, 0, 5, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[#include <stdio.h>
#include <stdlib.h>

int* allocArray() {
	int arr[10];
	return arr;
}

int main(void){
	int* p;
	int summe = 0;
	p = allocArray();
	for(int i = 0; i != 10; ++i) {
		p[i] = i;
	}
	for(int i = 0; i != 10; ++i) {
		summe += p[i];
	}
	printf("Summe = %d\n", summe);
}
]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[#include <stdio.h>
#include <stdlib.h>

int* allocArray() {
	int* arr = (int*)malloc(10 * sizeof( int ));
	return arr;
}

int main(void){
	int* p;
	int summe = 0;
	p = allocArray();
	for(int i = 0; i != 10; ++i) {
		p[i] = i;
	}
	for(int i = 0; i != 10; ++i) {
		summe += p[i];
	}
	printf("Summe = %d\n", summe);
	free(p);
}
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>main();</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Summe = 45
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(not re.search("static", S_A), "", "static ist laut Aufgabenstellung nicht erlaubt!")]]></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int* tmp = allocArray();
for(int i = 0; i < 10; i++) tmp[i]=i;
for(int i = 0; i < 10; i++) printf("%i\n", tmp[i]);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0
1
2
3
4
5
6
7
8
9
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(not re.search("static", S_A), "", "static ist laut Aufgabenstellung nicht erlaubt!")]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int* tmp = allocArray();
for(int i = 0; i < 10; i++) tmp[i]=i*5;
for(int i = 0; i < 10; i++) printf("%i\n", tmp[i]);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0
5
10
15
20
25
30
35
40
45
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(not re.search("static", S_A), "", "static ist laut Aufgabenstellung nicht erlaubt!")]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int* tmp = allocArray();
for(int i = 0; i < 10; i++) tmp[i]=i*9;
for(int i = 0; i < 10; i++) printf("%i\n", tmp[i]);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0
9
18
27
36
45
54
63
72
81
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(not re.search("static", S_A), "", "static ist laut Aufgabenstellung nicht erlaubt!")]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
    </testcases>
  </question>

</quiz>