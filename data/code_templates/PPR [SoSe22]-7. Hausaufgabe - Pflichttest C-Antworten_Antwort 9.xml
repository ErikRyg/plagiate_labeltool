<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 3420224  -->
  <question type="coderunner">
    <name>
      <text>Nächste Bitte (Neu; FERTIG)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Schreibt ein Programm, das eine Art Warteschlangenabarbeitung implementiert. Die Warteschlange wird anhand eines Arrays von Zahlen modelliert. Jede Zahl in diesem Array stehe für eine Wartezeit.<br><br></p><ul><li>Legt ein Array mit 5 Elementen in <strong>main</strong> an und lasst es vom Programmnutzer mit ganzen Zahlen per Eingabe füllen. </li><li>Schreibt eine Funktion <strong>findIndexOfMax</strong>, die als erstes das <strong>Array </strong>mit Zahlen und als zweites die <strong>Größe </strong>des Arrays übergeben bekommt und den <strong>Index </strong>des Elementes mit der grössten Zahl zurückgibt.</li><li>Aus <strong>main</strong> soll diese Funktion in einer Schleife aufgerufen werden und dann jeweils das Element des zurückgegebenen Indexes auf <strong>INT_MIN</strong> gesetzt werden. Ein Element, das als Wert <strong>INT_MIN</strong> enthält, gelte als abgearbeitet.</li><li><strong>findIndexOfMax</strong> muss, falls die Warteschlange leer ist (alle Einträge entsprechen <strong>INT_MIN</strong>), einen definierten Wert zurückgeben (z.B.: <strong>UINT_MAX</strong>)</li><li>Wird dieser definierte Wert an <strong>main</strong> zurückgegeben, ist die Warteschlange abgearbeitet und das Programm wird beendet.</li></ul><p>Was ist <strong>INT_MIN</strong> und <strong>UINT_MAX</strong>? Schaut hier nach: <a href="https://www.tutorialspoint.com/c_standard_library/limits_h.htm">https://www.tutorialspoint.com/c_standard_library/limits_h.htm</a>.<br><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>4</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>c_advanced</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0, 0, 5, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>35</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[#include <limits.h>
]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[#include <stdio.h>
#include <limits.h>

unsigned int findIndexOfMax(int numbers[], int count)
{
    int max = INT_MIN;
    unsigned int index = UINT_MAX;
    for(unsigned int i = 0; i < count; i++)
    {
        if (max < numbers[i]) 
        { 
            max = numbers[i];
            index = i;
        }
    }
    return index;
}

int main()
{
    unsigned int size = 5;
    int numbers[size];
    printf("Bitte geben Sie %u ganze Zahlen ein: ", size);
    for(unsigned int i = 0; i < size; i++) scanf("%i", &numbers[i]);
    for(unsigned int maxIdx = findIndexOfMax(numbers, size); maxIdx != UINT_MAX; maxIdx = findIndexOfMax(numbers, size))
    {
        printf("Naechstgroesstes: %i \n", numbers[maxIdx]);
        numbers[maxIdx] = INT_MIN;
    }
}]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>main();</text>
      </testcode>
      <stdin>
                <text>1 -2 3 -4 1234</text>
      </stdin>
      <expected>
                <text>Bitte geben Sie 5 ganze Zahlen ein: Naechstgroesstes: 1234
Naechstgroesstes: 3
Naechstgroesstes: 1
Naechstgroesstes: -2
Naechstgroesstes: -4
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")]]></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>main();</text>
      </testcode>
      <stdin>
                <text>10 5 20 -100 0</text>
      </stdin>
      <expected>
                <text>Bitte geben Sie 5 ganze Zahlen ein: Naechstgroesstes: 20
Naechstgroesstes: 10
Naechstgroesstes: 5
Naechstgroesstes: 0
Naechstgroesstes: -100
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>main();</text>
      </testcode>
      <stdin>
                <text>1 2 3 4 5</text>
      </stdin>
      <expected>
                <text>Bitte geben Sie 5 ganze Zahlen ein: Naechstgroesstes: 5
Naechstgroesstes: 4
Naechstgroesstes: 3
Naechstgroesstes: 2
Naechstgroesstes: 1
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(list_of_globals(S_A) == [], "", "Nicht erlaubt: Folgende globale Variablen wurden definiert:\n" + "\n".join(list_of_globals(S_A)) + "\n\n")]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>main();</text>
      </testcode>
      <stdin>
                <text>-1 -2 -3 -4 -5</text>
      </stdin>
      <expected>
                <text>Bitte geben Sie 5 ganze Zahlen ein: Naechstgroesstes: -1
Naechstgroesstes: -2
Naechstgroesstes: -3
Naechstgroesstes: -4
Naechstgroesstes: -5
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int array[] = {1, 7, 21, 6}; 
int index = findIndexOfMax(array, 4);
printf("Die größte Zahl des Arrays liegt am Index %i und lautet %i\n", index, array[index]);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Die größte Zahl des Arrays liegt am Index 2 und lautet 21
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int array[] = {1, 7, 21, 6, 38, 42, 3}; 
int index = findIndexOfMax(array, 7);
printf("Die größte Zahl des Arrays liegt am Index %i und lautet %i\n", index, array[index]);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Die größte Zahl des Arrays liegt am Index 5 und lautet 42
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int array[] = {444, 47, 221, 66}; 
int index = findIndexOfMax(array, 4);
printf("Die größte Zahl des Arrays liegt am Index %i und lautet %i\n", index, array[index]);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Die größte Zahl des Arrays liegt am Index 0 und lautet 444
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int array[] = {INT_MIN, INT_MIN, INT_MIN, INT_MIN}; 
int index = findIndexOfMax(array, 4);
if(index == UINT_MAX)
    printf("Der Rückgabewert der Funktion findIndexOfMax bei leerer Liste ist richtig.\n");
else
    printf("Der Rückgabewert der Funktion findIndexOfMax bei leerer Liste ist falsch. Er sollte UINT_MAX = %i sein.\nDeiner ist jedoch %i.", UINT_MAX, index);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Der Rückgabewert der Funktion findIndexOfMax bei leerer Liste ist richtig.
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob INT_MIN und UINT_MAX verwendet wurden</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(re.search("INT_MIN", S_A) and re.search("UINT_MAX", S_A))]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob die Lösung des Studenten den Nutzer nach Zahlen fragt</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(re.search("Bitte\s*geben\s*Sie\s*\S+\s*ganze\s*Zahlen\s*ein:", S_A))]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob die Lösung des Studenten die nächstgrößte Zahl des Arrays ausgibt</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(re.search("Naechstgroesstes:\s*\S+", S_A))]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>// Testet ob die Lösung des Studenten Schleifen verwendet</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Passt!
</text>
      </expected>
      <extra>
                <text><![CDATA[print_if(re.search("for", S_A) or re.search("while", S_A))]]></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
    </testcases>
  </question>

</quiz>